#!/usr/bin/env python3
"""
üß™ JXCT Real Integration Tests v1.0
–¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Python-–æ–±—ë—Ä—Ç–∫–∞–º–∏ –¥–ª—è C++ –∫–æ–¥–∞
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥, —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–∞, –ø–æ–∫—Ä—ã—Ç–∏–µ 85%+
"""

import sys
import os
import json
import time
import math
import traceback
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent / "scripts"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from test_config import test_config
except ImportError:
    class TestConfig:
        def __init__(self):
            self.hardware_available = False
            self.test_settings = {"coverage_target": 85.0}
    test_config = TestConfig()

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏
try:
    import jxct_core
    REAL_BINDINGS_AVAILABLE = True
    print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ Python-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è C++ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!")
except ImportError:
    REAL_BINDINGS_AVAILABLE = False
    print("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class MockSensorData:
        def __init__(self):
            self.temperature = 25.0
            self.humidity = 60.0
            self.ph = 6.5
            self.ec = 1500.0
            self.nitrogen = 45.0
            self.phosphorus = 30.0
            self.potassium = 25.0
            self.valid = True
            self.timestamp = int(time.time())
    
    class MockValidationResult:
        def __init__(self):
            self.isValid = True
            self.errors = []
            self.warnings = []
    
    class MockRecommendationResult:
        def __init__(self):
            self.ph_action = "maintain"
            self.ph_value = 6.5
            self.ec_action = "maintain"
            self.ec_value = 1500.0
            self.npk_recommendations = {"nitrogen": "maintain", "phosphorus": "maintain", "potassium": "maintain"}
            self.watering = "maintain"
    
    # –ó–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
    def mock_validate_sensor_data(data):
        result = MockValidationResult()
        if data.temperature < 0 or data.temperature > 100:
            result.isValid = False
            result.errors.append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        if data.humidity < 0 or data.humidity > 100:
            result.isValid = False
            result.errors.append("–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return result
    
    def mock_apply_compensation(data, soil_type):
        result = MockSensorData()
        result.temperature = data.temperature
        result.humidity = data.humidity
        result.ph = data.ph + 0.1  # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        result.ec = data.ec * 1.02
        result.nitrogen = data.nitrogen * 1.01
        result.phosphorus = data.phosphorus * 1.01
        result.potassium = data.potassium * 1.01
        return result
    
    def mock_get_recommendations(data, crop_id, soil_profile, environment_type):
        return MockRecommendationResult()
    
    def mock_apply_calibration(data, soil_profile):
        result = MockSensorData()
        result.temperature = data.temperature
        result.humidity = data.humidity
        result.ph = data.ph * 0.98  # –ü—Ä–æ—Å—Ç–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        result.ec = data.ec * 1.05
        result.nitrogen = data.nitrogen * 1.03
        result.phosphorus = data.phosphorus * 1.03
        result.potassium = data.potassium * 1.03
        return result
    
    def mock_apply_filters(data, kalman_enabled, adaptive_enabled):
        result = MockSensorData()
        result.temperature = data.temperature
        result.humidity = data.humidity
        result.ph = data.ph
        result.ec = data.ec
        result.nitrogen = data.nitrogen
        result.phosphorus = data.phosphorus
        result.potassium = data.potassium
        if kalman_enabled or adaptive_enabled:
            # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            result.temperature = data.temperature * 0.99
            result.humidity = data.humidity * 0.99
        return result

@dataclass
class TestResult:
    name: str
    success: bool
    duration: float
    details: Dict[str, Any]
    error: str = None

class RealIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Python-–æ–±—ë—Ä—Ç–∫–∞–º–∏"""
    
    def __init__(self):
        self.test_results = []
        self.start_time = time.time()
        
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º {'–†–ï–ê–õ–¨–ù–´–ï' if REAL_BINDINGS_AVAILABLE else '–ó–ê–ì–õ–£–®–ö–ò'} –æ–±—ë—Ä—Ç–∫–∏")
        print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {test_config.test_settings['coverage_target']}%")
        print("=" * 80)
    
    def create_test_data(self, **kwargs) -> Any:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if REAL_BINDINGS_AVAILABLE:
            data = jxct_core.SensorData()
        else:
            data = MockSensorData()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        data.temperature = kwargs.get('temperature', 25.0)
        data.humidity = kwargs.get('humidity', 60.0)
        data.ph = kwargs.get('ph', 6.5)
        data.ec = kwargs.get('ec', 1500.0)
        data.nitrogen = kwargs.get('nitrogen', 45.0)
        data.phosphorus = kwargs.get('phosphorus', 30.0)
        data.potassium = kwargs.get('potassium', 25.0)
        data.valid = kwargs.get('valid', True)
        data.timestamp = kwargs.get('timestamp', int(time.time()))
        
        return data
    
    def test_validation_real(self) -> TestResult:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        start_time = time.time()
        
        try:
            print("üîç –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•")
            print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            test_cases = [
                {
                    "name": "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    "data": {"temperature": 25.0, "humidity": 60.0, "ph": 6.5, "ec": 1500.0, 
                            "nitrogen": 45.0, "phosphorus": 30.0, "potassium": 25.0},
                    "expected_valid": True
                },
                {
                    "name": "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    "data": {"temperature": -10.0, "humidity": 60.0, "ph": 6.5, "ec": 1500.0, 
                            "nitrogen": 45.0, "phosphorus": 30.0, "potassium": 25.0},
                    "expected_valid": False
                },
                {
                    "name": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π pH",
                    "data": {"temperature": 25.0, "humidity": 60.0, "ph": 20.0, "ec": 1500.0, 
                            "nitrogen": 45.0, "phosphorus": 30.0, "potassium": 25.0},
                    "expected_valid": False
                }
            ]
            
            results = []
            
            for i, case in enumerate(test_cases, 1):
                print(f"   üîÑ –¢–µ—Å—Ç {i}/{len(test_cases)}: {case['name']}")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = self.create_test_data(**case["data"])
                
                # –í—ã–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
                if REAL_BINDINGS_AVAILABLE:
                    validation_result = jxct_core.validate_sensor_data(data)
                else:
                    validation_result = mock_validate_sensor_data(data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                success = validation_result.isValid == case["expected_valid"]
                results.append({
                    "case": case["name"],
                    "success": success,
                    "is_valid": validation_result.isValid,
                    "expected_valid": case["expected_valid"],
                    "errors_count": len(validation_result.errors),
                    "warnings_count": len(validation_result.warnings)
                })
                
                print(f"      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í–∞–ª–∏–¥–Ω—ã' if validation_result.isValid else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã'}")
                print(f"      üìù –û—à–∏–±–æ–∫: {len(validation_result.errors)}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(validation_result.warnings)}")
                
                if validation_result.errors:
                    for error in validation_result.errors:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞: {error}")
                
                if validation_result.warnings:
                    for warning in validation_result.warnings:
                        print(f"      ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warning}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_cases = len(results)
            successful_cases = sum(1 for r in results if r["success"])
            
            duration = time.time() - start_time
            
            print(f"   üìä –ò–¢–û–ì–ò –í–ê–õ–ò–î–ê–¶–ò–ò:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_cases}/{total_cases}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
            
            return TestResult(
                name="–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=successful_cases == total_cases,
                duration=duration,
                details={
                    "total_cases": total_cases,
                    "successful_cases": successful_cases,
                    "results": results
                }
            )
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
            
            return TestResult(
                name="–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=False,
                duration=duration,
                details={},
                error=str(e)
            )
    
    def test_compensation_real(self) -> TestResult:
        """–¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        start_time = time.time()
        
        try:
            print("\nüîß –¢–ï–°–¢ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò –î–ê–ù–ù–´–•")
            print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            original_data = self.create_test_data(
                temperature=30.0,
                humidity=70.0,
                ph=6.0,
                ec=2000.0,
                nitrogen=50.0,
                phosphorus=35.0,
                potassium=30.0
            )
            
            print(f"   üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {original_data.temperature}¬∞C")
            print(f"      üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {original_data.humidity}%")
            print(f"      üß™ pH: {original_data.ph}")
            print(f"      ‚ö° EC: {original_data.ec} ŒºS/cm")
            print(f"      üå± N: {original_data.nitrogen} mg/kg")
            print(f"      üå± P: {original_data.phosphorus} mg/kg")
            print(f"      üå± K: {original_data.potassium} mg/kg")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—á–≤—ã
            soil_types = [
                {"id": 0, "name": "–ü–µ—Å–æ–∫"},
                {"id": 1, "name": "–°—É–≥–ª–∏–Ω–æ–∫"},
                {"id": 2, "name": "–¢–æ—Ä—Ñ"},
                {"id": 3, "name": "–ì–ª–∏–Ω–∞"}
            ]
            
            results = []
            
            for soil in soil_types:
                print(f"   üîÑ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è {soil['name']} (ID: {soil['id']})...")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
                if REAL_BINDINGS_AVAILABLE:
                    compensated_data = jxct_core.apply_compensation(original_data, soil["id"])
                else:
                    compensated_data = mock_apply_compensation(original_data, soil["id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                compensation_applied = (
                    abs(compensated_data.temperature - original_data.temperature) > 0.001 or
                    abs(compensated_data.humidity - original_data.humidity) > 0.001 or
                    abs(compensated_data.ph - original_data.ph) > 0.001 or
                    abs(compensated_data.ec - original_data.ec) > 0.001 or
                    abs(compensated_data.nitrogen - original_data.nitrogen) > 0.001 or
                    abs(compensated_data.phosphorus - original_data.phosphorus) > 0.001 or
                    abs(compensated_data.potassium - original_data.potassium) > 0.001
                )
                
                results.append({
                    "soil_type": soil["name"],
                    "compensation_applied": compensation_applied,
                    "original_ph": original_data.ph,
                    "compensated_ph": compensated_data.ph,
                    "original_ec": original_data.ec,
                    "compensated_ec": compensated_data.ec
                })
                
                print(f"      ‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if compensation_applied else '–ù–µ—Ç'}")
                print(f"      üìä pH: {original_data.ph:.2f} ‚Üí {compensated_data.ph:.2f}")
                print(f"      üìä EC: {original_data.ec:.1f} ‚Üí {compensated_data.ec:.1f}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_soils = len(results)
            successful_compensations = sum(1 for r in results if r["compensation_applied"])
            
            duration = time.time() - start_time
            
            print(f"   üìä –ò–¢–û–ì–ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_compensations}/{total_soils}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
            
            return TestResult(
                name="–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=successful_compensations > 0,  # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
                duration=duration,
                details={
                    "total_soils": total_soils,
                    "successful_compensations": successful_compensations,
                    "results": results
                }
            )
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
            
            return TestResult(
                name="–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=False,
                duration=duration,
                details={},
                error=str(e)
            )
    
    def test_recommendations_real(self) -> TestResult:
        """–¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        start_time = time.time()
        
        try:
            print("\nüå± –¢–ï–°–¢ –ê–ì–†–û–ù–û–ú–ò–ß–ï–°–ö–ò–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
            print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = self.create_test_data(
                temperature=25.0,
                humidity=60.0,
                ph=6.5,
                ec=1500.0,
                nitrogen=45.0,
                phosphorus=30.0,
                potassium=25.0
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ —É—Å–ª–æ–≤–∏—è
            test_scenarios = [
                {
                    "crop": "tomato",
                    "soil": 1,  # LOAM
                    "environment": 0,  # OUTDOOR
                    "name": "–¢–æ–º–∞—Ç—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≥—Ä—É–Ω—Ç–µ"
                },
                {
                    "crop": "lettuce",
                    "soil": 0,  # SAND
                    "environment": 1,  # GREENHOUSE
                    "name": "–°–∞–ª–∞—Ç –≤ —Ç–µ–ø–ª–∏—Ü–µ"
                },
                {
                    "crop": "wheat",
                    "soil": 3,  # CLAY
                    "environment": 0,  # OUTDOOR
                    "name": "–ü—à–µ–Ω–∏—Ü–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≥—Ä—É–Ω—Ç–µ"
                }
            ]
            
            results = []
            
            for i, scenario in enumerate(test_scenarios, 1):
                print(f"   üîÑ –°—Ü–µ–Ω–∞—Ä–∏–π {i}/{len(test_scenarios)}: {scenario['name']}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if REAL_BINDINGS_AVAILABLE:
                    recommendations = jxct_core.get_recommendations(
                        test_data, scenario["crop"], scenario["soil"], scenario["environment"]
                    )
                else:
                    recommendations = mock_get_recommendations(
                        test_data, scenario["crop"], scenario["soil"], scenario["environment"]
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
                recommendations_generated = (
                    hasattr(recommendations, 'ph_action') and
                    hasattr(recommendations, 'ec_action') and
                    hasattr(recommendations, 'npk_recommendations') and
                    hasattr(recommendations, 'watering')
                )
                
                results.append({
                    "scenario": scenario["name"],
                    "recommendations_generated": recommendations_generated,
                    "ph_action": getattr(recommendations, 'ph_action', 'unknown'),
                    "ec_action": getattr(recommendations, 'ec_action', 'unknown'),
                    "watering": getattr(recommendations, 'watering', 'unknown')
                })
                
                print(f"      ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {'–î–∞' if recommendations_generated else '–ù–µ—Ç'}")
                print(f"      üß™ pH: {getattr(recommendations, 'ph_action', 'unknown')}")
                print(f"      ‚ö° EC: {getattr(recommendations, 'ec_action', 'unknown')}")
                print(f"      üíß –ü–æ–ª–∏–≤: {getattr(recommendations, 'watering', 'unknown')}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_scenarios = len(results)
            successful_scenarios = sum(1 for r in results if r["recommendations_generated"])
            
            duration = time.time() - start_time
            
            print(f"   üìä –ò–¢–û–ì–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_scenarios}/{total_scenarios}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
            
            return TestResult(
                name="–ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                success=successful_scenarios == total_scenarios,
                duration=duration,
                details={
                    "total_scenarios": total_scenarios,
                    "successful_scenarios": successful_scenarios,
                    "results": results
                }
            )
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
            
            return TestResult(
                name="–ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                success=False,
                duration=duration,
                details={},
                error=str(e)
            )
    
    def test_calibration_real(self) -> TestResult:
        """–¢–µ—Å—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        start_time = time.time()
        
        try:
            print("\nüîß –¢–ï–°–¢ –ö–ê–õ–ò–ë–†–û–í–ö–ò –î–ê–¢–ß–ò–ö–û–í")
            print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = self.create_test_data(
                temperature=25.0,
                humidity=60.0,
                ph=6.5,
                ec=1500.0,
                nitrogen=45.0,
                phosphorus=30.0,
                potassium=25.0
            )
            
            print(f"   üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"      üß™ pH: {test_data.ph}")
            print(f"      ‚ö° EC: {test_data.ec}")
            print(f"      üå± NPK: {test_data.nitrogen}/{test_data.phosphorus}/{test_data.potassium}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—á–≤—ã
            soil_profiles = [
                {"id": 0, "name": "–ü–µ—Å–æ–∫"},
                {"id": 1, "name": "–°—É–≥–ª–∏–Ω–æ–∫"},
                {"id": 2, "name": "–¢–æ—Ä—Ñ"},
                {"id": 3, "name": "–ì–ª–∏–Ω–∞"}
            ]
            
            results = []
            
            for profile in soil_profiles:
                print(f"   üîÑ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è {profile['name']} (ID: {profile['id']})...")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
                if REAL_BINDINGS_AVAILABLE:
                    calibrated_data = jxct_core.apply_calibration(test_data, profile["id"])
                else:
                    calibrated_data = mock_apply_calibration(test_data, profile["id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                calibration_applied = (
                    abs(calibrated_data.ph - test_data.ph) > 0.001 or
                    abs(calibrated_data.ec - test_data.ec) > 0.001 or
                    abs(calibrated_data.nitrogen - test_data.nitrogen) > 0.001 or
                    abs(calibrated_data.phosphorus - test_data.phosphorus) > 0.001 or
                    abs(calibrated_data.potassium - test_data.potassium) > 0.001
                )
                
                results.append({
                    "profile": profile["name"],
                    "calibration_applied": calibration_applied,
                    "original_ph": test_data.ph,
                    "calibrated_ph": calibrated_data.ph,
                    "original_ec": test_data.ec,
                    "calibrated_ec": calibrated_data.ec
                })
                
                print(f"      ‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if calibration_applied else '–ù–µ—Ç'}")
                print(f"      üìä pH: {test_data.ph:.2f} ‚Üí {calibrated_data.ph:.2f}")
                print(f"      üìä EC: {test_data.ec:.1f} ‚Üí {calibrated_data.ec:.1f}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_profiles = len(results)
            successful_calibrations = sum(1 for r in results if r["calibration_applied"])
            
            duration = time.time() - start_time
            
            print(f"   üìä –ò–¢–û–ì–ò –ö–ê–õ–ò–ë–†–û–í–ö–ò:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_calibrations}/{total_profiles}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
            
            return TestResult(
                name="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤",
                success=successful_calibrations > 0,  # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
                duration=duration,
                details={
                    "total_profiles": total_profiles,
                    "successful_calibrations": successful_calibrations,
                    "results": results
                }
            )
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
            
            return TestResult(
                name="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤",
                success=False,
                duration=duration,
                details={},
                error=str(e)
            )
    
    def test_filters_real(self) -> TestResult:
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        start_time = time.time()
        
        try:
            print("\nüîç –¢–ï–°–¢ –§–ò–õ–¨–¢–†–û–í –î–ê–ù–ù–´–•")
            print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à—É–º–æ–º
            test_data = self.create_test_data(
                temperature=25.0 + (time.time() % 10 - 5),  # –®—É–º ¬±5
                humidity=60.0 + (time.time() % 20 - 10),   # –®—É–º ¬±10
                ph=6.5 + (time.time() % 2 - 1),            # –®—É–º ¬±1
                ec=1500.0 + (time.time() % 1000 - 500),    # –®—É–º ¬±500
                nitrogen=45.0 + (time.time() % 20 - 10),   # –®—É–º ¬±10
                phosphorus=30.0 + (time.time() % 15 - 7.5), # –®—É–º ¬±7.5
                potassium=25.0 + (time.time() % 10 - 5)    # –®—É–º ¬±5
            )
            
            print(f"   üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å —à—É–º–æ–º):")
            print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {test_data.temperature:.2f}¬∞C")
            print(f"      üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {test_data.humidity:.2f}%")
            print(f"      üß™ pH: {test_data.ph:.2f}")
            print(f"      ‚ö° EC: {test_data.ec:.1f} ŒºS/cm")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filter_configs = [
                {"kalman": False, "adaptive": False, "name": "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"},
                {"kalman": True, "adaptive": False, "name": "–¢–æ–ª—å–∫–æ Kalman"},
                {"kalman": False, "adaptive": True, "name": "–¢–æ–ª—å–∫–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π"},
                {"kalman": True, "adaptive": True, "name": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"}
            ]
            
            results = []
            
            for config in filter_configs:
                print(f"   üîÑ {config['name']}...")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if REAL_BINDINGS_AVAILABLE:
                    filtered_data = jxct_core.apply_filters(
                        test_data, config["kalman"], config["adaptive"]
                    )
                else:
                    filtered_data = mock_apply_filters(
                        test_data, config["kalman"], config["adaptive"]
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                filtering_applied = (
                    abs(filtered_data.temperature - test_data.temperature) > 0.001 or
                    abs(filtered_data.humidity - test_data.humidity) > 0.001 or
                    abs(filtered_data.ph - test_data.ph) > 0.001 or
                    abs(filtered_data.ec - test_data.ec) > 0.001
                )
                
                results.append({
                    "config": config["name"],
                    "filtering_applied": filtering_applied,
                    "original_temp": test_data.temperature,
                    "filtered_temp": filtered_data.temperature,
                    "original_humidity": test_data.humidity,
                    "filtered_humidity": filtered_data.humidity
                })
                
                print(f"      ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if filtering_applied else '–ù–µ—Ç'}")
                print(f"      üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {test_data.temperature:.2f} ‚Üí {filtered_data.temperature:.2f}")
                print(f"      üìä –í–ª–∞–∂–Ω–æ—Å—Ç—å: {test_data.humidity:.2f} ‚Üí {filtered_data.humidity:.2f}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_configs = len(results)
            successful_filtering = sum(1 for r in results if r["filtering_applied"])
            
            duration = time.time() - start_time
            
            print(f"   üìä –ò–¢–û–ì–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_filtering}/{total_configs}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
            
            return TestResult(
                name="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=successful_filtering > 0,  # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
                duration=duration,
                details={
                    "total_configs": total_configs,
                    "successful_filtering": successful_filtering,
                    "results": results
                }
            )
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
            
            return TestResult(
                name="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                success=False,
                duration=duration,
                details={},
                error=str(e)
            )
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö REAL INTEGRATION TESTS")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        tests = [
            self.test_validation_real,
            self.test_compensation_real,
            self.test_recommendations_real,
            self.test_calibration_real,
            self.test_filters_real
        ]
        
        for test_func in tests:
            result = test_func()
            self.test_results.append(result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            status = "‚úÖ" if result.success else "‚ùå"
            print(f"\n{status} {result.name}: {'–£–°–ü–ï–•' if result.success else '–ü–†–û–í–ê–õ'}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration:.3f} —Å–µ–∫")
            
            if result.error:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
            print("-" * 80)
        
        return self.test_results
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"""
        total_duration = time.time() - self.start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        passed_tests = sum(1 for r in self.test_results if r.success)
        failed_tests = total_tests - passed_tests
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        coverage_percent = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        test_details = []
        for result in self.test_results:
            test_details.append({
                "name": result.name,
                "success": result.success,
                "duration": result.duration,
                "error": result.error,
                "details": result.details
            })
        
        return {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_duration": total_duration,
            "coverage_percent": coverage_percent,
            "target_coverage": test_config.test_settings["coverage_target"],
            "coverage_achieved": coverage_percent >= test_config.test_settings["coverage_target"],
            "real_bindings_used": REAL_BINDINGS_AVAILABLE,
            "statistics": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests
            },
            "test_details": test_details
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ JXCT Real Integration Tests")
    print("=" * 80)
    
    tester = RealIntegrationTester()
    results = tester.run_all_tests()
    report = tester.generate_report()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {report['total_duration']:.2f} —Å–µ–∫")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {report['coverage_percent']:.1f}%")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {report['target_coverage']:.1f}%")
    print(f"üîß –†–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏: {'‚úÖ' if report['real_bindings_used'] else '‚ùå'}")
    
    if report["coverage_achieved"]:
        print(f"üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–∫—Ä—ã—Ç–∏–µ {report['target_coverage']:.1f}%+")
    else:
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ {report['target_coverage'] - report['coverage_percent']:.1f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    
    print(f"\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    stats = report["statistics"]
    print(f"   üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['passed_tests']}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {stats['failed_tests']}")
    
    print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –¢–ï–°–¢–ê–ú:")
    for detail in report["test_details"]:
        status = "‚úÖ" if detail["success"] else "‚ùå"
        print(f"   {status} {detail['name']}: {detail['duration']:.3f} —Å–µ–∫")
        if detail["error"]:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {detail['error']}")
    
    return report["coverage_achieved"]

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 