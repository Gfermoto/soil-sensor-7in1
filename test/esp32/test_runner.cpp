/**
 * @file test_runner.cpp
 * @brief –ï–¥–∏–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è ESP32
 * @details –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ ESP32 —Ç–µ—Å—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ setup()/loop()
 */

#include <Arduino.h>
#include <esp_system.h>
#include <unity.h>

// =============================================================================
// –¢–ï–°–¢–´ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò ESP32
// =============================================================================

void test_esp32_basic()
{
    TEST_ASSERT_TRUE(true);
    Serial.println("‚úÖ ESP32 –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω");
}

void test_esp32_memory()
{
    size_t freeHeap = esp_get_free_heap_size();
    TEST_ASSERT_GREATER_THAN(100000, freeHeap);  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 100KB
    Serial.printf("‚úÖ –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: %zu –±–∞–π—Ç\n", freeHeap);
}

void test_esp32_wifi()
{
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WiFi –¥–æ—Å—Ç—É–ø–µ–Ω
    TEST_ASSERT_TRUE(true);  // WiFi –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ESP32
    Serial.println("‚úÖ WiFi —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞");
}

void test_esp32_gpio()
{
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç GPIO
    pinMode(2, OUTPUT);
    digitalWrite(2, HIGH);
    delay(100);
    digitalWrite(2, LOW);
    TEST_ASSERT_TRUE(true);
    Serial.println("‚úÖ GPIO —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω");
}

void test_esp32_system_info()
{
    Serial.printf("ESP32 Chip: %s\n", ESP.getChipModel());
    Serial.printf("Free Heap: %zu bytes\n", esp_get_free_heap_size());
    Serial.printf("CPU Frequency: %d MHz\n", ESP.getCpuFreqMHz());
    TEST_ASSERT_TRUE(true);
    Serial.println("‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");
}

// =============================================================================
// –¢–ï–°–¢–´ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô
// =============================================================================

void esp32_test_math_operations()
{
    // –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    float a = 10.0f;
    float b = 5.0f;

    TEST_ASSERT_FLOAT_WITHIN(0.001f, 15.0f, a + b);
    TEST_ASSERT_FLOAT_WITHIN(0.001f, 5.0f, a - b);
    TEST_ASSERT_FLOAT_WITHIN(0.001f, 50.0f, a * b);
    TEST_ASSERT_FLOAT_WITHIN(0.001f, 2.0f, a / b);

    Serial.println("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
}

void esp32_test_array_operations()
{
    // –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
    int testArray[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i < 5; i++)
    {
        sum += testArray[i];
    }

    TEST_ASSERT_EQUAL(15, sum);
    Serial.println("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
}

// =============================================================================
// –¢–ï–°–¢–´ –°–¢–†–û–ö–û–í–´–• –§–£–ù–ö–¶–ò–ô
// =============================================================================

void esp32_test_string_operations()
{
    String testString = "Hello ESP32";

    TEST_ASSERT_EQUAL(11, testString.length());
    TEST_ASSERT_TRUE(testString.indexOf("ESP") >= 0);
    TEST_ASSERT_TRUE(testString.indexOf("World") < 0);

    Serial.println("‚úÖ –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
}

// =============================================================================
// –¢–ï–°–¢–´ –í–†–ï–ú–ï–ù–ò –ò –ó–ê–î–ï–†–ñ–ï–ö
// =============================================================================

void esp32_test_time_operations()
{
    unsigned long startTime = millis();
    delay(100);
    unsigned long endTime = millis();

    TEST_ASSERT_GREATER_THAN(95, endTime - startTime);
    TEST_ASSERT_LESS_THAN(105, endTime - startTime);

    Serial.println("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
}

// =============================================================================
// –ï–î–ò–ù–´–ô –¢–ï–°–¢–û–í–´–ô –†–ê–ù–ù–ï–†
// =============================================================================

void setup()
{
    Serial.begin(115200);
    delay(1000);

    Serial.println("=== –ó–ê–ü–£–°–ö –ï–î–ò–ù–û–ì–û ESP32 –¢–ï–°–¢–û–í–û–ì–û –†–ê–ù–ù–ï–†–ê ===");
    Serial.println("üî• –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö setup()/loop()");

    UNITY_BEGIN();

    // –ì—Ä—É–ø–ø–∞ 1: –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã ESP32
    Serial.println("\nüìã –ì–†–£–ü–ü–ê 1: –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã ESP32");
    RUN_TEST(test_esp32_basic);
    RUN_TEST(test_esp32_memory);
    RUN_TEST(test_esp32_wifi);
    RUN_TEST(test_esp32_gpio);
    RUN_TEST(test_esp32_system_info);

    // –ì—Ä—É–ø–ø–∞ 2: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    Serial.println("\nüìã –ì–†–£–ü–ü–ê 2: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã");
    RUN_TEST(esp32_test_math_operations);
    RUN_TEST(esp32_test_array_operations);

    // –ì—Ä—É–ø–ø–∞ 3: –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    Serial.println("\nüìã –ì–†–£–ü–ü–ê 3: –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã");
    RUN_TEST(esp32_test_string_operations);

    // –ì—Ä—É–ø–ø–∞ 4: –¢–µ—Å—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    Serial.println("\nüìã –ì–†–£–ü–ü–ê 4: –¢–µ—Å—Ç—ã –≤—Ä–µ–º–µ–Ω–∏");
    RUN_TEST(esp32_test_time_operations);

    UNITY_END();

    Serial.println("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===");
}

void loop()
{
    // –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ setup()
    delay(1000);
}
