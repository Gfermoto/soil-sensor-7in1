#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Python-–æ–±—ë—Ä—Ç–∫–∞–º–∏
"""

import sys
import time
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def test_calibration_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    print("üîß –¢–ï–°–¢ –°–ï–†–í–ò–°–ê –ö–ê–õ–ò–ë–†–û–í–ö–ò")
    print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏
        try:
            import jxct_core
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Python-–æ–±—ë—Ä—Ç–∫–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = jxct_core.SensorData()
            data.temperature = 25.0
            data.humidity = 60.0
            data.ph = 6.5
            data.ec = 1500.0
            data.nitrogen = 45.0
            data.phosphorus = 30.0
            data.potassium = 25.0
            data.valid = True
            data.timestamp = int(time.time())
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            calibrated_data = jxct_core.apply_calibration(data, 1)  # LOAM
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            calibration_applied = (
                abs(calibrated_data.ph - data.ph) > 0.001 or
                abs(calibrated_data.ec - data.ec) > 0.001
            )
            
            if calibration_applied:
                print("   ‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"      üìä pH: {data.ph:.2f} ‚Üí {calibrated_data.ph:.2f}")
                print(f"      üìä EC: {data.ec:.1f} ‚Üí {calibrated_data.ec:.1f}")
                return True
            else:
                print("   ‚ùå –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return False
                
        except ImportError:
            print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            class MockSensorData:
                def __init__(self):
                    self.temperature = 25.0
                    self.humidity = 60.0
                    self.ph = 6.5
                    self.ec = 1500.0
                    self.nitrogen = 45.0
                    self.phosphorus = 30.0
                    self.potassium = 25.0
                    self.valid = True
                    self.timestamp = int(time.time())
            
            def mock_apply_calibration(data, soil_profile):
                result = MockSensorData()
                result.temperature = data.temperature
                result.humidity = data.humidity
                result.ph = data.ph * 0.98  # –ü—Ä–æ—Å—Ç–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
                result.ec = data.ec * 1.05
                result.nitrogen = data.nitrogen * 1.03
                result.phosphorus = data.phosphorus * 1.03
                result.potassium = data.potassium * 1.03
                return result
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            data = MockSensorData()
            calibrated_data = mock_apply_calibration(data, 1)
            
            calibration_applied = (
                abs(calibrated_data.ph - data.ph) > 0.001 or
                abs(calibrated_data.ec - data.ec) > 0.001
            )
            
            if calibration_applied:
                print("   ‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞) –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"      üìä pH: {data.ph:.2f} ‚Üí {calibrated_data.ph:.2f}")
                print(f"      üìä EC: {data.ec:.1f} ‚Üí {calibrated_data.ec:.1f}")
                return True
            else:
                print("   ‚ùå –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞) –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return False
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        print(f"   üìã Traceback: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_calibration_service()
    
    if success:
        print("‚úÖ –¢–ï–°–¢ –ö–ê–õ–ò–ë–†–û–í–ö–ò –ü–†–û–ô–î–ï–ù")
        return 0
    else:
        print("‚ùå –¢–ï–°–¢ –ö–ê–õ–ò–ë–†–û–í–ö–ò –ü–†–û–í–ê–õ–ï–ù")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 