#!/usr/bin/env python3
"""
üß™ JXCT Business Logic Integration Tests v1.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
"""

import sys
import os
import json
import time
from pathlib import Path
from typing import Dict, List, Any
from dataclasses import dataclass
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
try:
    from validation_utils import (
        validateTemperature, validateHumidity, validatePH, 
        validateEC, validateNPK, validateSensorData
    )
    from sensor_compensation import (
        correctEC, correctPH, correctNPK
    )
    from calibration_manager import CalibrationManager
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def validateTemperature(temp): return {"isValid": True, "message": "OK"}
    def validateHumidity(hum): return {"isValid": True, "message": "OK"}
    def validatePH(ph): return {"isValid": True, "message": "OK"}
    def validateEC(ec): return {"isValid": True, "message": "OK"}
    def validateNPK(npk): return {"isValid": True, "message": "OK"}
    def validateSensorData(data): return {"isValid": True, "errors": []}
    def correctEC(ec, soil_type, temp, hum): return ec
    def correctPH(temp, ph): return ph
    def correctNPK(temp, hum, soil_type, npk): return npk

@dataclass
class SensorData:
    temperature: float
    humidity: float
    ph: float
    ec: float
    nitrogen: float
    phosphorus: float
    potassium: float
    valid: bool = True
    timestamp: int = 0

@dataclass
class TestScenario:
    name: str
    input_data: SensorData
    expected_output: Dict[str, Any]
    description: str

class BusinessLogicIntegrationTester:
    def __init__(self):
        self.test_scenarios = self._create_test_scenarios()
        self.results = []
    
    def _create_test_scenarios(self) -> List[TestScenario]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        scenarios = []
        
        # 1. –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        scenarios.append(TestScenario(
            name="normal_data_processing",
            input_data=SensorData(
                temperature=25.0,
                humidity=45.0,
                ph=6.5,
                ec=1200.0,
                nitrogen=150.0,
                phosphorus=80.0,
                potassium=200.0
            ),
            expected_output={
                "validation": True,
                "compensation_applied": True,
                "final_values_valid": True
            },
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"
        ))
        
        # 2. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        scenarios.append(TestScenario(
            name="boundary_values",
            input_data=SensorData(
                temperature=-10.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                humidity=100.0,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                ph=14.0,            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π pH
                ec=5000.0,          # –í—ã—Å–æ–∫–∏–π EC
                nitrogen=500.0,     # –í—ã—Å–æ–∫–∏–π –∞–∑–æ—Ç
                phosphorus=300.0,   # –í—ã—Å–æ–∫–∏–π —Ñ–æ—Å—Ñ–æ—Ä
                potassium=400.0     # –í—ã—Å–æ–∫–∏–π –∫–∞–ª–∏–π
            ),
            expected_output={
                "validation": True,
                "compensation_applied": True,
                "final_values_valid": True
            },
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
        ))
        
        # 3. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        scenarios.append(TestScenario(
            name="invalid_data_handling",
            input_data=SensorData(
                temperature=999.0,  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                humidity=-10.0,     # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                ph=-5.0,            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π pH
                ec=-100.0,          # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π EC
                nitrogen=-50.0,     # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–∑–æ—Ç
                phosphorus=-30.0,   # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Å—Ñ–æ—Ä
                potassium=-40.0     # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–ª–∏–π
            ),
            expected_output={
                "validation": False,
                "compensation_applied": False,
                "final_values_valid": False
            },
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        ))
        
        # 4. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        scenarios.append(TestScenario(
            name="extreme_conditions",
            input_data=SensorData(
                temperature=50.0,   # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                humidity=5.0,       # –ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                ph=3.0,             # –ö–∏—Å–ª–∞—è –ø–æ—á–≤–∞
                ec=50.0,            # –ù–∏–∑–∫–∏–π EC
                nitrogen=10.0,      # –ù–∏–∑–∫–∏–π –∞–∑–æ—Ç
                phosphorus=5.0,     # –ù–∏–∑–∫–∏–π —Ñ–æ—Å—Ñ–æ—Ä
                potassium=15.0      # –ù–∏–∑–∫–∏–π –∫–∞–ª–∏–π
            ),
            expected_output={
                "validation": True,
                "compensation_applied": True,
                "final_values_valid": True
            },
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
        ))
        
        return scenarios
    
    def test_validation_pipeline(self, data: SensorData) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        results = {}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        results["temperature"] = validateTemperature(data.temperature)
        results["humidity"] = validateHumidity(data.humidity)
        results["ph"] = validatePH(data.ph)
        results["ec"] = validateEC(data.ec)
        results["nitrogen"] = validateNPK(data.nitrogen)
        results["phosphorus"] = validateNPK(data.phosphorus)
        results["potassium"] = validateNPK(data.potassium)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        results["full_validation"] = validateSensorData(data)
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        all_valid = all(
            result.get("isValid", True) 
            for result in results.values() 
            if isinstance(result, dict)
        )
        
        results["overall_valid"] = all_valid
        return results
    
    def test_compensation_pipeline(self, data: SensorData) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"""
        results = {}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
        original_ec = data.ec
        original_ph = data.ph
        original_npk = (data.nitrogen, data.phosphorus, data.potassium)
        
        # EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        compensated_ec = correctEC(data.ec, "LOAM", data.temperature, data.humidity)
        results["ec_compensation"] = {
            "original": original_ec,
            "compensated": compensated_ec,
            "difference": compensated_ec - original_ec
        }
        
        # pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        compensated_ph = correctPH(data.temperature, data.ph)
        results["ph_compensation"] = {
            "original": original_ph,
            "compensated": compensated_ph,
            "difference": compensated_ph - original_ph
        }
        
        # NPK –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        npk_data = {"nitrogen": data.nitrogen, "phosphorus": data.phosphorus, "potassium": data.potassium}
        compensated_npk = correctNPK(data.temperature, data.humidity, "LOAM", npk_data)
        results["npk_compensation"] = {
            "original": original_npk,
            "compensated": (compensated_npk["nitrogen"], compensated_npk["phosphorus"], compensated_npk["potassium"])
        }
        
        return results
    
    def test_full_pipeline(self, scenario: TestScenario) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {scenario.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {scenario.description}")
        
        start_time = time.time()
        
        # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation_results = self.test_validation_pipeline(scenario.input_data)
        
        # –®–∞–≥ 2: –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞)
        compensation_results = {}
        if validation_results.get("overall_valid", False):
            compensation_results = self.test_compensation_pipeline(scenario.input_data)
        
        # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        processing_time = time.time() - start_time
        
        results = {
            "scenario": scenario.name,
            "description": scenario.description,
            "validation": validation_results,
            "compensation": compensation_results,
            "processing_time": processing_time,
            "success": validation_results.get("overall_valid", False)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
        expected = scenario.expected_output
        results["expectations_met"] = (
            results["success"] == expected.get("validation", True) and
            (not expected.get("compensation_applied", True) or bool(compensation_results))
        )
        
        return results
    
    def run_all_tests(self) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...")
        print("=" * 60)
        
        results = []
        
        for scenario in self.test_scenarios:
            try:
                result = self.test_full_pipeline(scenario)
                results.append(result)
                
                status = "‚úÖ" if result["success"] else "‚ùå"
                print(f"{status} {scenario.name}: {result['success']}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {scenario.name}: {e}")
                results.append({
                    "scenario": scenario.name,
                    "error": str(e),
                    "success": False
                })
        
        return results
    
    def generate_report(self, results: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r.get("success", False))
        failed_tests = total_tests - passed_tests
        
        report = f"""
üß™ –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò
========================================================
–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}
–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}
–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests/total_tests*100:.1f}%

–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
"""
        
        for result in results:
            status = "‚úÖ" if result.get("success", False) else "‚ùå"
            report += f"\n{status} {result.get('scenario', 'unknown')}"
            
            if "error" in result:
                report += f" - –û–®–ò–ë–ö–ê: {result['error']}"
            elif "processing_time" in result:
                report += f" - {result['processing_time']:.3f} —Å–µ–∫"
        
        return report

def main():
    tester = BusinessLogicIntegrationTester()
    results = tester.run_all_tests()
    
    report = tester.generate_report(results)
    print("\n" + report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = "test_reports/business_logic_integration_report.txt"
    os.makedirs(os.path.dirname(report_file), exist_ok=True)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    failed_tests = sum(1 for r in results if not r.get("success", False))
    return 1 if failed_tests > 0 else 0

if __name__ == "__main__":
    exit(main()) 