#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è JXCT
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: EYERA Development Team
–î–∞—Ç–∞: 2025-07-04
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_validation_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation_files = [
        "src/validation_utils.cpp",
        "include/validation_utils.h"
    ]
    
    for file_path in validation_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"  ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_format_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    format_files = [
        "src/jxct_format_utils.cpp",
        "include/jxct_format_utils.h"
    ]
    
    for file_path in format_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"  ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_csrf_protection():
    """–¢–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞—â–∏—Ç—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ CSRF
    csrf_files = [
        "src/web/csrf_protection.cpp",
        "include/web/csrf_protection.h"
    ]
    
    for file_path in csrf_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"  ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã CSRF –∑–∞—â–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_config_files():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    config_files = [
        "platformio.ini",
        "CMakeLists.txt",
        "VERSION"
    ]
    
    for file_path in config_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"  ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_documentation():
    """–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    doc_files = [
        "README.md",
        "CONTRIBUTING.md",
        "docs/README.md",
        "docs/manuals/USER_GUIDE.md"
    ]
    
    for file_path in doc_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"  ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –í—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JXCT")
    print("=" * 50)
    
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç", test_validation_utils),
        ("–£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", test_format_utils),
        ("CSRF –∑–∞—â–∏—Ç–∞", test_csrf_protection),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", test_config_files),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_documentation)
    ]
    
    total_tests = len(tests)
    passed_tests = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed_tests += 1
                print(f"  ‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"  ‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"  ‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests * 100):.1f}%")
    
    if passed_tests == total_tests:
        print("  üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("  ‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 