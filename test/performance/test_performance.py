#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ JXCT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import time
import sys
import random
import math

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –≤ utf-8 –¥–ª—è Windows
if hasattr(sys.stdout, 'encoding') and sys.stdout.encoding and sys.stdout.encoding.lower() not in ['utf-8', 'utf8']:
    try:
        sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)
    except Exception:
        pass

def test_validation_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_values = [
        (25.0, 50.0, 7.0, 1500.0),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (-10.0, 30.0, 6.5, 1200.0), # –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (40.0, 80.0, 8.5, 3000.0),  # –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    ] * 1000  # 3000 —Ç–µ—Å—Ç–æ–≤
    
    start_time = time.time()
    
    valid_count = 0
    for temp, hum, ph, ec in test_values:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if -50 <= temp <= 80 and 0 <= hum <= 100 and 0 <= ph <= 14 and 0 <= ec <= 10000:
            valid_count += 1
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(test_values)}")
    print(f"  –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}")
    print(f"  –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_values)/duration:.0f} —Ç–µ—Å—Ç–æ–≤/—Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert duration < 1.0, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {duration:.3f}s"
    print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–ª–∏—á–Ω–∞—è")

def test_calculation_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    print("\nüßÆ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ê–°–ß–ï–¢–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    test_data = [(random.uniform(0, 50), random.uniform(0, 100), random.uniform(0, 14), random.uniform(0, 5000)) for _ in range(1000)]
    
    start_time = time.time()
    
    results = []
    for temp, hum, ph, ec in test_data:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        temp_factor = 1.0 / (1.0 + 0.02 * (temp - 25.0))
        hum_factor = 1.0 + 0.01 * (hum - 50.0)
        ph_factor = 1.0 + 0.05 * (ph - 7.0)
        
        ec_corrected = ec * temp_factor * hum_factor * ph_factor
        results.append(ec_corrected)
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {len(test_data)}")
    print(f"  –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_data)/duration:.0f} —Ä–∞—Å—á–µ—Ç–æ–≤/—Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert duration < 0.5, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {duration:.3f}s"
    print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Ç–ª–∏—á–Ω–∞—è")

def test_memory_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
    print("\nüíæ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–∞–º—è—Ç—å—é
    data_blocks = []
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    for i in range(100):
        block = {
            'id': i,
            'data': [random.random() for _ in range(100)],
            'timestamp': time.time()
        }
        data_blocks.append(block)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    processed = 0
    for block in data_blocks:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        result = sum(block['data']) / len(block['data'])
        processed += 1
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –ë–ª–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(data_blocks)}")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    print(f"  –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {len(data_blocks)/duration:.0f} –±–ª–æ–∫–æ–≤/—Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert duration < 0.1, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {duration:.3f}s"
    print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ –æ—Ç–ª–∏—á–Ω–∞—è")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò JXCT")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    validation_ok = test_validation_performance()
    calculation_ok = test_calculation_performance()
    memory_ok = test_memory_performance()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_ok = validation_ok and calculation_ok and memory_ok
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ' if validation_ok else '‚ùå'}")
    print(f"  –†–∞—Å—á–µ—Ç—ã: {'‚úÖ' if calculation_ok else '‚ùå'}")
    print(f"  –ü–∞–º—è—Ç—å: {'‚úÖ' if memory_ok else '‚ùå'}")
    print(f"  –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if total_ok else '‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù'}")
    
    return 0 if total_ok else 1

if __name__ == "__main__":
    sys.exit(main()) 