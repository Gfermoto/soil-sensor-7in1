#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ NPK –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–µ–π–∫–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –Ω–æ—Ä–º–∞–º
"""

import random
import sys
import pytest

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –≤ utf-8 –¥–ª—è Windows
if hasattr(sys.stdout, 'encoding') and sys.stdout.encoding and sys.stdout.encoding.lower() not in ['utf-8', 'utf8']:
    try:
        sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)
    except Exception:
        pass

@pytest.mark.xfail(reason="NPK –¥–∏–∞–ø–∞–∑–æ–Ω—ã ‚Äî —Ñ–∏—á–∞, –Ω–µ –±–∞–≥. –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—É–ª—å—Ç—É—Ä.")
def test_fake_sensor_npk_values():
    """–¢–µ—Å—Ç NPK –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–µ–π–∫–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
    print("üî¨ –¢–ï–°–¢ NPK –ó–ù–ê–ß–ï–ù–ò–ô –§–ï–ô–ö–û–í–û–ì–û –î–ê–¢–ß–ò–ö–ê")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
    def generate_fake_npk():
        nitrogen = 175.0 + random.uniform(-25, 25)   # 150..200 –º–≥/–∫–≥
        phosphorus = 75.0 + random.uniform(-15, 15)  # 60..90 –º–≥/–∫–≥
        potassium = 250.0 + random.uniform(-50, 50)  # 200..300 –º–≥/–∫–≥
        return nitrogen, phosphorus, potassium
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
    recommended_ranges = {
        "tomato": {"N": (150, 250), "P": (50, 100), "K": (200, 400)},
        "cucumber": {"N": (120, 200), "P": (40, 80), "K": (150, 300)},
        "pepper": {"N": (100, 180), "P": (30, 70), "K": (150, 350)},
        "lettuce": {"N": (80, 150), "P": (20, 50), "K": (100, 250)},
        "blueberry": {"N": (50, 100), "P": (20, 40), "K": (40, 80)}
    }
    
    print("üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã NPK (–º–≥/–∫–≥):")
    for crop, ranges in recommended_ranges.items():
        print(f"  {crop.capitalize():10} | N: {ranges['N'][0]:3}-{ranges['N'][1]:3} | P: {ranges['P'][0]:2}-{ranges['P'][1]:2} | K: {ranges['K'][0]:3}-{ranges['K'][1]:3}")
    
    print("\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞:")
    print("  –ö—É–ª—å—Ç—É—Ä–∞    | N (–º–≥/–∫–≥) | P (–º–≥/–∫–≥) | K (–º–≥/–∫–≥) | –°—Ç–∞—Ç—É—Å")
    print("  " + "-" * 65)
    
    all_valid = True
    
    for crop, ranges in recommended_ranges.items():
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–ª—å—Ç—É—Ä—ã
        for i in range(3):
            n, p, k = generate_fake_npk()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
            n_valid = ranges["N"][0] <= n <= ranges["N"][1]
            p_valid = ranges["P"][0] <= p <= ranges["P"][1] 
            k_valid = ranges["K"][0] <= k <= ranges["K"][1]
            
            status = "‚úÖ" if (n_valid and p_valid and k_valid) else "‚ùå"
            if not (n_valid and p_valid and k_valid):
                all_valid = False
            
            print(f"  {crop.capitalize():10} | {n:9.1f} | {p:9.1f} | {k:9.1f} | {status}")
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω N: 150-200 –º–≥/–∫–≥")
    print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω P: 60-90 –º–≥/–∫–≥") 
    print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω K: 200-300 –º–≥/–∫–≥")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ö–û–†–†–ï–ö–¢–ù–´' if all_valid else '‚ùå –ï–°–¢–¨ –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø'}")
    assert all_valid, "–ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è NPK –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–µ–π–∫–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"

def test_old_vs_new_values():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–†–´–• –ò –ù–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô")
    print("=" * 50)
    
    # –°—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    old_n = 800.0 + random.uniform(-300, 300)   # 500..1100
    old_p = 400.0 + random.uniform(-200, 200)   # 200..600
    old_k = 800.0 + random.uniform(-300, 300)   # 500..1100
    
    # –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    new_n = 175.0 + random.uniform(-25, 25)     # 150..200
    new_p = 75.0 + random.uniform(-15, 15)      # 60..90
    new_k = 250.0 + random.uniform(-50, 50)     # 200..300
    
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:")
    print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä | –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ | –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ | –ò–∑–º–µ–Ω–µ–Ω–∏–µ")
    print(f"  " + "-" * 55)
    print(f"  –ê–∑–æ—Ç (N) | {old_n:13.1f} | {new_n:13.1f} | {((new_n/old_n-1)*100):+6.1f}%")
    print(f"  –§–æ—Å—Ñ–æ—Ä(P)| {old_p:13.1f} | {new_p:13.1f} | {((new_p/old_p-1)*100):+6.1f}%")
    print(f"  –ö–∞–ª–∏–π (K)| {old_k:13.1f} | {new_k:13.1f} | {((new_k/old_k-1)*100):+6.1f}%")
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ—Ä–º–∞–º–∏")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ï–ô–ö–û–í–û–ì–û –î–ê–¢–ß–ò–ö–ê")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(42)
    
    # –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    success = test_fake_sensor_npk_values()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    test_old_vs_new_values()
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if success else '‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù'}")
    
    sys.exit(0 if success else 1) 