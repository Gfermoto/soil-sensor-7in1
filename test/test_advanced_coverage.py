#!/usr/bin/env python3
"""
üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è JXCT
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –±–µ–∑ Python-–æ–±—ë—Ä—Ç–æ–∫
"""

import sys
import json
import time
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "scripts"))

try:
    from test_config import test_config
except ImportError:
    class TestConfig:
        def __init__(self):
            self.hardware_available = False
            self.test_settings = {"coverage_target": 85.0}
    test_config = TestConfig()

class AdvancedCoverageTester:
    """–¢–µ—Å—Ç–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"""
    
    def __init__(self):
        self.test_results = []
        self.coverage_data = {}
        
    def test_validation_utils_coverage(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ validation_utils"""
        print("üîç –¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è validation_utils")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        try:
            from validation_utils import (
                validateTemperature, validateHumidity, validatePH, validateEC,
                validateNitrogen, validatePhosphorus, validatePotassium,
                validateFullSensorData, ValidationResult
            )
            
            test_cases = [
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                {"func": validateTemperature, "valid": [20.0, 25.0, 30.0], "invalid": [-5.0, 50.0, 100.0]},
                # –í–ª–∞–∂–Ω–æ—Å—Ç—å
                {"func": validateHumidity, "valid": [30.0, 50.0, 80.0], "invalid": [-10.0, 110.0, 150.0]},
                # pH
                {"func": validatePH, "valid": [5.5, 6.5, 7.5], "invalid": [0.0, 15.0, -5.0]},
                # EC
                {"func": validateEC, "valid": [500.0, 1500.0, 3000.0], "invalid": [-100.0, 10000.0, 0.0]},
                # NPK
                {"func": validateNitrogen, "valid": [20.0, 50.0, 100.0], "invalid": [-10.0, 200.0, 0.0]},
                {"func": validatePhosphorus, "valid": [10.0, 30.0, 80.0], "invalid": [-5.0, 150.0, 0.0]},
                {"func": validatePotassium, "valid": [15.0, 40.0, 120.0], "invalid": [-8.0, 250.0, 0.0]}
            ]
            
            total_tests = 0
            passed_tests = 0
            
            for case in test_cases:
                func = case["func"]
                func_name = func.__name__
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                for value in case["valid"]:
                    total_tests += 1
                    try:
                        result = func(value)
                        if result.isValid:
                            passed_tests += 1
                            print(f"   ‚úÖ {func_name}({value}): –í–∞–ª–∏–¥–Ω–æ")
                        else:
                            print(f"   ‚ùå {func_name}({value}): –ù–µ–≤–∞–ª–∏–¥–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω–æ)")
                    except Exception as e:
                        print(f"   ‚ùå {func_name}({value}): –û—à–∏–±–∫–∞ - {e}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                for value in case["invalid"]:
                    total_tests += 1
                    try:
                        result = func(value)
                        if not result.isValid:
                            passed_tests += 1
                            print(f"   ‚úÖ {func_name}({value}): –ù–µ–≤–∞–ª–∏–¥–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å)")
                        else:
                            print(f"   ‚ùå {func_name}({value}): –í–∞–ª–∏–¥–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ)")
                    except Exception as e:
                        print(f"   ‚ùå {func_name}({value}): –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            test_data = {
                "temperature": 25.0,
                "humidity": 60.0,
                "ph": 6.5,
                "ec": 1500.0,
                "nitrogen": 45.0,
                "phosphorus": 30.0,
                "potassium": 25.0,
                "valid": True,
                "timestamp": int(time.time())
            }
            
            total_tests += 1
            try:
                result = validateFullSensorData(test_data)
                if result.isValid:
                    passed_tests += 1
                    print(f"   ‚úÖ validateFullSensorData: –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã")
                else:
                    print(f"   ‚ùå validateFullSensorData: –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            except Exception as e:
                print(f"   ‚ùå validateFullSensorData: –û—à–∏–±–∫–∞ - {e}")
            
            coverage = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            return {
                "module": "validation_utils",
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "coverage": coverage,
                "success": coverage >= 90.0
            }
            
        except ImportError:
            print("   ‚è≠Ô∏è –ú–æ–¥—É–ª—å validation_utils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "module": "validation_utils",
                "total_tests": 0,
                "passed_tests": 0,
                "coverage": 0.0,
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Module not available"
            }
    
    def test_compensation_formulas_coverage(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—É–ª –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"""
        print("üîß –¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—É–ª –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏")
        
        try:
            from sensor_compensation import correctEC, correctPH
            from business.sensor_compensation_service import SensorCompensationService
            
            test_cases = [
                # EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
                {"ec": 1500.0, "soil_type": 1, "temp": 25.0, "humidity": 60.0},
                {"ec": 2000.0, "soil_type": 2, "temp": 30.0, "humidity": 70.0},
                {"ec": 1000.0, "soil_type": 0, "temp": 20.0, "humidity": 50.0},
                
                # pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
                {"ph": 6.5, "temp": 25.0},
                {"ph": 7.0, "temp": 30.0},
                {"ph": 6.0, "temp": 20.0}
            ]
            
            total_tests = 0
            passed_tests = 0
            
            # –¢–µ—Å—Ç EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
            for case in test_cases[:3]:
                total_tests += 1
                try:
                    original_ec = case["ec"]
                    compensated_ec = correctEC(case["ec"], case["soil_type"], case["temp"], case["humidity"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
                    if abs(compensated_ec - original_ec) > 0.001:
                        passed_tests += 1
                        print(f"   ‚úÖ EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {original_ec:.1f} ‚Üí {compensated_ec:.1f}")
                    else:
                        print(f"   ‚ö†Ô∏è EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {original_ec:.1f} ‚Üí {compensated_ec:.1f} (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)")
                except Exception as e:
                    print(f"   ‚ùå EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
            for case in test_cases[3:]:
                total_tests += 1
                try:
                    original_ph = case["ph"]
                    compensated_ph = correctPH(case["temp"], case["ph"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                    if abs(compensated_ph - original_ph) > 0.001:
                        passed_tests += 1
                        print(f"   ‚úÖ pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {original_ph:.2f} ‚Üí {compensated_ph:.2f}")
                    else:
                        print(f"   ‚ö†Ô∏è pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {original_ph:.2f} ‚Üí {compensated_ph:.2f} (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)")
                except Exception as e:
                    print(f"   ‚ùå pH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
            total_tests += 1
            try:
                service = SensorCompensationService()
                test_data = {
                    "temperature": 25.0,
                    "humidity": 60.0,
                    "ph": 6.5,
                    "ec": 1500.0
                }
                
                compensated = service.applyCompensation(test_data, 1)
                if compensated:
                    passed_tests += 1
                    print(f"   ‚úÖ SensorCompensationService: –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                else:
                    print(f"   ‚ùå SensorCompensationService: –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            except Exception as e:
                print(f"   ‚ùå SensorCompensationService: –û—à–∏–±–∫–∞ - {e}")
            
            coverage = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            return {
                "module": "compensation_formulas",
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "coverage": coverage,
                "success": coverage >= 80.0
            }
            
        except ImportError:
            print("   ‚è≠Ô∏è –ú–æ–¥—É–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "module": "compensation_formulas",
                "total_tests": 0,
                "passed_tests": 0,
                "coverage": 0.0,
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Modules not available"
            }
    
    def test_business_logic_coverage(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        print("üíº –¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏")
        
        try:
            from business.crop_recommendation_engine import CropRecommendationEngine
            from business.sensor_calibration_service import SensorCalibrationService
            
            total_tests = 0
            passed_tests = 0
            
            # –¢–µ—Å—Ç –¥–≤–∏–∂–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            total_tests += 1
            try:
                engine = CropRecommendationEngine()
                test_data = {
                    "temperature": 25.0,
                    "humidity": 60.0,
                    "ph": 6.5,
                    "ec": 1500.0,
                    "nitrogen": 45.0,
                    "phosphorus": 30.0,
                    "potassium": 25.0
                }
                
                recommendations = engine.generateRecommendations(test_data, "tomato", 1, 0)
                if recommendations:
                    passed_tests += 1
                    print(f"   ‚úÖ CropRecommendationEngine: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    print(f"   ‚ùå CropRecommendationEngine: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"   ‚ùå CropRecommendationEngine: –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            total_tests += 1
            try:
                service = SensorCalibrationService()
                test_data = {
                    "temperature": 25.0,
                    "humidity": 60.0,
                    "ph": 6.5,
                    "ec": 1500.0
                }
                
                calibrated = service.applyCalibration(test_data, 1)
                if calibrated:
                    passed_tests += 1
                    print(f"   ‚úÖ SensorCalibrationService: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                else:
                    print(f"   ‚ùå SensorCalibrationService: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            except Exception as e:
                print(f"   ‚ùå SensorCalibrationService: –û—à–∏–±–∫–∞ - {e}")
            
            coverage = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            return {
                "module": "business_logic",
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "coverage": coverage,
                "success": coverage >= 70.0
            }
            
        except ImportError:
            print("   ‚è≠Ô∏è –ú–æ–¥—É–ª–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "module": "business_logic",
                "total_tests": 0,
                "passed_tests": 0,
                "coverage": 0.0,
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Modules not available"
            }
    
    def test_advanced_filters_coverage(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        print("üîç –¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
        try:
            from advanced_filters import (
                applyMovingAverage, applyKalmanFilter, applyMedianFilter,
                applyLowPassFilter, applyHighPassFilter
            )
            
            test_data = [25.0, 26.0, 24.5, 25.5, 25.8, 24.2, 26.2, 25.0, 25.3, 24.8]
            
            total_tests = 0
            passed_tests = 0
            
            # –¢–µ—Å—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            total_tests += 1
            try:
                filtered = applyMovingAverage(test_data, 3)
                if len(filtered) > 0 and len(filtered) < len(test_data):
                    passed_tests += 1
                    print(f"   ‚úÖ Moving Average: –ü—Ä–∏–º–µ–Ω—ë–Ω (–¥–ª–∏–Ω–∞: {len(filtered)})")
                else:
                    print(f"   ‚ùå Moving Average: –ù–µ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            except Exception as e:
                print(f"   ‚ùå Moving Average: –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞
            total_tests += 1
            try:
                filtered = applyKalmanFilter(test_data)
                if len(filtered) == len(test_data):
                    passed_tests += 1
                    print(f"   ‚úÖ Kalman Filter: –ü—Ä–∏–º–µ–Ω—ë–Ω")
                else:
                    print(f"   ‚ùå Kalman Filter: –ù–µ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            except Exception as e:
                print(f"   ‚ùå Kalman Filter: –û—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            total_tests += 1
            try:
                filtered = applyMedianFilter(test_data, 3)
                if len(filtered) > 0:
                    passed_tests += 1
                    print(f"   ‚úÖ Median Filter: –ü—Ä–∏–º–µ–Ω—ë–Ω")
                else:
                    print(f"   ‚ùå Median Filter: –ù–µ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            except Exception as e:
                print(f"   ‚ùå Median Filter: –û—à–∏–±–∫–∞ - {e}")
            
            coverage = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            return {
                "module": "advanced_filters",
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "coverage": coverage,
                "success": coverage >= 80.0
            }
            
        except ImportError:
            print("   ‚è≠Ô∏è –ú–æ–¥—É–ª—å advanced_filters –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "module": "advanced_filters",
                "total_tests": 0,
                "passed_tests": 0,
                "coverage": 0.0,
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Module not available"
            }
    
    def run_all_tests(self) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–´–• –¢–ï–°–¢–û–í –ü–û–ö–†–´–¢–ò–Ø")
        print("=" * 60)
        
        results = []
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        result = self.test_validation_utils_coverage()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['module']}: {result['coverage']:.1f}% ({result['passed_tests']}/{result['total_tests']})")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        result = self.test_compensation_formulas_coverage()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['module']}: {result['coverage']:.1f}% ({result['passed_tests']}/{result['total_tests']})")
        
        # –¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        result = self.test_business_logic_coverage()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['module']}: {result['coverage']:.1f}% ({result['passed_tests']}/{result['total_tests']})")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
        result = self.test_advanced_filters_coverage()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['module']}: {result['coverage']:.1f}% ({result['passed_tests']}/{result['total_tests']})")
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ JXCT Advanced Coverage Tests")
    print("=" * 60)
    
    tester = AdvancedCoverageTester()
    results = tester.run_all_tests()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_modules = len(results)
    successful_modules = sum(1 for r in results if r.get("success", False))
    failed_modules = total_modules - successful_modules
    
    # –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    total_tests = sum(r.get("total_tests", 0) for r in results)
    passed_tests = sum(r.get("passed_tests", 0) for r in results)
    overall_coverage = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–û–ö–†–´–¢–ò–Ø:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {successful_modules}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {failed_modules}")
    print(f"   üìà –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_modules}")
    print(f"   üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"   üìä –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {overall_coverage:.1f}%")
    
    if overall_coverage >= test_config.test_settings["coverage_target"]:
        print(f"   üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–∫—Ä—ã—Ç–∏–µ {test_config.test_settings['coverage_target']}%+")
    else:
        print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ {test_config.test_settings['coverage_target'] - overall_coverage:.1f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    
    return successful_modules == total_modules

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 