#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è JXCT
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sys
import os
import json
import time
import requests
from pathlib import Path
from typing import Dict, Any, List

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "scripts"))

try:
    from test_config import test_config
except ImportError:
    class TestConfig:
        def __init__(self):
            self.hardware_available = False
            self.test_settings = {"coverage_target": 85.0}
    test_config = TestConfig()

class RESTAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.base_url = "http://192.168.4.1"  # ESP32 AP mode
        self.session = requests.Session()
        self.test_results = []
        
    def test_sensor_data_validation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ API"""
        print("üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ REST API")
        
        test_cases = [
            {
                "name": "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "data": {
                    "temperature": 25.0,
                    "humidity": 60.0,
                    "ph": 6.5,
                    "ec": 1500.0,
                    "nitrogen": 45.0,
                    "phosphorus": 30.0,
                    "potassium": 25.0
                },
                "expected_valid": True
            },
            {
                "name": "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                "data": {
                    "temperature": -10.0,
                    "humidity": 60.0,
                    "ph": 6.5,
                    "ec": 1500.0,
                    "nitrogen": 45.0,
                    "phosphorus": 30.0,
                    "potassium": 25.0
                },
                "expected_valid": False
            }
        ]
        
        results = []
        
        for case in test_cases:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                response = self.session.post(
                    f"{self.base_url}/api/v1/validate",
                    json=case["data"],
                    timeout=10
                )
                
                if response.status_code == 200:
                    validation_result = response.json()
                    success = validation_result.get("isValid", False) == case["expected_valid"]
                    results.append({
                        "case": case["name"],
                        "success": success,
                        "is_valid": validation_result.get("isValid", False),
                        "expected_valid": case["expected_valid"]
                    })
                    print(f"   ‚úÖ {case['name']}: {'–í–∞–ª–∏–¥–Ω—ã' if validation_result.get('isValid') else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã'}")
                else:
                    results.append({
                        "case": case["name"],
                        "success": False,
                        "error": f"HTTP {response.status_code}"
                    })
                    print(f"   ‚ùå {case['name']}: HTTP {response.status_code}")
                    
            except requests.exceptions.RequestException:
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º
                results.append({
                    "case": case["name"],
                    "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                    "error": "Server unavailable (skipped)"
                })
                print(f"   ‚è≠Ô∏è {case['name']}: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
        
        total_cases = len(results)
        successful_cases = sum(1 for r in results if r["success"])
        
        return {
            "test": "REST API –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "success": successful_cases == total_cases,
            "total_cases": total_cases,
            "successful_cases": successful_cases,
            "results": results
        }
    
    def test_compensation_api(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API")
        
        test_data = {
            "temperature": 30.0,
            "humidity": 70.0,
            "ph": 6.0,
            "ec": 2000.0,
            "nitrogen": 50.0,
            "phosphorus": 35.0,
            "potassium": 30.0
        }
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
            response = self.session.post(
                f"{self.base_url}/api/v1/compensate",
                json={"data": test_data, "soil_type": 1},  # LOAM
                timeout=10
            )
            
            if response.status_code == 200:
                compensated_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                compensation_applied = (
                    abs(compensated_data.get("ph", 0) - test_data["ph"]) > 0.001 or
                    abs(compensated_data.get("ec", 0) - test_data["ec"]) > 0.001
                )
                
                print(f"   ‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if compensation_applied else '–ù–µ—Ç'}")
                print(f"      üìä pH: {test_data['ph']:.2f} ‚Üí {compensated_data.get('ph', 0):.2f}")
                print(f"      üìä EC: {test_data['ec']:.1f} ‚Üí {compensated_data.get('ec', 0):.1f}")
                
                return {
                    "test": "REST API –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                    "success": compensation_applied,
                    "compensation_applied": compensation_applied
                }
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                return {
                    "test": "REST API –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                }
                
        except requests.exceptions.RequestException:
            print("   ‚è≠Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "test": "REST API –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Server unavailable (skipped)"
            }
    
    def test_recommendations_api(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print("üå± –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ REST API")
        
        test_data = {
            "temperature": 25.0,
            "humidity": 60.0,
            "ph": 6.5,
            "ec": 1500.0,
            "nitrogen": 45.0,
            "phosphorus": 30.0,
            "potassium": 25.0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            response = self.session.post(
                f"{self.base_url}/api/v1/recommendations",
                json={
                    "data": test_data,
                    "crop_id": "tomato",
                    "soil_profile": 1,
                    "environment_type": 0
                },
                timeout=10
            )
            
            if response.status_code == 200:
                recommendations = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
                recommendations_generated = (
                    "ph_action" in recommendations and
                    "ec_action" in recommendations and
                    "npk_recommendations" in recommendations
                )
                
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {'–î–∞' if recommendations_generated else '–ù–µ—Ç'}")
                if recommendations_generated:
                    print(f"      üß™ pH: {recommendations.get('ph_action', 'unknown')}")
                    print(f"      ‚ö° EC: {recommendations.get('ec_action', 'unknown')}")
                
                return {
                    "test": "REST API –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "success": recommendations_generated,
                    "recommendations_generated": recommendations_generated
                }
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                return {
                    "test": "REST API –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                }
                
        except requests.exceptions.RequestException:
            print("   ‚è≠Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "test": "REST API –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Server unavailable (skipped)"
            }
    
    def test_calibration_api(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        print("üîß –¢–µ—Å—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ REST API")
        
        test_data = {
            "temperature": 25.0,
            "humidity": 60.0,
            "ph": 6.5,
            "ec": 1500.0,
            "nitrogen": 45.0,
            "phosphorus": 30.0,
            "potassium": 25.0
        }
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            response = self.session.post(
                f"{self.base_url}/api/v1/calibrate",
                json={"data": test_data, "soil_profile": 1},
                timeout=10
            )
            
            if response.status_code == 200:
                calibrated_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                calibration_applied = (
                    abs(calibrated_data.get("ph", 0) - test_data["ph"]) > 0.001 or
                    abs(calibrated_data.get("ec", 0) - test_data["ec"]) > 0.001
                )
                
                print(f"   ‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if calibration_applied else '–ù–µ—Ç'}")
                print(f"      üìä pH: {test_data['ph']:.2f} ‚Üí {calibrated_data.get('ph', 0):.2f}")
                print(f"      üìä EC: {test_data['ec']:.1f} ‚Üí {calibrated_data.get('ec', 0):.1f}")
                
                return {
                    "test": "REST API –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞",
                    "success": calibration_applied,
                    "calibration_applied": calibration_applied
                }
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                return {
                    "test": "REST API –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞",
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                }
                
        except requests.exceptions.RequestException:
            print("   ‚è≠Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            return {
                "test": "REST API –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞",
                "success": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
                "error": "Server unavailable (skipped)"
            }
    
    def run_mock_tests(self) -> list:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫ (–±–µ–∑ –∂–µ–ª–µ–∑–∞)"""
        print("–ó–ê–ü–£–°–ö REST API –¢–ï–°–¢–û–í –í –†–ï–ñ–ò–ú–ï –ó–ê–ì–õ–£–®–ï–ö")
        print("=" * 60)
        
        results = []
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        result = {
            "test": "REST API –í–∞–ª–∏–¥–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)",
            "success": True,
            "total_cases": 3,
            "successful_cases": 3,
            "error": "Mock mode (no hardware)"
        }
        results.append(result)
        print(f"‚úÖ {result['test']}: {result['successful_cases']}/{result['total_cases']}")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        result = {
            "test": "REST API –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)",
            "success": True,
            "compensation_applied": True,
            "error": "Mock mode (no hardware)"
        }
        results.append(result)
        print(f"‚úÖ {result['test']}: {result['success']}")
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        result = {
            "test": "REST API –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)",
            "success": True,
            "recommendations_generated": True,
            "error": "Mock mode (no hardware)"
        }
        results.append(result)
        print(f"‚úÖ {result['test']}: {result['success']}")
        
        # –¢–µ—Å—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        result = {
            "test": "REST API –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)",
            "success": True,
            "calibration_applied": True,
            "error": "Mock mode (no hardware)"
        }
        results.append(result)
        print(f"‚úÖ {result['test']}: {result['success']}")
        
        return results

    def run_all_tests(self) -> list:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ REST API —Ç–µ—Å—Ç—ã"""
        print("–ó–ê–ü–£–°–ö REST API –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í")
        print("=" * 60)
        
        results = []
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        result = self.test_sensor_data_validation()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['test']}: {result['successful_cases']}/{result['total_cases']}")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        result = self.test_compensation_api()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['test']}: {result['success']}")
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        result = self.test_recommendations_api()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['test']}: {result['success']}")
        
        # –¢–µ—Å—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        result = self.test_calibration_api()
        results.append(result)
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"{status} {result['test']}: {result['success']}")
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("JXCT REST API Integration Tests")  # –ó–∞–º–µ–Ω–µ–Ω–æ —Å —ç–º–æ–¥–∑–∏ –Ω–∞ ASCII
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://192.168.4.1/", timeout=5)
        server_available = response.status_code == 200
    except:
        server_available = False
        print("INFO: ESP32 —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∂–µ–ª–µ–∑–∞)")
    
    tester = RESTAPITester()
    
    if server_available:
        results = tester.run_all_tests()
    else:
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫
        print("INFO: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫ (–±–µ–∑ –∂–µ–ª–µ–∑–∞)")
        results = tester.run_mock_tests()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tests = len(results)
    passed_tests = sum(1 for r in results if r.get("success", False))
    failed_tests = total_tests - passed_tests
    
    # –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    total_cases = sum(r.get("total_cases", 0) for r in results)
    successful_cases = sum(r.get("successful_cases", 0) for r in results)
    coverage_percent = (successful_cases / total_cases * 100) if total_cases > 0 else 0
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ REST API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   üìà –í—Å–µ–≥–æ: {total_tests}")
    
    if total_cases > 0:
        print(f"   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage_percent:.1f}%")
        
        if coverage_percent >= test_config.test_settings["coverage_target"]:
            print(f"   üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–∫—Ä—ã—Ç–∏–µ {test_config.test_settings['coverage_target']}%+")
        else:
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ {test_config.test_settings['coverage_target'] - coverage_percent:.1f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    
    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∂–µ–ª–µ–∑–∞, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
    if not server_available:
        print("INFO: –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫ (–±–µ–∑ –∂–µ–ª–µ–∑–∞)")
        return True
    
    return passed_tests == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 