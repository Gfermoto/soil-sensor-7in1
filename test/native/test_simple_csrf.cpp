/**
 * @file test_simple_csrf.cpp
 * @brief –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã –±–µ–∑ Unity
 * @date 2025-06-30
 * @author AI Assistant
 */

#include <Arduino.h>
#include <WebServer.h>
#include <cassert>
#include <iostream>
#include "../include/web/csrf_protection.h"

// Mock WebServer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WebServer webServer(80);

int main()
{
    std::cout << "üîí –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã JXCT" << std::endl;
    std::cout << "=================================" << std::endl;

    try
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF –∑–∞—â–∏—Ç—ã
        initCSRFProtection();
        std::cout << "‚úÖ CSRF –∑–∞—â–∏—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞" << std::endl;

        // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        String token1 = generateCSRFToken();
        String token2 = generateCSRFToken();

        assert(!token1.isEmpty());
        assert(!token2.isEmpty());
        assert(token1 != token2);
        assert(token1.length() >= 32);

        std::cout << "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;

        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        assert(validateCSRFToken(token1));
        assert(!validateCSRFToken("invalid"));
        assert(!validateCSRFToken(""));

        std::cout << "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;

        // –¢–µ—Å—Ç HTML –ø–æ–ª—è
        String field = getCSRFHiddenField();
        assert(field.indexOf("input") >= 0);
        assert(field.indexOf("type=\"hidden\"") >= 0);
        assert(field.indexOf("name=\"csrf_token\"") >= 0);

        std::cout << "‚úÖ HTML –ø–æ–ª–µ CSRF –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" << std::endl;

        std::cout << "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!" << std::endl;
        return 0;
    }
    catch (const std::exception& e)
    {
        std::cerr << "‚ùå –û–®–ò–ë–ö–ê: " << e.what() << std::endl;
        return 1;
    }
}
