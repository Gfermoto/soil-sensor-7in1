/**
 * @file test_csrf_security.cpp
 * @brief –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CSRF –∑–∞—â–∏—Ç—ã
 * @date 2025-01-22
 * @author AI Assistant
 */

#include <unity.h>
#include <Arduino.h>
#include <WebServer.h>
#include "../include/web/csrf_protection.h"
#include "../include/logger.h"

// Mock WebServer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WebServer webServer(80);

void setUp(void) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF –∑–∞—â–∏—Ç—ã
    initCSRFProtection();
}

void tearDown(void) {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
}

// –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
void test_generate_csrf_token() {
    String token1 = generateCSRFToken();
    String token2 = generateCSRFToken();
    
    // –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º–∏
    TEST_ASSERT_FALSE(token1.isEmpty());
    TEST_ASSERT_FALSE(token2.isEmpty());
    
    // –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ (—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å)
    TEST_ASSERT_NOT_EQUAL(token1, token2);
    
    // –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏ (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)
    TEST_ASSERT_GREATER_OR_EQUAL(32, token1.length());
    TEST_ASSERT_GREATER_OR_EQUAL(32, token2.length());
    
    printf("‚úÖ CSRF —Ç–æ–∫–µ–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

// –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
void test_validate_csrf_token() {
    String token = generateCSRFToken();
    
    // –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    TEST_ASSERT_TRUE(validateCSRFToken(token));
    
    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è
    TEST_ASSERT_FALSE(validateCSRFToken("invalid_token"));
    TEST_ASSERT_FALSE(validateCSRFToken(""));
    TEST_ASSERT_FALSE(validateCSRFToken("123"));
    
    printf("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

// –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø–æ–ª—è —Å CSRF —Ç–æ–∫–µ–Ω–æ–º
void test_get_csrf_hidden_field() {
    String field = getCSRFHiddenField();
    
    // –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
    TEST_ASSERT_TRUE(field.indexOf("input") >= 0);
    TEST_ASSERT_TRUE(field.indexOf("type=\"hidden\"") >= 0);
    TEST_ASSERT_TRUE(field.indexOf("name=\"csrf_token\"") >= 0);
    TEST_ASSERT_TRUE(field.indexOf("value=") >= 0);
    
    printf("‚úÖ HTML –ø–æ–ª–µ CSRF —Ç–æ–∫–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CSRF
void test_check_csrf_safety() {
    // –ë–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
    TEST_ASSERT_FALSE(checkCSRFSafety());
    
    // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    String token = generateCSRFToken();
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ–∫–µ–Ω–∞ –≤ webServer
    // (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webServer.arg())
    
    printf("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

// –¢–µ—Å—Ç 5: –ú–µ—Ç–æ–¥ HTTP –≤ —Å—Ç—Ä–æ–∫—É
void test_method_to_string() {
    TEST_ASSERT_EQUAL_STRING("GET", methodToString(HTTP_GET).c_str());
    TEST_ASSERT_EQUAL_STRING("POST", methodToString(HTTP_POST).c_str());
    TEST_ASSERT_EQUAL_STRING("PUT", methodToString(HTTP_PUT).c_str());
    TEST_ASSERT_EQUAL_STRING("DELETE", methodToString(HTTP_DELETE).c_str());
    
    printf("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTTP –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

// –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã
void test_csrf_integration() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª CSRF –∑–∞—â–∏—Ç—ã
    
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    String token = generateCSRFToken();
    TEST_ASSERT_FALSE(token.isEmpty());
    
    // 2. –°–æ–∑–¥–∞–µ–º HTML —Ñ–æ—Ä–º—É —Å —Ç–æ–∫–µ–Ω–æ–º
    String form = "<form method='post'>";
    form += getCSRFHiddenField();
    form += "</form>";
    
    TEST_ASSERT_TRUE(form.indexOf("csrf_token") >= 0);
    TEST_ASSERT_TRUE(form.indexOf("hidden") >= 0);
    
    // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    TEST_ASSERT_TRUE(validateCSRFToken(token));
    
    printf("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã –ø—Ä–æ–π–¥–µ–Ω\n");
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
void test_token_uniqueness() {
    const int NUM_TOKENS = 100;
    String tokens[NUM_TOKENS];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    for (int i = 0; i < NUM_TOKENS; i++) {
        tokens[i] = generateCSRFToken();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    for (int i = 0; i < NUM_TOKENS; i++) {
        for (int j = i + 1; j < NUM_TOKENS; j++) {
            TEST_ASSERT_NOT_EQUAL(tokens[i], tokens[j]);
        }
    }
    
    printf("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å CSRF —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (%d —Ç–æ–∫–µ–Ω–æ–≤)\n", NUM_TOKENS);
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
void test_token_format() {
    const int NUM_SAMPLES = 50;
    
    for (int i = 0; i < NUM_SAMPLES; i++) {
        String token = generateCSRFToken();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è hex)
        TEST_ASSERT_EQUAL(64, token.length());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ hex —Å—Ç—Ä–æ–∫–∞
        for (char c : token) {
            TEST_ASSERT_TRUE((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f'));
        }
    }
    
    printf("‚úÖ –§–æ—Ä–º–∞—Ç CSRF —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (%d –æ–±—Ä–∞–∑—Ü–æ–≤)\n", NUM_SAMPLES);
}

void RUN_UNITY_TESTS() {
    UNITY_BEGIN();
    
    printf("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞—â–∏—Ç—ã JXCT\n");
    printf("================================\n");
    
    RUN_TEST(test_generate_csrf_token);
    RUN_TEST(test_validate_csrf_token);
    RUN_TEST(test_get_csrf_hidden_field);
    RUN_TEST(test_check_csrf_safety);
    RUN_TEST(test_method_to_string);
    RUN_TEST(test_csrf_integration);
    RUN_TEST(test_token_uniqueness);
    RUN_TEST(test_token_format);
    
    printf("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã CSRF –∑–∞—â–∏—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n");
    
    UNITY_END();
}

int main() {
    RUN_UNITY_TESTS();
    return 0;
} 