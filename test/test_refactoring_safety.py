#!/usr/bin/env python3
"""
Refactoring Safety Tests for JXCT Soil Sensor Project
–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è IoT —Å–∏—Å—Ç–µ–º—ã –Ω–∞ ESP32

Author: JXCT Development Team
Version: 3.11.0
License: MIT
"""

import json
import subprocess
import sys
import os
import re
from pathlib import Path
from typing import Dict, List, Any, Optional, Set
from dataclasses import dataclass, asdict
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è IoT —Å–∏—Å—Ç–µ–º—ã
REQUIRED_API_ENDPOINTS = [
    "/",  # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    "/status",  # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    "/health",  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    "/api/calibration/status",  # –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/ph/add",  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ pH –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/ec/add",  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ EC –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/npk/set",  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NPK –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/export",  # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/import",  # –ò–º–ø–æ—Ä—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/calibration/reset",  # –°–±—Ä–æ—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "/api/ota/status",  # –°—Ç–∞—Ç—É—Å OTA
    "/api/ota/check",  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    "/api/ota/install",  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    "/api/reports/test-summary",  # –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–æ–≤
    "/api/reports/technical-debt",  # –û—Ç—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
    "/api/reports/full",  # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    "/sensor_json",  # –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤
    "/readings/upload",  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    "/readings/csv_reset",  # –°–±—Ä–æ—Å CSV
    "/readings/profile",  # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞–Ω–∏–π
    "/config_manager",  # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    "/save_intervals",  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    "/reset_intervals",  # –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    "/reset",  # –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã
    "/reboot",  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    "/ota",  # OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    "/reports",  # –û—Ç—á–µ—Ç—ã
    "/reports/dashboard"  # –î–∞—à–±–æ—Ä–¥ –æ—Ç—á–µ—Ç–æ–≤
]

REQUIRED_DATA_STRUCTURES = [
    "SensorData",
    "CalibrationEntry", 
    "CalibrationPoint",
    "PHCalibration",
    "ECCalibration", 
    "NPKCalibration",
    "SensorCalibration",
    "EnvironmentalConditions",
    "NPKReferences",
    "ValidationResult",
    "ValidationError",
    "ConfigValidationResult",
    "SensorValidationResult",
    "ConfigData",
    "Config",
    "DebugStats",
    "ButtonConfig"
]

REQUIRED_BUSINESS_INTERFACES = [
    "ICropRecommendationEngine",
    "ISensorCalibrationService",
    "ISensorCompensationService"
]

@dataclass
class SafetyTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    test_name: str
    status: str  # PASS, FAIL, WARN
    message: str
    details: Dict[str, Any]
    timestamp: str

@dataclass
class RefactoringSafetyReport:
    """–û—Ç—á—ë—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    version: str
    timestamp: str
    total_tests: int
    passed_tests: int
    failed_tests: int
    warning_tests: int
    results: List[SafetyTestResult]
    summary: Dict[str, Any]

class JXCTRefactoringSafetyTester:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.results: List[SafetyTestResult] = []
        self.start_time = datetime.now()
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] {level}: {message}")
    
    def run_command(self, command: List[str], timeout: int = 120) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è IoT —Å—Ä–µ–¥—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
            if command[0] == "pio" and not self._check_pio_available():
                return {
                    "success": False,
                    "error": "PlatformIO not available",
                    "stdout": "",
                    "stderr": "PlatformIO command not found"
                }
            
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=self.project_root,
                env=self._get_environment()
            )
            return {
                "success": result.returncode == 0,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
        except subprocess.TimeoutExpired:
            return {"success": False, "error": "Timeout", "timeout": timeout}
        except FileNotFoundError:
            return {"success": False, "error": f"Command not found: {command[0]}"}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _check_pio_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PlatformIO"""
        try:
            result = subprocess.run(
                ["pio", "--version"],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0
        except:
            return False
    
    def _get_environment(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        env = os.environ.copy()
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è IoT –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        env["JXCT_SAFETY_TEST_MODE"] = "1"
        return env
    
    def test_api_endpoints_unchanged(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: API endpoints –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å"""
        self.log("üîç –¢–µ—Å—Ç: API endpoints –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å...")
        
        # –ü–æ–∏—Å–∫ API endpoints –≤ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–∞—Ö
        web_routes_dir = self.project_root / "src" / "web"
        found_endpoints = set()
        
        if not web_routes_dir.exists():
            return SafetyTestResult(
                test_name="API Endpoints Unchanged",
                status="FAIL",
                message="Web routes directory not found",
                details={"error": "src/web directory not found"},
                timestamp=datetime.now().isoformat()
            )
        
        for route_file in web_routes_dir.glob("routes_*.cpp"):
            try:
                with open(route_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ü–æ–∏—Å–∫ server.on() –≤—ã–∑–æ–≤–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
                    patterns = [
                        r'webServer\.on\("([^"]+)"',  # webServer.on("/endpoint"
                        r'webServer\.on\(([^,]+),',   # webServer.on(API_CONSTANT
                        r'webServer\.on\("([^"]+)",\s*HTTP_',  # webServer.on("/endpoint", HTTP_
                    ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, content)
                        for match in matches:
                            # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ endpoint
                            endpoint = match.strip().strip('"')
                            if endpoint and not endpoint.startswith('//'):
                                found_endpoints.add(endpoint)
                                
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {route_file}: {e}", "WARN")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö endpoints
        missing_endpoints = set(REQUIRED_API_ENDPOINTS) - found_endpoints
        extra_endpoints = found_endpoints - set(REQUIRED_API_ENDPOINTS)
        
        if missing_endpoints:
            status = "FAIL"
            message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API endpoints: {missing_endpoints}"
        elif extra_endpoints:
            status = "WARN"
            message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API endpoints: {extra_endpoints}"
        else:
            status = "PASS"
            message = "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API endpoints –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        return SafetyTestResult(
            test_name="API Endpoints Unchanged",
            status=status,
            message=message,
            details={
                "found_endpoints": list(found_endpoints),
                "required_endpoints": REQUIRED_API_ENDPOINTS,
                "missing_endpoints": list(missing_endpoints),
                "extra_endpoints": list(extra_endpoints)
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_data_structures_compatible(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã"""
        self.log("üîç –¢–µ—Å—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã...")
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        include_dir = self.project_root / "include"
        found_structures = set()
        
        if not include_dir.exists():
            return SafetyTestResult(
                test_name="Data Structures Compatible",
                status="FAIL",
                message="Include directory not found",
                details={"error": "include directory not found"},
                timestamp=datetime.now().isoformat()
            )
        
        for header_file in include_dir.rglob("*.h"):
            try:
                with open(header_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ü–æ–∏—Å–∫ struct –∏ class –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    struct_patterns = [
                        r'struct\s+(\w+)',  # struct Name
                        r'struct\s+__attribute__\(\([^)]+\)\)\s+(\w+)',  # struct __attribute__((packed)) Name
                        r'struct\s+__attribute__\(\(packed\)\)\s+(\w+)',  # struct __attribute__((packed)) Name
                    ]
                    
                    for pattern in struct_patterns:
                        matches = re.findall(pattern, content)
                        found_structures.update(matches)
                    
                    # –ü–æ–∏—Å–∫ class –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
                    class_matches = re.findall(r'class\s+(\w+)', content)
                    found_structures.update(class_matches)
                    
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {header_file}: {e}", "WARN")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        missing_structures = set(REQUIRED_DATA_STRUCTURES) - found_structures
        
        if missing_structures:
            status = "FAIL"
            message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {missing_structures}"
        else:
            status = "PASS"
            message = "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        return SafetyTestResult(
            test_name="Data Structures Compatible",
            status=status,
            message=message,
            details={
                "found_structures": list(found_structures),
                "required_structures": REQUIRED_DATA_STRUCTURES,
                "missing_structures": list(missing_structures)
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_business_interfaces_present(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
        self.log("üîç –¢–µ—Å—Ç: –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç...")
        
        business_dir = self.project_root / "include" / "business"
        found_interfaces = set()
        
        if not business_dir.exists():
            return SafetyTestResult(
                test_name="Business Interfaces Present",
                status="FAIL",
                message="Business interfaces directory not found",
                details={"error": "include/business directory not found"},
                timestamp=datetime.now().isoformat()
            )
        
        for interface_file in business_dir.glob("I*.h"):
            interface_name = interface_file.stem
            found_interfaces.add(interface_name)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        missing_interfaces = set(REQUIRED_BUSINESS_INTERFACES) - found_interfaces
        
        if missing_interfaces:
            status = "FAIL"
            message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {missing_interfaces}"
        else:
            status = "PASS"
            message = "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        return SafetyTestResult(
            test_name="Business Interfaces Present",
            status=status,
            message=message,
            details={
                "found_interfaces": list(found_interfaces),
                "required_interfaces": REQUIRED_BUSINESS_INTERFACES,
                "missing_interfaces": list(missing_interfaces)
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_configuration_backward_compatible(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞"""
        self.log("üîç –¢–µ—Å—Ç: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = self.project_root / "src" / "config.cpp"
        
        if not config_file.exists():
            return SafetyTestResult(
                test_name="Configuration Backward Compatible",
                status="FAIL",
                message="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                details={"error": "config.cpp not found"},
                timestamp=datetime.now().isoformat()
            )
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            return SafetyTestResult(
                test_name="Configuration Backward Compatible",
                status="FAIL",
                message="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                details={"error": str(e)},
                timestamp=datetime.now().isoformat()
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        required_functions = [
            "loadConfig",
            "saveConfig", 
            "resetConfig"
        ]
        
        missing_functions = []
        for func in required_functions:
            if func not in content:
                missing_functions.append(func)
        
        if missing_functions:
            status = "FAIL"
            message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {missing_functions}"
        else:
            status = "PASS"
            message = "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        return SafetyTestResult(
            test_name="Configuration Backward Compatible",
            status=status,
            message=message,
            details={
                "required_functions": required_functions,
                "missing_functions": missing_functions,
                "config_file": str(config_file)
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_compilation_successful(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"""
        self.log("üîç –¢–µ—Å—Ç: –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
        firmware_path = self.project_root / ".pio" / "build" / "esp32dev" / "firmware.bin"
        
        if not firmware_path.exists():
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
            self.log("üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏...")
            build_result = self.run_command(["pio", "run", "-e", "esp32dev"], timeout=300)
            
            if not build_result["success"]:
                return SafetyTestResult(
                    test_name="Compilation Successful",
                    status="FAIL",
                    message="–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å",
                    details={
                        "error": build_result.get("error", "Build failed"),
                        "stderr": build_result.get("stderr", "")[:200]
                    },
                    timestamp=datetime.now().isoformat()
                )
        
        return SafetyTestResult(
            test_name="Compilation Successful",
            status="PASS",
            message="–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞",
            details={
                "firmware_path": str(firmware_path) if firmware_path.exists() else "Built successfully"
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_all_tests_pass(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç"""
        self.log("üîç –¢–µ—Å—Ç: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        test_dir = self.project_root / "test"
        if not test_dir.exists():
            return SafetyTestResult(
                test_name="All Tests Pass",
                status="FAIL",
                message="Test directory not found",
                details={"error": "test directory not found"},
                timestamp=datetime.now().isoformat()
            )
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ultra_quick_test
        quick_test = self.run_command([
            "python", "scripts/ultra_quick_test.py"
        ], timeout=60)
        
        if quick_test["success"] and quick_test["returncode"] == 0:
            return SafetyTestResult(
                test_name="All Tests Pass",
                status="PASS",
                message="Ultra quick tests passed",
                details={
                    "test_type": "ultra_quick_test",
                    "execution_time": "fast",
                    "stdout": quick_test.get("stdout", "")[:200]
                },
                timestamp=datetime.now().isoformat()
            )
        
        # –ï—Å–ª–∏ ultra_quick_test –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º run_simple_tests
        self.log("‚ö†Ô∏è ultra_quick_test –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º run_simple_tests", "WARN")
        simple_test = self.run_command([
            "python", "scripts/run_simple_tests.py"
        ], timeout=180)
        
        if simple_test["success"] and simple_test["returncode"] == 0:
            return SafetyTestResult(
                test_name="All Tests Pass",
                status="PASS",
                message="Simple tests passed",
                details={
                    "test_type": "run_simple_tests",
                    "execution_time": "medium",
                    "ultra_quick_error": quick_test.get("error", ""),
                    "stdout": simple_test.get("stdout", "")[:200]
                },
                timestamp=datetime.now().isoformat()
            )
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º pytest
        self.log("‚ö†Ô∏è run_simple_tests –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º pytest", "WARN")
        pytest_result = self.run_command([
            "python", "-m", "pytest", "test/", "-v"
        ], timeout=300)
        
        if pytest_result["success"] and pytest_result["returncode"] == 0:
            return SafetyTestResult(
                test_name="All Tests Pass",
                status="PASS",
                message="Pytest tests passed",
                details={
                    "test_type": "pytest",
                    "execution_time": "slow",
                    "ultra_quick_error": quick_test.get("error", ""),
                    "simple_test_error": simple_test.get("error", ""),
                    "stdout": pytest_result.get("stdout", "")[:200]
                },
                timestamp=datetime.now().isoformat()
            )
        
        return SafetyTestResult(
            test_name="All Tests Pass",
            status="FAIL",
            message="All test runners failed",
            details={
                "ultra_quick_error": quick_test.get("error", ""),
                "simple_test_error": simple_test.get("error", ""),
                "pytest_error": pytest_result.get("error", ""),
                "ultra_quick_returncode": quick_test.get("returncode", -1),
                "simple_test_returncode": simple_test.get("returncode", -1),
                "pytest_returncode": pytest_result.get("returncode", -1)
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_clang_tidy_clean(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: Clang-tidy –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        self.log("üîç –¢–µ—Å—Ç: Clang-tidy –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_script = self.project_root / "scripts" / "run_clang_tidy_analysis.py"
        if not analysis_script.exists():
            return SafetyTestResult(
                test_name="Clang-tidy Clean",
                status="FAIL",
                message="–°–∫—Ä–∏–ø—Ç clang-tidy –Ω–µ –Ω–∞–π–¥–µ–Ω",
                details={"error": "run_clang_tidy_analysis.py not found"},
                timestamp=datetime.now().isoformat()
            )
        
        # –ó–∞–ø—É—Å–∫ clang-tidy –∞–Ω–∞–ª–∏–∑–∞
        tidy_result = self.run_command([
            "python", "scripts/run_clang_tidy_analysis.py"
        ], timeout=120)
        
        if not tidy_result["success"]:
            return SafetyTestResult(
                test_name="Clang-tidy Clean",
                status="FAIL",
                message="Clang-tidy –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è",
                details={
                    "error": tidy_result.get("error", "Clang-tidy failed"),
                    "stderr": tidy_result.get("stderr", "")[:200]
                },
                timestamp=datetime.now().isoformat()
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        output = tidy_result.get("stdout", "")
        if "Total warnings: 0" in output or "0 warnings" in output:
            status = "PASS"
            message = "Clang-tidy –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        else:
            status = "WARN"
            message = "Clang-tidy –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
        
        return SafetyTestResult(
            test_name="Clang-tidy Clean",
            status=status,
            message=message,
            details={
                "tidy_output": output[:200] + "..."
            },
            timestamp=datetime.now().isoformat()
        )
    
    def test_memory_safety(self) -> SafetyTestResult:
        """–¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏"""
        self.log("üîç –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        src_dir = self.project_root / "src"
        unsafe_patterns = [
            r'\bstrcpy\b',
            r'\bstrcat\b', 
            r'\bsprintf\b',
            r'\bgets\b',
            r'\bscanf\b'
        ]
        
        found_unsafe = []
        
        if not src_dir.exists():
            return SafetyTestResult(
                test_name="Memory Safety",
                status="FAIL",
                message="Source directory not found",
                details={"error": "src directory not found"},
                timestamp=datetime.now().isoformat()
            )
        
        for cpp_file in src_dir.rglob("*.cpp"):
            try:
                with open(cpp_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    for pattern in unsafe_patterns:
                        if re.search(pattern, content):
                            found_unsafe.append({
                                "file": str(cpp_file),
                                "pattern": pattern
                            })
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                continue
        
        if found_unsafe:
            status = "WARN"
            message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(found_unsafe)}"
        else:
            status = "PASS"
            message = "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        
        return SafetyTestResult(
            test_name="Memory Safety",
            status=status,
            message=message,
            details={
                "unsafe_patterns": unsafe_patterns,
                "found_unsafe": found_unsafe
            },
            timestamp=datetime.now().isoformat()
        )
    
    def generate_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r.status == "PASS")
        failed_tests = sum(1 for r in self.results if r.status == "FAIL")
        warning_tests = sum(1 for r in self.results if r.status == "WARN")
        
        execution_time = (datetime.now() - self.start_time).total_seconds()
        
        return {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "warning_tests": warning_tests,
            "success_rate": (passed_tests / total_tests * 100) if total_tests > 0 else 0,
            "execution_time_seconds": execution_time,
            "timestamp": datetime.now().isoformat()
        }
    
    def save_report(self, report: RefactoringSafetyReport):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ JSON"""
        report_path = self.project_root / "test_reports" / "refactoring_safety.json"
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(report), f, indent=2, ensure_ascii=False)
        
        self.log(f"üìä –û—Ç—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    
    def print_report(self, report: RefactoringSafetyReport):
        """–í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üõ°Ô∏è –û–¢–ß–Å–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê JXCT")
        print("="*60)
        print(f"üìÖ –î–∞—Ç–∞: {report.timestamp}")
        print(f"üî¢ –í–µ—Ä—Å–∏—è: {report.version}")
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 60)
        
        for result in report.results:
            status_icon = {
                "PASS": "‚úÖ",
                "WARN": "‚ö†Ô∏è",
                "FAIL": "‚ùå"
            }.get(result.status, "‚ùì")
            
            print(f"{status_icon} {result.test_name}: {result.status}")
            print(f"   ‚îî‚îÄ {result.message}")
        
        print("\nüìà –°–í–û–î–ö–ê:")
        print("-" * 60)
        summary = report.summary
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed_tests']}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {summary['warning_tests']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed_tests']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['execution_time_seconds']:.2f} —Å–µ–∫")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if summary['failed_tests'] > 0:
            print("\nüö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
        elif summary['warning_tests'] > 0:
            print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏")
        else:
            print("\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            print("   - –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        print("\n" + "="*60)
    
    def run_all_safety_tests(self) -> RefactoringSafetyReport:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.log("üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ JXCT...")
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safety_tests = [
            self.test_api_endpoints_unchanged,
            self.test_data_structures_compatible,
            self.test_business_interfaces_present,
            self.test_configuration_backward_compatible,
            self.test_compilation_successful,
            self.test_all_tests_pass,
            self.test_clang_tidy_clean,
            self.test_memory_safety
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        for test_func in safety_tests:
            try:
                result = test_func()
                self.results.append(result)
                self.log(f"{result.status} {result.test_name}: {result.message}")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}", "ERROR")
                error_result = SafetyTestResult(
                    test_name=test_func.__name__,
                    status="FAIL",
                    message=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}",
                    details={"error": str(e)},
                    timestamp=datetime.now().isoformat()
                )
                self.results.append(error_result)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        summary = self.generate_summary()
        
        report = RefactoringSafetyReport(
            version="3.11.0",
            timestamp=datetime.now().isoformat(),
            total_tests=summary["total_tests"],
            passed_tests=summary["passed_tests"],
            failed_tests=summary["failed_tests"],
            warning_tests=summary["warning_tests"],
            results=self.results,
            summary=summary
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
        self.save_report(report)
        self.print_report(report)
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = JXCTRefactoringSafetyTester()
    
    try:
        report = tester.run_all_safety_tests()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if report.failed_tests > 0:
            print("‚ùå Safety Tests: FAIL")
            sys.exit(1)
        elif report.warning_tests > 0:
            print("‚ö†Ô∏è Safety Tests: WARN")
            sys.exit(2)
        else:
            print("‚úÖ Safety Tests: PASS")
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 