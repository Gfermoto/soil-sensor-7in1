#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Python-–æ–±—ë—Ä—Ç–∫–∞–º–∏
"""

import sys
import time
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def test_advanced_filters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    print("üîç –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–´–• –§–ò–õ–¨–¢–†–û–í")
    print("   üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏
        try:
            import jxct_core
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Python-–æ–±—ë—Ä—Ç–∫–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à—É–º–æ–º
            data = jxct_core.SensorData()
            data.temperature = 25.0 + (time.time() % 10 - 5)  # –®—É–º ¬±5
            data.humidity = 60.0 + (time.time() % 20 - 10)   # –®—É–º ¬±10
            data.ph = 6.5 + (time.time() % 2 - 1)            # –®—É–º ¬±1
            data.ec = 1500.0 + (time.time() % 1000 - 500)    # –®—É–º ¬±500
            data.nitrogen = 45.0 + (time.time() % 20 - 10)   # –®—É–º ¬±10
            data.phosphorus = 30.0 + (time.time() % 15 - 7.5) # –®—É–º ¬±7.5
            data.potassium = 25.0 + (time.time() % 10 - 5)   # –®—É–º ¬±5
            data.valid = True
            data.timestamp = int(time.time())
            
            print(f"   üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å —à—É–º–æ–º):")
            print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.temperature:.2f}¬∞C")
            print(f"      üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data.humidity:.2f}%")
            print(f"      üß™ pH: {data.ph:.2f}")
            print(f"      ‚ö° EC: {data.ec:.1f} ŒºS/cm")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filter_configs = [
                {"kalman": False, "adaptive": False, "name": "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"},
                {"kalman": True, "adaptive": False, "name": "–¢–æ–ª—å–∫–æ Kalman"},
                {"kalman": False, "adaptive": True, "name": "–¢–æ–ª—å–∫–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π"},
                {"kalman": True, "adaptive": True, "name": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"}
            ]
            
            results = []
            
            for config in filter_configs:
                print(f"   üîÑ {config['name']}...")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                filtered_data = jxct_core.apply_filters(
                    data, config["kalman"], config["adaptive"]
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                filtering_applied = (
                    abs(filtered_data.temperature - data.temperature) > 0.001 or
                    abs(filtered_data.humidity - data.humidity) > 0.001 or
                    abs(filtered_data.ph - data.ph) > 0.001 or
                    abs(filtered_data.ec - data.ec) > 0.001
                )
                
                results.append({
                    "config": config["name"],
                    "filtering_applied": filtering_applied,
                    "original_temp": data.temperature,
                    "filtered_temp": filtered_data.temperature,
                    "original_humidity": data.humidity,
                    "filtered_humidity": filtered_data.humidity
                })
                
                print(f"      ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if filtering_applied else '–ù–µ—Ç'}")
                print(f"      üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.temperature:.2f} ‚Üí {filtered_data.temperature:.2f}")
                print(f"      üìä –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data.humidity:.2f} ‚Üí {filtered_data.humidity:.2f}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_configs = len(results)
            successful_filtering = sum(1 for r in results if r["filtering_applied"])
            
            print(f"   üìä –ò–¢–û–ì–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_filtering}/{total_configs}")
            
            return successful_filtering > 0  # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
                
        except ImportError:
            print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            class MockSensorData:
                def __init__(self):
                    self.temperature = 25.0 + (time.time() % 10 - 5)
                    self.humidity = 60.0 + (time.time() % 20 - 10)
                    self.ph = 6.5 + (time.time() % 2 - 1)
                    self.ec = 1500.0 + (time.time() % 1000 - 500)
                    self.nitrogen = 45.0 + (time.time() % 20 - 10)
                    self.phosphorus = 30.0 + (time.time() % 15 - 7.5)
                    self.potassium = 25.0 + (time.time() % 10 - 5)
                    self.valid = True
                    self.timestamp = int(time.time())
            
            def mock_apply_filters(data, kalman_enabled, adaptive_enabled):
                result = MockSensorData()
                result.temperature = data.temperature
                result.humidity = data.humidity
                result.ph = data.ph
                result.ec = data.ec
                result.nitrogen = data.nitrogen
                result.phosphorus = data.phosphorus
                result.potassium = data.potassium
                if kalman_enabled or adaptive_enabled:
                    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    result.temperature = data.temperature * 0.99
                    result.humidity = data.humidity * 0.99
                return result
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            data = MockSensorData()
            print(f"   üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å —à—É–º–æ–º):")
            print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.temperature:.2f}¬∞C")
            print(f"      üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data.humidity:.2f}%")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            filtered_data = mock_apply_filters(data, True, False)
            
            filtering_applied = (
                abs(filtered_data.temperature - data.temperature) > 0.001 or
                abs(filtered_data.humidity - data.humidity) > 0.001
            )
            
            print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞) –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {'–î–∞' if filtering_applied else '–ù–µ—Ç'}")
            print(f"      üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.temperature:.2f} ‚Üí {filtered_data.temperature:.2f}")
            print(f"      üìä –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data.humidity:.2f} ‚Üí {filtered_data.humidity:.2f}")
            
            return filtering_applied
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        print(f"   üìã Traceback: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_advanced_filters()
    
    if success:
        print("‚úÖ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–û–í –ü–†–û–ô–î–ï–ù")
        return 0
    else:
        print("‚ùå –¢–ï–°–¢ –§–ò–õ–¨–¢–†–û–í –ü–†–û–í–ê–õ–ï–ù")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 