#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ C++ –≤ Windows
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ w64devkit
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def setup_compiler_path():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ w64devkit"""
    compiler_path = r"C:\Program Files\w64devkit\bin"

    if platform.system() == "Windows":
        current_path = os.environ.get("PATH", "")
        if compiler_path not in current_path:
            os.environ["PATH"] = current_path + ";" + compiler_path
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É: {compiler_path}")
        else:
            print(f"‚úÖ –ü—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {compiler_path}")
    else:
        print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Windows")

def check_compiler():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"""
    try:
        result = subprocess.run(["g++", "--version"],
                              capture_output=True, text=True, encoding="utf-8", timeout=10)
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –í–µ—Ä—Å–∏—è: {result.stdout.splitlines()[0]}")
            return True
        else:
            print("‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞")
        return False

def compile_test(test_file, output_name):
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    project_root = Path(__file__).parent.parent.parent
    include_path = project_root / "include"
    src_path = project_root / "src"
    test_stubs_path = project_root / "test" / "stubs"
    unity_path = project_root / "test" / "stubs" / "Unity"
    unity_src_path = project_root / "test" / "stubs" / "Unity" / "src"
    unity_c = unity_src_path / "unity.c"
    cmd = [
        "g++", "-std=c++17",
        f"-I{include_path}",
        f"-I{src_path}",
        f"-I{test_stubs_path}",
        f"-I{unity_path}",
        f"-I{unity_src_path}",
        str(test_file),
        str(unity_c),
        "-o", output_name
    ]
    print(f"üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è: {' '.join(cmd)}")
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, encoding="utf-8", timeout=60)
        if result.returncode == 0:
            print(f"‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {output_name}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
        return False

def run_test(executable):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {executable}")

    try:
        result = subprocess.run([f"./{executable}"],
                              capture_output=True, text=True, encoding="utf-8", timeout=30)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        print(f"   stdout:\n{result.stdout}")
        if result.stderr:
            print(f"   stderr:\n{result.stderr}")

        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í JXCT")
    print("=" * 50)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    setup_compiler_path()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    if not check_compiler():
        print("\n‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ w64devkit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        print("   –ü—É—Ç—å: C:\\Program Files\\w64devkit\\bin")
        return 1

    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    tests = [
        ("test_component_interaction.cpp", "test_component_interaction"),
        ("test_web_api_integration.cpp", "test_web_api_integration")
    ]

    success_count = 0
    total_count = len(tests)

    for test_file, output_name in tests:
        test_path = Path(__file__).parent / test_file

        if not test_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            continue

        print(f"\nüìã –¢–µ—Å—Ç: {test_file}")
        print("-" * 30)

        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        if compile_test(test_path, output_name):
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            if run_test(output_name):
                success_count += 1
                print(f"‚úÖ –¢–µ—Å—Ç {test_file} –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå –¢–µ—Å—Ç {test_file} –ü–†–û–í–ê–õ–ï–ù")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ {test_file}")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {success_count}/{total_count}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count/total_count)*100:.1f}%")

    if success_count == total_count:
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main())
