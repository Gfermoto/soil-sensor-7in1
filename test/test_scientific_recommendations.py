#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π JXCT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import requests
import time
from datetime import datetime

def test_scientific_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π JXCT")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞
    sensor_data = {
        "temperature": 25.5,
        "humidity": 72.0,
        "ec": 2100.0,
        "ph": 6.8,
        "nitrogen": 140.0,
        "phosphorus": 65.0,
        "potassium": 180.0
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã
    test_crops = [
        "tomato",
        "cucumber", 
        "pepper",
        "lettuce",
        "blueberry"
    ]
    
    # –¢–∏–ø—ã –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    growing_types = [
        "soil",
        "greenhouse",
        "hydroponics",
        "organic"
    ]
    
    # –°–µ–∑–æ–Ω—ã
    seasons = [
        "spring",
        "summer", 
        "autumn",
        "winter"
    ]
    
    results = []
    
    for crop in test_crops:
        print(f"\nüå± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã: {crop}")
        
        for growing_type in growing_types:
            for season in seasons:
                print(f"  üìç {growing_type} + {season}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                request_data = {
                    "sensor_data": sensor_data,
                    "crop_type": crop,
                    "growing_type": growing_type,
                    "season": season
                }
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API (–∑–∞–≥–ª—É—à–∫–∞)
                    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
                    recommendation = simulate_recommendation_api(request_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    validation_result = validate_recommendation(
                        recommendation, crop, growing_type, season
                    )
                    
                    result = {
                        "crop": crop,
                        "growing_type": growing_type,
                        "season": season,
                        "recommendation": recommendation,
                        "validation": validation_result,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    results.append(result)
                    
                    if validation_result["status"] == "PASS":
                        print(f"    ‚úÖ PASS: {validation_result['message']}")
                    else:
                        print(f"    ‚ùå FAIL: {validation_result['message']}")
                        
                except Exception as e:
                    print(f"    üí• ERROR: {str(e)}")
                    results.append({
                        "crop": crop,
                        "growing_type": growing_type,
                        "season": season,
                        "error": str(e),
                        "timestamp": datetime.now().isoformat()
                    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_test_results(results)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results(results)
    
    return results

def simulate_recommendation_api(request_data):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    crop = request_data["crop_type"]
    growing_type = request_data["growing_type"]
    season = request_data["season"]
    sensor_data = request_data["sensor_data"]
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä (–Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    crop_configs = {
        "tomato": {
            "temperature": 24.0,
            "humidity": 75.0,
            "ec": 2000.0,
            "ph": 6.5,
            "nitrogen": 150.0,
            "phosphorus": 75.0,
            "potassium": 200.0
        },
        "cucumber": {
            "temperature": 26.0,
            "humidity": 80.0,
            "ec": 1800.0,
            "ph": 6.5,
            "nitrogen": 125.0,
            "phosphorus": 65.0,
            "potassium": 150.0
        },
        "pepper": {
            "temperature": 27.0,
            "humidity": 75.0,
            "ec": 2100.0,
            "ph": 6.5,
            "nitrogen": 155.0,
            "phosphorus": 75.0,
            "potassium": 175.0
        },
        "lettuce": {
            "temperature": 18.0,
            "humidity": 85.0,
            "ec": 1500.0,
            "ph": 6.5,
            "nitrogen": 100.0,
            "phosphorus": 50.0,
            "potassium": 100.0
        },
        "blueberry": {
            "temperature": 20.0,
            "humidity": 75.0,
            "ec": 1200.0,
            "ph": 5.0,
            "nitrogen": 100.0,
            "phosphorus": 40.0,
            "potassium": 80.0
        }
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    seasonal_adjustments = {
        "spring": {"temp": 2.0, "hum": 5.0, "n": 10.0},
        "summer": {"temp": 4.0, "hum": -5.0, "k": 15.0},
        "autumn": {"temp": -3.0, "hum": 3.0, "p": 10.0},
        "winter": {"temp": -8.0, "hum": -10.0, "ec": -200.0}
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    growing_adjustments = {
        "greenhouse": {"temp": 3.0, "hum": 10.0, "ec": 300.0, "n": 20.0, "p": 10.0, "k": 15.0},
        "hydroponics": {"ec": 500.0, "n": 30.0, "p": 15.0, "k": 25.0},
        "aeroponics": {"ec": 400.0, "n": 25.0, "p": 12.0, "k": 20.0},
        "organic": {"ec": -200.0, "n": -10.0, "p": -5.0, "k": -8.0}
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    base_config = crop_configs.get(crop, crop_configs["tomato"])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    adjusted_config = base_config.copy()
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    season_adj = seasonal_adjustments.get(season, {})
    adjusted_config["temperature"] += season_adj.get("temp", 0.0)
    adjusted_config["humidity"] += season_adj.get("hum", 0.0)
    adjusted_config["nitrogen"] += season_adj.get("n", 0.0)
    adjusted_config["phosphorus"] += season_adj.get("p", 0.0)
    adjusted_config["potassium"] += season_adj.get("k", 0.0)
    adjusted_config["ec"] += season_adj.get("ec", 0.0)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    growing_adj = growing_adjustments.get(growing_type, {})
    adjusted_config["temperature"] += growing_adj.get("temp", 0.0)
    adjusted_config["humidity"] += growing_adj.get("hum", 0.0)
    adjusted_config["ec"] += growing_adj.get("ec", 0.0)
    adjusted_config["nitrogen"] += growing_adj.get("n", 0.0)
    adjusted_config["phosphorus"] += growing_adj.get("p", 0.0)
    adjusted_config["potassium"] += growing_adj.get("k", 0.0)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    health_score = 100
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    temp_diff = abs(sensor_data["temperature"] - adjusted_config["temperature"])
    if temp_diff > 5.0:
        recommendations.append("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
        health_score -= 15
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    hum_diff = abs(sensor_data["humidity"] - adjusted_config["humidity"])
    if hum_diff > 10.0:
        recommendations.append("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
        health_score -= 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º EC
    ec_diff = abs(sensor_data["ec"] - adjusted_config["ec"])
    if ec_diff > 500.0:
        recommendations.append("‚ö° EC —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
        health_score -= 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pH
    ph_diff = abs(sensor_data["ph"] - adjusted_config["ph"])
    if ph_diff > 0.5:
        recommendations.append("üß™ pH —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
        health_score -= 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º NPK
    if sensor_data["nitrogen"] < adjusted_config["nitrogen"] - 20.0:
        recommendations.append("üå± –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∞–∑–æ—Ç–∞")
        health_score -= 10
    
    if sensor_data["phosphorus"] < adjusted_config["phosphorus"] - 15.0:
        recommendations.append("üå± –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ñ–æ—Å—Ñ–æ—Ä–∞")
        health_score -= 10
    
    if sensor_data["potassium"] < adjusted_config["potassium"] - 20.0:
        recommendations.append("üå± –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–∏—è")
        health_score -= 10
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    if health_score >= 80:
        health_status = "–û—Ç–ª–∏—á–Ω–æ–µ"
    elif health_score >= 60:
        health_status = "–•–æ—Ä–æ—à–µ–µ"
    elif health_score >= 40:
        health_status = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
    else:
        health_status = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    
    if not recommendations:
        recommendations.append("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
    
    return {
        "crop_type": crop,
        "growing_type": growing_type,
        "season": season,
        "recommendations": recommendations,
        "health_status": health_status,
        "health_score": health_score,
        "adjusted_config": adjusted_config,
        "scientific_notes": f"–ù–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {crop} –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö"
    }

def validate_recommendation(recommendation, crop, growing_type, season):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    validation_result = {
        "status": "PASS",
        "message": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
        "issues": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ["crop_type", "growing_type", "season", "recommendations", "health_status"]
    for field in required_fields:
        if field not in recommendation:
            validation_result["status"] = "FAIL"
            validation_result["issues"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –∫—É–ª—å—Ç—É—Ä—ã
    valid_crops = ["tomato", "cucumber", "pepper", "lettuce", "blueberry"]
    if recommendation.get("crop_type") not in valid_crops:
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫—É–ª—å—Ç—É—Ä—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    valid_growing_types = ["soil", "greenhouse", "hydroponics", "aeroponics", "organic"]
    if recommendation.get("growing_type") not in valid_growing_types:
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞
    valid_seasons = ["spring", "summer", "autumn", "winter"]
    if recommendation.get("season") not in valid_seasons:
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–∑–æ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
    valid_health_statuses = ["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"]
    if recommendation.get("health_status") not in valid_health_statuses:
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å score
    health_score = recommendation.get("health_score", 0)
    if not (0 <= health_score <= 100):
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π score –∑–¥–æ—Ä–æ–≤—å—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = recommendation.get("recommendations", [])
    if not recommendations:
        validation_result["status"] = "FAIL"
        validation_result["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä
    if crop == "blueberry":
        adjusted_config = recommendation.get("adjusted_config", {})
        if adjusted_config.get("ph", 7.0) > 5.5:
            validation_result["status"] = "FAIL"
            validation_result["issues"].append("–î–ª—è —á–µ—Ä–Ω–∏–∫–∏ pH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∏—Å–ª—ã–º")
    
    if crop == "tomato":
        adjusted_config = recommendation.get("adjusted_config", {})
        if adjusted_config.get("ec", 0) > 3000.0:
            validation_result["status"] = "WARN"
            validation_result["issues"].append("–í—ã—Å–æ–∫–∏–π EC –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —É —Ç–æ–º–∞—Ç–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if validation_result["issues"]:
        validation_result["message"] = "; ".join(validation_result["issues"])
    
    return validation_result

def save_test_results(results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_reports/scientific_recommendations_test_{timestamp}.json"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def analyze_results(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    total_tests = len(results)
    passed_tests = 0
    failed_tests = 0
    error_tests = 0
    
    crop_stats = {}
    growing_type_stats = {}
    season_stats = {}
    
    for result in results:
        if "error" in result:
            error_tests += 1
            continue
            
        validation = result.get("validation", {})
        status = validation.get("status", "UNKNOWN")
        
        if status == "PASS":
            passed_tests += 1
        elif status == "FAIL":
            failed_tests += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
        crop = result.get("crop", "unknown")
        if crop not in crop_stats:
            crop_stats[crop] = {"pass": 0, "fail": 0, "warn": 0}
        crop_stats[crop][status.lower()] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
        growing_type = result.get("growing_type", "unknown")
        if growing_type not in growing_type_stats:
            growing_type_stats[growing_type] = {"pass": 0, "fail": 0, "warn": 0}
        growing_type_stats[growing_type][status.lower()] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º
        season = result.get("season", "unknown")
        if season not in season_stats:
            season_stats[season] = {"pass": 0, "fail": 0, "warn": 0}
        season_stats[season][status.lower()] += 1
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {passed_tests} ({passed_tests/total_tests*100:.1f}%)")
    print(f"   –û—à–∏–±–∫–∏: {failed_tests} ({failed_tests/total_tests*100:.1f}%)")
    print(f"   –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: {error_tests} ({error_tests/total_tests*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
    print(f"\nüå± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º:")
    for crop, stats in crop_stats.items():
        total = sum(stats.values())
        pass_rate = stats["pass"] / total * 100 if total > 0 else 0
        print(f"   {crop}: {stats['pass']}/{total} ({pass_rate:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
    print(f"\nüèóÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è:")
    for growing_type, stats in growing_type_stats.items():
        total = sum(stats.values())
        pass_rate = stats["pass"] / total * 100 if total > 0 else 0
        print(f"   {growing_type}: {stats['pass']}/{total} ({pass_rate:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º
    print(f"\nüå§Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º:")
    for season, stats in season_stats.items():
        total = sum(stats.values())
        pass_rate = stats["pass"] / total * 100 if total > 0 else 0
        print(f"   {season}: {stats['pass']}/{total} ({pass_rate:.1f}%)")
    
    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    if passed_tests / total_tests >= 0.9:
        print(f"\nüéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif passed_tests / total_tests >= 0.7:
        print(f"\n‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        print(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

if __name__ == "__main__":
    test_scientific_recommendations() 