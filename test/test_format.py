#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è JXCT
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: EYERA Development Team
–î–∞—Ç–∞: 2025-07-04
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def check_file_encoding(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            f.read()
        return True
    except UnicodeDecodeError:
        return False

def check_line_length(file_path, max_length=120):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        long_lines = []
        for i, line in enumerate(lines, 1):
            if len(line.rstrip('\n')) > max_length:
                long_lines.append(i)

        return len(long_lines) == 0, long_lines
    except Exception:
        return False, []

def check_trailing_whitespace(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ trailing whitespace"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        trailing_lines = []
        for i, line in enumerate(lines, 1):
            if line.rstrip('\n') != line.rstrip():
                trailing_lines.append(i)

        return len(trailing_lines) == 0, trailing_lines
    except Exception:
        return False, []

def check_file_ending(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        return content.endswith('\n') or content == '', not content.endswith('\n')
    except Exception:
        return False, True

def should_skip_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    skip_patterns = [
        '.venv',
        '.pio',
        '__pycache__',
        'node_modules',
        'site-packages',
        '.git'
    ]

    file_str = str(file_path)
    for pattern in skip_patterns:
        if pattern in file_str:
            return True

    return False

def test_cpp_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è C++ —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è C++ —Ñ–∞–π–ª–æ–≤...")

    cpp_files = list(project_root.rglob("*.cpp")) + list(project_root.rglob("*.h"))
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    cpp_files = [f for f in cpp_files if not should_skip_file(f)]

    total_files = len(cpp_files)
    passed_files = 0

    for file_path in cpp_files:
        file_relative = file_path.relative_to(project_root)
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        if not check_file_encoding(file_path):
            issues.append("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
        length_ok, long_lines = check_line_length(file_path)
        if not length_ok:
            issues.append(f"–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {long_lines[:3]}{'...' if len(long_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing whitespace
        whitespace_ok, trailing_lines = check_trailing_whitespace(file_path)
        if not whitespace_ok:
            issues.append(f"trailing whitespace: {trailing_lines[:3]}{'...' if len(trailing_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        ending_ok, _ = check_file_ending(file_path)
        if not ending_ok:
            issues.append("–Ω–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ")

        if not issues:
            passed_files += 1
            print(f"  ‚úÖ {file_relative}")
        else:
            print(f"  ‚ö†Ô∏è {file_relative}: {', '.join(issues)}")

    print(f"  üìä C++ —Ñ–∞–π–ª—ã: {passed_files}/{total_files} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    return passed_files == total_files

def test_python_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Python —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Python —Ñ–∞–π–ª–æ–≤...")

    python_files = list(project_root.rglob("*.py"))
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    python_files = [f for f in python_files if not should_skip_file(f)]

    total_files = len(python_files)
    passed_files = 0

    for file_path in python_files:
        file_relative = file_path.relative_to(project_root)
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        if not check_file_encoding(file_path):
            issues.append("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
        length_ok, long_lines = check_line_length(file_path, max_length=100)
        if not length_ok:
            issues.append(f"–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {long_lines[:3]}{'...' if len(long_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing whitespace
        whitespace_ok, trailing_lines = check_trailing_whitespace(file_path)
        if not whitespace_ok:
            issues.append(f"trailing whitespace: {trailing_lines[:3]}{'...' if len(trailing_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        ending_ok, _ = check_file_ending(file_path)
        if not ending_ok:
            issues.append("–Ω–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ")

        if not issues:
            passed_files += 1
            print(f"  ‚úÖ {file_relative}")
        else:
            print(f"  ‚ö†Ô∏è {file_relative}: {', '.join(issues)}")

    print(f"  üìä Python —Ñ–∞–π–ª—ã: {passed_files}/{total_files} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    return passed_files == total_files

def test_markdown_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Ñ–∞–π–ª–æ–≤...")

    md_files = list(project_root.rglob("*.md"))
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    md_files = [f for f in md_files if not should_skip_file(f)]

    total_files = len(md_files)
    passed_files = 0

    for file_path in md_files:
        file_relative = file_path.relative_to(project_root)
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        if not check_file_encoding(file_path):
            issues.append("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
        length_ok, long_lines = check_line_length(file_path, max_length=120)
        if not length_ok:
            issues.append(f"–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {long_lines[:3]}{'...' if len(long_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing whitespace
        whitespace_ok, trailing_lines = check_trailing_whitespace(file_path)
        if not whitespace_ok:
            issues.append(f"trailing whitespace: {trailing_lines[:3]}{'...' if len(trailing_lines) > 3 else ''}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        ending_ok, _ = check_file_ending(file_path)
        if not ending_ok:
            issues.append("–Ω–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ")

        if not issues:
            passed_files += 1
            print(f"  ‚úÖ {file_relative}")
        else:
            print(f"  ‚ö†Ô∏è {file_relative}: {', '.join(issues)}")

    print(f"  üìä Markdown —Ñ–∞–π–ª—ã: {passed_files}/{total_files} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    return passed_files == total_files

def test_json_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤...")

    json_files = list(project_root.rglob("*.json"))
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    json_files = [f for f in json_files if not should_skip_file(f)]

    total_files = len(json_files)
    passed_files = 0

    for file_path in json_files:
        file_relative = file_path.relative_to(project_root)
        issues = []

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                json.load(f)
            print(f"  ‚úÖ {file_relative}")
            passed_files += 1
        except Exception as e:
            issues.append(f"–Ω–µ–≤–µ—Ä–Ω—ã–π JSON: {str(e)[:50]}")
            print(f"  ‚ùå {file_relative}: {', '.join(issues)}")

    print(f"  üìä JSON —Ñ–∞–π–ª—ã: {passed_files}/{total_files} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    return passed_files == total_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JXCT")
    print("=" * 50)

    tests = [
        ("C++ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_cpp_formatting),
        ("Python —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_python_formatting),
        ("Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_markdown_formatting),
        ("JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_json_formatting)
    ]

    total_tests = len(tests)
    passed_tests = 0

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed_tests += 1
                print(f"  ‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"  ‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"  ‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")

    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests * 100):.1f}%")

    if passed_tests == total_tests:
        print("  üéâ –í–°–ï –¢–ï–°–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print("  ‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–í–ê–õ–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main())
