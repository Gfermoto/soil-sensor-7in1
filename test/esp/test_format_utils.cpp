/**
 * @file test_format_utils.cpp
 * @brief Unit-—Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JXCT (ESP32 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ)
 * @version 1.0.0
 * @date 2025-07-02
 * @author JXCT Development Team
 */

#include <unity.h>
#include <Arduino.h>

// –í–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#include "../src/jxct_format_utils.cpp"
#include "../src/validation_utils.cpp"

// ============================================================================
// –¢–ï–°–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–• –î–ê–¢–ß–ò–ö–û–í
// ============================================================================

void test_format_temperature_value() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    float temp = 25.5f;
    String formatted = formatTemperature(temp);
    
    TEST_ASSERT_TRUE(formatted.length() > 0);
    TEST_ASSERT_TRUE(formatted.indexOf("25.5") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("¬∞C") >= 0);
}

void test_format_ec_value() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏
    int ec = 1500;
    String formatted = formatEC(ec);
    
    TEST_ASSERT_TRUE(formatted.length() > 0);
    TEST_ASSERT_TRUE(formatted.indexOf("1500") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("¬µS/cm") >= 0);
}

void test_format_ph_value() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pH
    float ph = 6.8f;
    String formatted = formatPH(ph);
    
    TEST_ASSERT_TRUE(formatted.length() > 0);
    TEST_ASSERT_TRUE(formatted.indexOf("6.8") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("pH") >= 0);
}

void test_format_npk_values() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NPK –∑–Ω–∞—á–µ–Ω–∏–π
    float N = 120.5f, P = 45.2f, K = 89.7f;
    String formatted = formatNPK(N, P, K);
    
    TEST_ASSERT_TRUE(formatted.length() > 0);
    TEST_ASSERT_TRUE(formatted.indexOf("120.5") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("45.2") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("89.7") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("mg/kg") >= 0);
}

void test_format_moisture_value() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    float moisture = 65.3f;
    String formatted = formatMoisture(moisture);
    
    TEST_ASSERT_TRUE(formatted.length() > 0);
    TEST_ASSERT_TRUE(formatted.indexOf("65.3") >= 0);
    TEST_ASSERT_TRUE(formatted.indexOf("%") >= 0);
}

// ============================================================================
// –¢–ï–°–¢–´ JSON –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

void test_format_json_sensor_data() {
    // –¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    SensorData data;
    data.temperature = 25.5f;
    data.ec = 1500;
    data.ph = 6.8f;
    data.moisture = 65.3f;
    data.N = 120.5f;
    data.P = 45.2f;
    data.K = 89.7f;
    
    String json = formatSensorDataJSON(data);
    
    TEST_ASSERT_TRUE(json.length() > 0);
    TEST_ASSERT_TRUE(json.indexOf("temperature") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("25.5") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("ec") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("1500") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("ph") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("6.8") >= 0);
}

void test_format_json_status() {
    // –¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    String status = "OK";
    int uptime = 3600;
    String json = formatStatusJSON(status, uptime);
    
    TEST_ASSERT_TRUE(json.length() > 0);
    TEST_ASSERT_TRUE(json.indexOf("status") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("OK") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("uptime") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("3600") >= 0);
}

void test_format_json_error() {
    // –¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    String error = "Sensor timeout";
    int code = 500;
    String json = formatErrorJSON(error, code);
    
    TEST_ASSERT_TRUE(json.length() > 0);
    TEST_ASSERT_TRUE(json.indexOf("error") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("Sensor timeout") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("code") >= 0);
    TEST_ASSERT_TRUE(json.indexOf("500") >= 0);
}

// ============================================================================
// –¢–ï–°–¢–´ HTML –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

void test_format_html_table_row() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ HTML —Ç–∞–±–ª–∏—Ü—ã
    String name = "Temperature";
    String value = "25.5¬∞C";
    String unit = "Celsius";
    
    String html = formatHTMLTableRow(name, value, unit);
    
    TEST_ASSERT_TRUE(html.length() > 0);
    TEST_ASSERT_TRUE(html.indexOf("<tr>") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("</tr>") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("Temperature") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("25.5¬∞C") >= 0);
}

void test_format_html_sensor_card() {
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–∞—Ç—á–∏–∫–∞
    String title = "Soil Sensor";
    String status = "Online";
    String lastUpdate = "2025-07-02 12:30:15";
    
    String html = formatHTMLSensorCard(title, status, lastUpdate);
    
    TEST_ASSERT_TRUE(html.length() > 0);
    TEST_ASSERT_TRUE(html.indexOf("card") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("Soil Sensor") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("Online") >= 0);
    TEST_ASSERT_TRUE(html.indexOf("2025-07-02") >= 0);
}

// ============================================================================
// –¢–ï–°–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

void test_validate_number_format() {
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    TEST_ASSERT_TRUE(isValidNumberFormat("123.45"));
    TEST_ASSERT_TRUE(isValidNumberFormat("0"));
    TEST_ASSERT_TRUE(isValidNumberFormat("-25.5"));
    TEST_ASSERT_FALSE(isValidNumberFormat("abc"));
    TEST_ASSERT_FALSE(isValidNumberFormat("12.34.56"));
    TEST_ASSERT_FALSE(isValidNumberFormat(""));
}

void test_validate_json_format() {
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Ñ–æ—Ä–º–∞—Ç–∞
    String validJSON = "{\"temperature\": 25.5, \"status\": \"OK\"}";
    String invalidJSON = "{temperature: 25.5, status: OK}";
    
    TEST_ASSERT_TRUE(isValidJSONFormat(validJSON));
    TEST_ASSERT_FALSE(isValidJSONFormat(invalidJSON));
    TEST_ASSERT_FALSE(isValidJSONFormat(""));
}

void test_validate_html_format() {
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTML —Ñ–æ—Ä–º–∞—Ç–∞
    String validHTML = "<div class=\"test\">Content</div>";
    String invalidHTML = "<div class=\"test\">Content";
    
    TEST_ASSERT_TRUE(isValidHTMLFormat(validHTML));
    TEST_ASSERT_FALSE(isValidHTMLFormat(invalidHTML));
    TEST_ASSERT_FALSE(isValidHTMLFormat(""));
}

// ============================================================================
// –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

void test_format_performance() {
    // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    unsigned long start = millis();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
    for (int i = 0; i < 100; ++i) {
        float temp = 20.0f + i * 0.1f;
        String formatted = formatTemperature(temp);
        TEST_ASSERT_TRUE(formatted.length() > 0);
    }
    
    unsigned long duration = millis() - start;
    
    // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 1000–º—Å –Ω–∞ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
    TEST_ASSERT_TRUE(duration < 1000);
    
    Serial.print("‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ");
    Serial.print(duration);
    Serial.println("–º—Å –¥–ª—è 100 –æ–ø–µ—Ä–∞—Ü–∏–π");
}

void test_json_format_performance() {
    // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    unsigned long start = millis();
    
    SensorData data;
    data.temperature = 25.5f;
    data.ec = 1500;
    data.ph = 6.8f;
    data.moisture = 65.3f;
    data.N = 120.5f;
    data.P = 45.2f;
    data.K = 89.7f;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤
    for (int i = 0; i < 50; ++i) {
        data.temperature += 0.1f;
        String json = formatSensorDataJSON(data);
        TEST_ASSERT_TRUE(json.length() > 0);
    }
    
    unsigned long duration = millis() - start;
    
    // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 2000–º—Å –Ω–∞ 50 –æ–ø–µ—Ä–∞—Ü–∏–π)
    TEST_ASSERT_TRUE(duration < 2000);
    
    Serial.print("‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å JSON: ");
    Serial.print(duration);
    Serial.println("–º—Å –¥–ª—è 50 –æ–ø–µ—Ä–∞—Ü–∏–π");
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

void setUp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
}

void tearDown() {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
}

#ifdef ARDUINO
void setup() {
    Serial.begin(115200);
    delay(2000);
    
    Serial.println("üß™ JXCT Format Utils Testing Started");
    Serial.println("=====================================");
    
    UNITY_BEGIN();
    
    // –¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    RUN_TEST(test_format_temperature_value);
    RUN_TEST(test_format_ec_value);
    RUN_TEST(test_format_ph_value);
    RUN_TEST(test_format_npk_values);
    RUN_TEST(test_format_moisture_value);
    
    // –¢–µ—Å—Ç—ã JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    RUN_TEST(test_format_json_sensor_data);
    RUN_TEST(test_format_json_status);
    RUN_TEST(test_format_json_error);
    
    // –¢–µ—Å—Ç—ã HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    RUN_TEST(test_format_html_table_row);
    RUN_TEST(test_format_html_sensor_card);
    
    // –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    RUN_TEST(test_validate_number_format);
    RUN_TEST(test_validate_json_format);
    RUN_TEST(test_validate_html_format);
    
    // –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    RUN_TEST(test_format_performance);
    RUN_TEST(test_json_format_performance);
    
    UNITY_END();
    
    Serial.println("‚úÖ Format Utils Testing completed");
    Serial.println("–î–æ–±–∞–≤–ª–µ–Ω–æ +15 unit-—Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
}

void loop() {
    // –ü—É—Å—Ç–æ–π —Ü–∏–∫–ª
}

#else
// Native –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
int main() {
    std::cout << "üß™ JXCT Format Utils Testing (Native)" << std::endl;
    
    UNITY_BEGIN();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    RUN_TEST(test_format_temperature_value);
    RUN_TEST(test_format_json_sensor_data);
    RUN_TEST(test_validate_number_format);
    RUN_TEST(test_format_performance);
    
    return UNITY_END();
}
#endif 