/**
 * @file test_simple.cpp
 * @brief –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã JXCT –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
 * @version 1.0.0
 * @date 2025-01-22
 * @author EYERA Development Team
 */

#include <unity.h>

#ifndef ARDUINO
#include <chrono>
#include <fstream>
#include <iostream>

// –í–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#include "../include/jxct_format_utils.h"
#include "../include/logger.h"
#include "../include/sensor_compensation.h"
#include "../include/validation_utils.h"

// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#include "../src/jxct_format_utils.cpp"
#include "../src/sensor_compensation.cpp"
#include "../src/validation_utils.cpp"
#include "../stubs/logger.cpp"
#else
#include <Arduino.h>
#endif

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
struct TestStats
{
    int total = 0;
    int passed = 0;
    int failed = 0;

    void addResult(bool passed)
    {
        total++;
        if (passed)
        {
            this->passed++;
        }
        else
        {
            this->failed++;
        }
    }

    void generateReport()
    {
#ifndef ARDUINO
        std::cout << "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:" << std::endl;
        std::cout << "  –í—Å–µ–≥–æ: " << total << std::endl;
        std::cout << "  –ü—Ä–æ—à–ª–∏: " << passed << std::endl;
        std::cout << "  –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: " << failed << std::endl;
        std::cout << "  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " << (total > 0 ? (passed * 100.0 / total) : 0) << "%" << std::endl;

        // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π JSON –æ—Ç—á—ë—Ç
        std::ofstream report("test_reports/simple-test-report.json");
        if (report.is_open())
        {
            report << "{\n";
            report << "  \"timestamp\": \"2025-01-22T12:00:00Z\",\n";
            report << "  \"project\": \"JXCT Soil Sensor\",\n";
            report << "  \"version\": \"3.6.0\",\n";
            report << "  \"summary\": {\n";
            report << "    \"total\": " << total << ",\n";
            report << "    \"passed\": " << passed << ",\n";
            report << "    \"failed\": " << failed << ",\n";
            report << "    \"success_rate\": " << (total > 0 ? (passed * 100.0 / total) : 0) << "\n";
            report << "  }\n";
            report << "}\n";
            report.close();
            std::cout << "üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: test_reports/simple-test-report.json" << std::endl;
        }
#else
        Serial.print("Tests: ");
        Serial.print(total);
        Serial.print(", Passed: ");
        Serial.print(passed);
        Serial.print(", Failed: ");
        Serial.println(failed);
#endif
    }
};

TestStats g_stats;

// ============================================================================
// UNIT TESTS - –Æ–Ω–∏—Ç —Ç–µ—Å—Ç—ã
// ============================================================================

void test_validateSSID_empty()
{
    auto result = validateSSID("");
    TEST_ASSERT_FALSE(result.isValid);
    g_stats.addResult(result.isValid == false);
}

void test_validateSSID_valid()
{
    auto result = validateSSID("HomeWiFi");
    TEST_ASSERT_TRUE(result.isValid);
    g_stats.addResult(result.isValid == true);
}

void test_validateSSID_too_long()
{
    auto result = validateSSID("VeryLongSSIDNameThatExceedsThirtyTwoCharacters");
    TEST_ASSERT_FALSE(result.isValid);
    g_stats.addResult(result.isValid == false);
}

void test_validatePassword_short()
{
    auto result = validatePassword("1234567");  // 7 symbols
    TEST_ASSERT_FALSE(result.isValid);
    g_stats.addResult(result.isValid == false);
}

void test_validatePassword_ok()
{
    auto result = validatePassword("12345678");
    TEST_ASSERT_TRUE(result.isValid);
    g_stats.addResult(result.isValid == true);
}

void test_validatePassword_complex()
{
    auto result = validatePassword("MySecure123!@#");
    TEST_ASSERT_TRUE(result.isValid);
    g_stats.addResult(result.isValid == true);
}

void test_validateTemperature_bounds()
{
    auto low = validateTemperature(-41.0f);
    auto ok = validateTemperature(25.0f);
    auto high = validateTemperature(85.0f);

    TEST_ASSERT_FALSE(low.isValid);
    TEST_ASSERT_TRUE(ok.isValid);
    TEST_ASSERT_FALSE(high.isValid);

    g_stats.addResult(low.isValid == false && ok.isValid == true && high.isValid == false);
}

void test_validateTemperature_edge_cases()
{
    auto min_valid = validateTemperature(-40.0f);
    auto max_valid = validateTemperature(80.0f);
    auto zero = validateTemperature(0.0f);

    TEST_ASSERT_TRUE(min_valid.isValid);
    TEST_ASSERT_TRUE(max_valid.isValid);
    TEST_ASSERT_TRUE(zero.isValid);

    g_stats.addResult(min_valid.isValid && max_valid.isValid && zero.isValid);
}

// ============================================================================
// SENSOR COMPENSATION TESTS - –¢–µ—Å—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤
// ============================================================================

void test_correctEC_no_change()
{
    float ecRaw = 1500.0f;
    float T = 25.0f;
    float theta = 45.0f;
    float ec = correctEC(ecRaw, T, theta, SoilType::LOAM);

    // –ü—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏
    TEST_ASSERT_FLOAT_WITHIN(100.0f, 1500.0f, ec);
    g_stats.addResult(fabs(ec - 1500.0f) < 100.0f);
}

void test_correctPH_temperature_compensation()
{
    float phRaw = 6.5f;
    float ph_cold = correctPH(phRaw, 15.0f);  // –•–æ–ª–æ–¥–Ω–µ–µ
    float ph_hot = correctPH(phRaw, 35.0f);   // –¢–µ–ø–ª–µ–µ

    // pH –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
    TEST_ASSERT_NOT_EQUAL(phRaw, ph_cold);
    TEST_ASSERT_NOT_EQUAL(phRaw, ph_hot);
    TEST_ASSERT_FLOAT_WITHIN(1.0f, 6.5f, ph_cold);
    TEST_ASSERT_FLOAT_WITHIN(1.0f, 6.5f, ph_hot);

    g_stats.addResult(ph_cold != phRaw && ph_hot != phRaw);
}

void test_correctNPK_basic()
{
    float N = 100.0f, P = 50.0f, K = 80.0f;
    float original_N = N, original_P = P, original_K = K;

    correctNPK(30.0f, 40.0f, N, P, K, SoilType::SAND);

    // –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    TEST_ASSERT_TRUE(N > 0 && N < 200);
    TEST_ASSERT_TRUE(P > 0 && P < 100);
    TEST_ASSERT_TRUE(K > 0 && K < 150);

    g_stats.addResult(N > 0 && N < 200 && P > 0 && P < 100 && K > 0 && K < 150);
}

// ============================================================================
// PERFORMANCE TESTS - –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// ============================================================================

void test_validation_performance()
{
#ifndef ARDUINO
    auto start = std::chrono::high_resolution_clock::now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–π
    for (int i = 0; i < 1000; ++i)
    {
        validateSSID("TestSSID");
        validatePassword("TestPassword123");
        validateTemperature(25.0f + i * 0.01f);
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);

    // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 100–º—Å –Ω–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π)
    TEST_ASSERT_TRUE(duration.count() < 100);
    g_stats.addResult(duration.count() < 100);

    std::cout << "‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " << duration.count() << "ms –¥–ª—è 1000 –æ–ø–µ—Ä–∞—Ü–∏–π" << std::endl;
#else
    // –ù–∞ Arduino –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    TEST_ASSERT_TRUE(validateSSID("Test").isValid);
    g_stats.addResult(true);
#endif
}

void test_compensation_performance()
{
#ifndef ARDUINO
    auto start = std::chrono::high_resolution_clock::now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π
    for (int i = 0; i < 500; ++i)
    {
        float N = 100.0f, P = 50.0f, K = 80.0f;
        correctNPK(25.0f + i * 0.02f, 40.0f + i * 0.01f, N, P, K, SoilType::LOAM);
        correctEC(1500.0f + i, 25.0f + i * 0.02f, 40.0f, SoilType::SAND);
        correctPH(6.5f + i * 0.001f, 25.0f + i * 0.02f);
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);

    // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 50–º—Å –Ω–∞ 500 –∏—Ç–µ—Ä–∞—Ü–∏–π)
    TEST_ASSERT_TRUE(duration.count() < 50);
    g_stats.addResult(duration.count() < 50);

    std::cout << "‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: " << duration.count() << "ms –¥–ª—è 500 –æ–ø–µ—Ä–∞—Ü–∏–π" << std::endl;
#else
    // –ù–∞ Arduino –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    float N = 100.0f, P = 50.0f, K = 80.0f;
    correctNPK(25.0f, 40.0f, N, P, K, SoilType::LOAM);
    TEST_ASSERT_TRUE(N > 0);
    g_stats.addResult(true);
#endif
}

// ============================================================================
// MAIN TEST RUNNER
// ============================================================================

void setUp()
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
}

void tearDown()
{
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
}

#ifndef ARDUINO
int main(int argc, char** argv)
{
    (void)argc;
    (void)argv;

    std::cout << "üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JXCT..." << std::endl;

    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    system("mkdir -p test_reports 2>/dev/null || md test_reports >nul 2>&1");

    UNITY_BEGIN();

    // Unit tests - –≤–∞–ª–∏–¥–∞—Ü–∏—è
    RUN_TEST(test_validateSSID_empty);
    RUN_TEST(test_validateSSID_valid);
    RUN_TEST(test_validateSSID_too_long);
    RUN_TEST(test_validatePassword_short);
    RUN_TEST(test_validatePassword_ok);
    RUN_TEST(test_validatePassword_complex);
    RUN_TEST(test_validateTemperature_bounds);
    RUN_TEST(test_validateTemperature_edge_cases);

    // Sensor compensation tests
    RUN_TEST(test_correctEC_no_change);
    RUN_TEST(test_correctPH_temperature_compensation);
    RUN_TEST(test_correctNPK_basic);

    // Performance tests
    RUN_TEST(test_validation_performance);
    RUN_TEST(test_compensation_performance);

    int result = UNITY_END();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    g_stats.generateReport();

    std::cout << "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" << std::endl;

    return result;
}

#else
// Arduino version
void setup()
{
    Serial.begin(115200);
    delay(2000);

    Serial.println("üß™ JXCT Simple Testing Started");

    UNITY_BEGIN();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ Arduino
    RUN_TEST(test_validateSSID_empty);
    RUN_TEST(test_validateSSID_valid);
    RUN_TEST(test_validatePassword_short);
    RUN_TEST(test_validatePassword_ok);
    RUN_TEST(test_validateTemperature_bounds);
    RUN_TEST(test_correctEC_no_change);
    RUN_TEST(test_correctNPK_basic);
    RUN_TEST(test_validation_performance);
    RUN_TEST(test_compensation_performance);

    UNITY_END();

    g_stats.generateReport();

    Serial.println("‚úÖ Testing completed");
}

void loop()
{
    // –ü—É—Å—Ç–æ–π —Ü–∏–∫–ª
}
#endif
