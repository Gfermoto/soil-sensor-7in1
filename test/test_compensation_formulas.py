#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ EC –∏ NPK
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º—É–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
"""

import math
import sys

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –≤ utf-8 –¥–ª—è Windows
if hasattr(sys.stdout, 'encoding') and sys.stdout.encoding and sys.stdout.encoding.lower() not in ['utf-8', 'utf8']:
    try:
        sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)
    except Exception:
        pass

def test_ec_temperature_compensation():
    """–¢–µ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ EC"""
    print("=== –¢–µ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ EC ===")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: EC25 = ECt / [1 + 0.02 √ó (t - 25)]
    test_cases = [
        (25.0, 1200.0, 1200.0),  # 25¬∞C - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        (30.0, 1200.0, 1200.0 / (1.0 + 0.02 * 5.0)),  # 30¬∞C
        (20.0, 1200.0, 1200.0 / (1.0 + 0.02 * (-5.0))),  # 20¬∞C
        (35.0, 1500.0, 1500.0 / (1.0 + 0.02 * 10.0)),  # 35¬∞C
    ]

    for temp, ec_raw, expected in test_cases:
        # –§–æ—Ä–º—É–ª–∞ –∏–∑ –∫–æ–¥–∞
        ec_25 = ec_raw / (1.0 + 0.02 * (temp - 25.0))

        print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, EC_raw: {ec_raw}, EC_25: {ec_25:.1f}")
        assert abs(ec_25 - expected) < 0.1, f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ EC: {ec_25} != {expected}"

    print("  ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è EC –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

def test_npk_temperature_compensation():
    """–¢–µ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ NPK"""
    print("\n=== –¢–µ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ NPK ===")

    # –§–æ—Ä–º—É–ª—ã –∏–∑ –∫–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
    # N: 1.0 - 0.02 √ó (T - 25)
    # P: 1.0 - 0.015 √ó (T - 25)
    # K: 1.0 - 0.02 √ó (T - 25)

    test_cases = [
        (25.0, 800.0, 800.0, 800.0),  # 25¬∞C - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        (30.0, 800.0, 800.0 * 0.9, 800.0 * 0.925),  # 30¬∞C
        (20.0, 800.0, 800.0 * 1.1, 800.0 * 1.075),  # 20¬∞C
        (35.0, 1000.0, 1000.0 * 0.8, 1000.0 * 0.85),  # 35¬∞C
    ]

    for temp, n_raw, p_raw, k_raw in test_cases:
        # –§–æ—Ä–º—É–ª—ã –∏–∑ –∫–æ–¥–∞
        n_factor = 1.0 - 0.02 * (temp - 25.0)
        p_factor = 1.0 - 0.015 * (temp - 25.0)
        k_factor = 1.0 - 0.02 * (temp - 25.0)

        n_corrected = n_raw * n_factor
        p_corrected = p_raw * p_factor
        k_corrected = k_raw * k_factor

        print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        print(f"    N: {n_raw} ‚Üí {n_corrected:.1f} (—Ñ–∞–∫—Ç–æ—Ä: {n_factor:.3f})")
        print(f"    P: {p_raw} ‚Üí {p_corrected:.1f} (—Ñ–∞–∫—Ç–æ—Ä: {p_factor:.3f})")
        print(f"    K: {k_raw} ‚Üí {k_corrected:.1f} (—Ñ–∞–∫—Ç–æ—Ä: {k_factor:.3f})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É: –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NPK —Å–Ω–∏–∂–∞–µ—Ç—Å—è
        if temp > 25.0:
            assert n_factor < 1.0, f"N —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 1.0 –ø—Ä–∏ T > 25¬∞C"
            assert p_factor < 1.0, f"P —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 1.0 –ø—Ä–∏ T > 25¬∞C"
            assert k_factor < 1.0, f"K —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 1.0 –ø—Ä–∏ T > 25¬∞C"
        elif temp < 25.0:
            assert n_factor > 1.0, f"N —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1.0 –ø—Ä–∏ T < 25¬∞C"
            assert p_factor > 1.0, f"P —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1.0 –ø—Ä–∏ T < 25¬∞C"
            assert k_factor > 1.0, f"K —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1.0 –ø—Ä–∏ T < 25¬∞C"

    print("  ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è NPK –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

def test_npk_humidity_compensation():
    """–¢–µ—Å—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ NPK"""
    print("\n=== –¢–µ—Å—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ NPK ===")

    # –§–æ—Ä–º—É–ª–∞ –∏–∑ –∫–æ–¥–∞: 1.0 + 0.05 √ó (humidity - fieldCapacity) / fieldCapacity
    # –ü–æ–ª–µ–≤–∞—è –≤–ª–∞–≥–æ–µ–º–∫–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—á–≤
    field_capacities = {
        'sand': 0.10,      # 10%
        'loam': 0.20,      # 20%
        'clay': 0.35,      # 35%
        'peat': 0.45,      # 45%
    }

    test_cases = [
        ('loam', 20.0, 1.0),      # –í–ª–∞–∂–Ω–æ—Å—Ç—å = –ø–æ–ª–µ–≤–∞—è –≤–ª–∞–≥–æ–µ–º–∫–æ—Å—Ç—å
        ('loam', 25.0, 1.0125),   # –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤—ã—à–µ (5% * 5/20 = 0.0125)
        ('loam', 15.0, 0.9875),   # –í–ª–∞–∂–Ω–æ—Å—Ç—å –Ω–∏–∂–µ (5% * -5/20 = -0.0125)
        ('clay', 35.0, 1.0),      # –í–ª–∞–∂–Ω–æ—Å—Ç—å = –ø–æ–ª–µ–≤–∞—è –≤–ª–∞–≥–æ–µ–º–∫–æ—Å—Ç—å
        ('clay', 40.0, 1.0071),   # –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤—ã—à–µ (5% * 5/35 = 0.0071)
    ]

    for soil_type, humidity, expected_factor in test_cases:
        field_capacity = field_capacities[soil_type]
        field_capacity_percent = field_capacity * 100.0

        # –§–æ—Ä–º—É–ª–∞ –∏–∑ –∫–æ–¥–∞
        humidity_factor = 1.0 + 0.05 * (humidity - field_capacity_percent) / field_capacity_percent

        print(f"  –ü–æ—á–≤–∞: {soil_type}, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, –ø–æ–ª–µ–≤–∞—è –≤–ª–∞–≥–æ–µ–º–∫–æ—Å—Ç—å: {field_capacity_percent}%")
        print(f"    –§–∞–∫—Ç–æ—Ä –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: {humidity_factor:.4f}")

        assert abs(humidity_factor - expected_factor) < 0.01, f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: {humidity_factor} != {expected_factor}"

    print("  ‚úÖ –í–ª–∞–∂–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è NPK –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

def test_archie_model():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –ê—Ä—á–∏"""
    print("\n=== –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –ê—Ä—á–∏ ===")

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –∫–æ–¥–∞
    archie_coeffs = {
        'sand': {'m': 1.3, 'n': 2.0},
        'loam': {'m': 1.5, 'n': 2.0},
        'clay': {'m': 2.0, 'n': 2.5},
        'peat': {'m': 1.8, 'n': 2.2},
    }

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    ec_25 = 1200.0
    temp = 30.0
    humidity = 25.0  # 25%
    field_capacity = 20.0  # 20%

    for soil_type, coeffs in archie_coeffs.items():
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        temp_factor = 1.0 / (1.0 + 0.02 * (temp - 25.0))

        # –í–ª–∞–∂–Ω–æ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        humidity_factor = 1.0 + 0.01 * (humidity - field_capacity)

        # –ú–æ–¥–µ–ª—å –ê—Ä—á–∏: EC = EC0 √ó (Œ∏/Œ∏0)^m √ó (T/T0)^n
        ec_corrected = ec_25 * pow(humidity_factor, coeffs['m']) * pow(temp_factor, coeffs['n'])

        print(f"  –ü–æ—á–≤–∞: {soil_type}")
        print(f"    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: m={coeffs['m']}, n={coeffs['n']}")
        print(f"    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {temp_factor:.3f}")
        print(f"    –í–ª–∞–∂–Ω–æ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: {humidity_factor:.3f}")
        print(f"    EC —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {ec_corrected:.1f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É: –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã EC –¥–æ–ª–∂–µ–Ω —Å–Ω–∏–∂–∞—Ç—å—Å—è
        assert temp_factor < 1.0, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 1.0 –ø—Ä–∏ T > 25¬∞C"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑—É–º–Ω—ã–π
        assert 800.0 < ec_corrected < 2000.0, f"EC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö: {ec_corrected}"

    print("  ‚úÖ –ú–æ–¥–µ–ª—å –ê—Ä—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_real_world_scenarios():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("\n=== –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===")

    scenarios = [
        {
            'name': '–¢–æ–º–∞—Ç—ã –≤ —Ç–µ–ø–ª–∏—Ü–µ –ª–µ—Ç–æ–º',
            'temp': 30.0,
            'humidity': 35.0,
            'soil_type': 'loam',
            'ec_raw': 1500.0,
            'n_raw': 1200.0,
            'p_raw': 600.0,
            'k_raw': 1500.0,
        },
        {
            'name': '–û–≥—É—Ä—Ü—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≥—Ä—É–Ω—Ç–µ –≤–µ—Å–Ω–æ–π',
            'temp': 15.0,
            'humidity': 25.0,
            'soil_type': 'loam',
            'ec_raw': 1200.0,
            'n_raw': 1000.0,
            'p_raw': 500.0,
            'k_raw': 1200.0,
        },
    ]

    for scenario in scenarios:
        print(f"\n  –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")

        # EC –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        temp_factor_ec = 1.0 / (1.0 + 0.02 * (scenario['temp'] - 25.0))
        ec_25 = scenario['ec_raw'] * temp_factor_ec

        # NPK –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
        temp_factor_n = 1.0 - 0.02 * (scenario['temp'] - 25.0)
        temp_factor_p = 1.0 - 0.015 * (scenario['temp'] - 25.0)
        temp_factor_k = 1.0 - 0.02 * (scenario['temp'] - 25.0)

        field_capacity = 20.0  # –¥–ª—è —Å—É–≥–ª–∏–Ω–∫–∞
        humidity_factor = 1.0 + 0.05 * (scenario['humidity'] - field_capacity) / field_capacity

        n_corrected = scenario['n_raw'] * temp_factor_n * humidity_factor
        p_corrected = scenario['p_raw'] * temp_factor_p * humidity_factor
        k_corrected = scenario['k_raw'] * temp_factor_k * humidity_factor

        print(f"    EC: {scenario['ec_raw']} ‚Üí {ec_25:.1f} ¬µS/cm")
        print(f"    N: {scenario['n_raw']} ‚Üí {n_corrected:.1f} –º–≥/–∫–≥")
        print(f"    P: {scenario['p_raw']} ‚Üí {p_corrected:.1f} –º–≥/–∫–≥")
        print(f"    K: {scenario['k_raw']} ‚Üí {k_corrected:.1f} –º–≥/–∫–≥")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        assert 800.0 < ec_25 < 3000.0, f"EC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è –æ–≤–æ—â–µ–π: {ec_25}"
        assert 600.0 < n_corrected < 2000.0, f"N –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: {n_corrected}"
        assert 300.0 < p_corrected < 1000.0, f"P –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: {p_corrected}"
        assert 800.0 < k_corrected < 2000.0, f"K –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: {k_corrected}"

    print("  ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∞—é—Ç —Ä–∞–∑—É–º–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–û–†–ú–£–õ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò")
    print("=" * 50)

    try:
        test_ec_temperature_compensation()
        test_npk_temperature_compensation()
        test_npk_humidity_compensation()
        test_archie_model()
        test_real_world_scenarios()

        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üìä –§–æ—Ä–º—É–ª—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        print("   ‚Ä¢ EC: USDA, Hanna, Horiba —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
        print("   ‚Ä¢ NPK: FAO 56, Soil Science Society, European Journal")
        print("   ‚Ä¢ Archie: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—á–≤")

    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
