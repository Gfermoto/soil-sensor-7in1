/**
 * @file modbus_sensor.cpp
 * @brief –†–∞–±–æ—Ç–∞ —Å Modbus-–¥–∞—Ç—á–∏–∫–æ–º JXCT
 * @details –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∑–∞–¥–∞—á –¥–ª—è –æ–ø—Ä–æ—Å–∞ –¥–∞—Ç—á–∏–∫–∞ –ø–æ Modbus RTU, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–µ–π
 * –ø–µ—Ä–µ–¥–∞—á–∏.
 */
#include <Arduino.h>
#include "modbus_sensor.h"
#include "jxct_device_info.h"
#include "jxct_config_vars.h"
#include "debug.h"  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å–ª–æ–≤–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
#include "logger.h"
#include "jxct_constants.h"  // ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

ModbusMaster modbus;
SensorData sensorData;
SensorCache sensorCache;
String sensorLastError = "";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–∏–Ω—ã –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç jxct_constants.h
#define RX_PIN MODBUS_RX_PIN
#define TX_PIN MODBUS_TX_PIN
#define DE_PIN MODBUS_DE_PIN
#define RE_PIN MODBUS_RE_PIN

void debugPrintBuffer(const char* prefix, uint8_t* buffer, size_t length)
{
    if (currentLogLevel < LOG_DEBUG) return;

    String hex_str = "";
    for (size_t i = 0; i < length; i++)
    {
        if (buffer[i] < 0x10) hex_str += "0";
        hex_str += String(buffer[i], HEX);
        hex_str += " ";
    }
    logDebug("%s%s", prefix, hex_str.c_str());
}

void testMAX485()
{
    logSystem("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MAX485 ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–æ–≤
    logSystem("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–æ–≤ –¥–æ —Ç–µ—Å—Ç–∞:");
    logSystem("  DE_PIN (%d): %d", DE_PIN, digitalRead(DE_PIN));
    logSystem("  RE_PIN (%d): %d", RE_PIN, digitalRead(RE_PIN));
    
    // –†–µ–∂–∏–º –ø–µ—Ä–µ–¥–∞—á–∏
    logSystem("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥–∞—á–∏...");
    digitalWrite(DE_PIN, HIGH);   // DE=HIGH –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    digitalWrite(RE_PIN, HIGH);   // RE=HIGH –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è TX)
    delay(10);  // –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É
    logSystem("  DE_PIN (%d): %d", DE_PIN, digitalRead(DE_PIN));
    logSystem("  RE_PIN (%d): %d", RE_PIN, digitalRead(RE_PIN));
    
    // –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞
    logSystem("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–π—Ç–∞ 0x55...");
    Serial2.write(0x55);
    Serial2.flush();
    logSystem("–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
    // –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞
    logSystem("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø—Ä–∏–µ–º–∞...");
    digitalWrite(DE_PIN, LOW);    // DE=LOW –¥–ª—è –ø—Ä–∏–µ–º–∞
    digitalWrite(RE_PIN, LOW);    // RE=LOW –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º
    delay(100);  // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
    logSystem("  DE_PIN (%d): %d", DE_PIN, digitalRead(DE_PIN));
    logSystem("  RE_PIN (%d): %d", RE_PIN, digitalRead(RE_PIN));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (Serial2.available())
    {
        String response = "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ";
        while (Serial2.available())
        {
            response += String(Serial2.read(), HEX) + " ";
        }
        logSuccess("%s", response.c_str());
    }
    else
    {
        logWarn("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç MAX485 (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ –¥–∞—Ç—á–∏–∫–∞)");
    }
    
    logSystem("=== –¢–ï–°–¢ MAX485 –ó–ê–í–ï–†–®–ï–ù ===");
}

void setupModbus()
{
    logPrintHeader("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MODBUS", COLOR_CYAN);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–Ω—ã
    logSystem("RX_PIN: %d, TX_PIN: %d", RX_PIN, TX_PIN);
    logSystem("DE_PIN: %d, RE_PIN: %d", DE_PIN, RE_PIN);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MAX485
    logSystem("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ MAX485...");
    pinMode(DE_PIN, OUTPUT);
    pinMode(RE_PIN, OUTPUT);
    digitalWrite(DE_PIN, LOW);  // –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞
    digitalWrite(RE_PIN, LOW);  // –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞
    logSuccess("–ü–∏–Ω—ã MAX485 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");

    // üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    // –°–∫–æ—Ä–æ—Å—Ç—å: 9600 bps, –ß–µ—Ç–Ω–æ—Å—Ç—å: 8N1, –ê–¥—Ä–µ—Å: 1
    logSystem("üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –†–ê–ë–û–ß–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í JXCT:");
    logSystem("   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: 9600 bps, 8N1, –∞–¥—Ä–µ—Å 1");
    Serial2.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);  // –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´!
    delay(100);  // –û–¢–ö–ê–¢: –ö—Ä–∏—Ç–∏—á–Ω—ã–π timing –¥–ª—è Serial2
    logSystem("Serial2.available() –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %d", Serial2.available());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModbusMaster —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
    logSystem("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModbusMaster (–∞–¥—Ä–µ—Å 1)...");
    modbus.begin(1, Serial2);
    
    // –ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ô–ú–ê–£–¢–û–í (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è ESP32!)
    logSystem("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ ModbusMaster...");
    
    // –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–∞–π–º–∞—É—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    logSystem("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ModbusMaster");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞—á–∏
    modbus.preTransmission(preTransmission);
    modbus.postTransmission(postTransmission);
    logSuccess("ModbusMaster –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ 9600 –±–æ–¥, 8N1");

    logPrintHeader("MODBUS –ì–û–¢–û–í –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", COLOR_GREEN);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ CRC16 Modbus
uint16_t calculateCRC16(uint8_t* data, size_t length)
{
    uint16_t crc = 0xFFFF;

    for (size_t i = 0; i < length; i++)
    {
        crc ^= (uint16_t)data[i];
        for (int j = 0; j < 8; j++)
        {
            if (crc & 0x0001)
            {
                crc = (crc >> 1) ^ 0xA001;
            }
            else
            {
                crc = crc >> 1;
            }
        }
    }

    return crc;
}

bool validateSensorData(SensorData& data)
{
    if (data.temperature < MIN_TEMPERATURE || data.temperature > MAX_TEMPERATURE) return false;
    if (data.humidity < MIN_HUMIDITY || data.humidity > MAX_HUMIDITY) return false;
    if (data.ec < MIN_EC || data.ec > MAX_EC) return false;
    if (data.ph < MIN_PH || data.ph > MAX_PH) return false;
    if (data.nitrogen < MIN_NPK || data.nitrogen > MAX_NPK) return false;
    if (data.phosphorus < MIN_NPK || data.phosphorus > MAX_NPK) return false;
    if (data.potassium < MIN_NPK || data.potassium > MAX_NPK) return false;
    return true;
}

bool getCachedData(SensorData& data)
{
    if (!sensorCache.is_valid) return false;
    if (millis() - sensorCache.timestamp > MODBUS_CACHE_TIMEOUT) return false;

    data = sensorCache.data;
    return true;
}

bool readFirmwareVersion()
{
    logSensor("–ó–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞...");
    uint8_t result = modbus.readHoldingRegisters(0x07, 1);

    if (result == modbus.ku8MBSuccess)
    {
        uint16_t version = modbus.getResponseBuffer(0);
        logSuccess("–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞: %d.%d", (version >> 8) & 0xFF, version & 0xFF);
        return true;
    }
    else
    {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏: %d", result);
        printModbusError(result);
        return false;
    }
}

bool readErrorStatus()
{
    uint8_t result = modbus.readHoldingRegisters(REG_ERROR_STATUS, 1);
    if (result == modbus.ku8MBSuccess)
    {
        sensorData.error_status = modbus.getResponseBuffer(0);
        return true;
    }
    return false;
}

bool changeDeviceAddress(uint8_t new_address)
{
    if (new_address < 1 || new_address > 247) return false;

    uint8_t result = modbus.writeSingleRegister(REG_DEVICE_ADDRESS, new_address);
    if (result == modbus.ku8MBSuccess)
    {
        // ‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ vTaskDelay
        delay(100);  // –û–¢–ö–ê–¢: –ö—Ä–∏—Ç–∏—á–Ω—ã–π timing –¥–ª—è Modbus
        modbus.begin(new_address, Serial2);
        return true;
    }
    return false;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Modbus —Å–≤—è–∑–∏
bool testModbusConnection()
{
    logSensor("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MODBUS –°–í–Ø–ó–ò ===");
    
    // –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏
    logSystem("–¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏ (–∞–¥—Ä–µ—Å 0x07)...");
    uint8_t result = modbus.readHoldingRegisters(0x07, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t version = modbus.getResponseBuffer(0);
        logSuccess("‚úÖ Modbus —Å–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä—Å–∏—è: %d.%d", (version >> 8) & 0xFF, version & 0xFF);
        return true;
    } else {
        logError("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: %d", result);
        printModbusError(result);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    logSystem("–¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x%04X (pH)...", REG_PH);
    result = modbus.readHoldingRegisters(REG_PH, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t value = modbus.getResponseBuffer(0);
        logSuccess("‚úÖ pH —Ä–µ–≥–∏—Å—Ç—Ä —á–∏—Ç–∞–µ—Ç—Å—è! –ó–Ω–∞—á–µ–Ω–∏–µ: %d", value);
        return true;
    } else {
        logError("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pH: %d", result);
        printModbusError(result);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏–Ω–æ–≤ DE/RE
    logSystem("–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∏–Ω–æ–≤...");
    logSystem("DE_PIN: %d, RE_PIN: %d", DE_PIN, RE_PIN);
    logSystem("DE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %d, RE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %d", digitalRead(DE_PIN), digitalRead(RE_PIN));
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Serial2
    logSystem("–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Serial2...");
    logSystem("Serial2 –¥–æ—Å—Ç—É–ø–µ–Ω: %s", Serial2.available() ? "–î–ê" : "–ù–ï–¢");
    
    return false;
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ù–ò–ñ–ï–ù–ò–Ø –¶–ò–ö–õ–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–õ–û–ñ–ù–û–°–¢–ò
// ============================================================================

/**
 * @brief –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param reg_addr –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞
 * @param reg_name –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param multiplier –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 * @param target –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @param is_float –§–ª–∞–≥ - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∫ float –∏–ª–∏ int
 * @return true –µ—Å–ª–∏ —á—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
 */
bool readSingleRegister(uint16_t reg_addr, const char* reg_name, float multiplier, void* target, bool is_float)
{
    logDebug("–ß—Ç–µ–Ω–∏–µ %s (0x%04X)...", reg_name, reg_addr);
    uint8_t result = modbus.readHoldingRegisters(reg_addr, 1);
    
    if (result == modbus.ku8MBSuccess)
    {
        uint16_t raw_value = modbus.getResponseBuffer(0);
        
        if (is_float)
        {
            float* float_target = static_cast<float*>(target);
            *float_target = convertRegisterToFloat(raw_value, multiplier);
            logDebug("%s: %.2f", reg_name, *float_target);
        }
        else
        {
            uint16_t* int_target = static_cast<uint16_t*>(target);
            *int_target = raw_value;
            logDebug("%s: %d", reg_name, *int_target);
        }
        return true;
    }
    else
    {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %d", reg_name, result);
        printModbusError(result);
        return false;
    }
}

/**
 * @brief –ß—Ç–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, pH, EC)
 * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
int readBasicParameters()
{
    int success_count = 0;
    
    // pH (√∑ 100)
    if (readSingleRegister(REG_PH, "pH", 0.01f, &sensorData.ph, true))
        success_count++;
    
    // –í–ª–∞–∂–Ω–æ—Å—Ç—å (√∑ 10)
    if (readSingleRegister(REG_SOIL_MOISTURE, "–í–ª–∞–∂–Ω–æ—Å—Ç—å", 0.1f, &sensorData.humidity, true))
        success_count++;
    
    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (√∑ 10)
    if (readSingleRegister(REG_SOIL_TEMP, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1f, &sensorData.temperature, true))
        success_count++;
    
    // EC (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è)
    if (readSingleRegister(REG_CONDUCTIVITY, "EC", 1.0f, &sensorData.ec, true))
        success_count++;
    
    return success_count;
}

/**
 * @brief –ß—Ç–µ–Ω–∏–µ NPK –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∞–∑–æ—Ç, —Ñ–æ—Å—Ñ–æ—Ä, –∫–∞–ª–∏–π)
 * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
int readNPKParameters()
{
    int success_count = 0;
    
    // –ê–∑–æ—Ç
    if (readSingleRegister(REG_NITROGEN, "–ê–∑–æ—Ç", 1.0f, &sensorData.nitrogen, true))
        success_count++;
    
    // –§–æ—Å—Ñ–æ—Ä
    if (readSingleRegister(REG_PHOSPHORUS, "–§–æ—Å—Ñ–æ—Ä", 1.0f, &sensorData.phosphorus, true))
        success_count++;
    
    // –ö–∞–ª–∏–π
    if (readSingleRegister(REG_POTASSIUM, "–ö–∞–ª–∏–π", 1.0f, &sensorData.potassium, true))
        success_count++;
    
    return success_count;
}

/**
 * @brief –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
 * @param success –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
void finalizeSensorData(bool success)
{
    sensorData.valid = success;
    sensorData.last_update = millis();

    if (success)
    {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä—ã —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        addToMovingAverage(sensorData, sensorData.temperature, sensorData.humidity, 
                          sensorData.ec, sensorData.ph, sensorData.nitrogen, 
                          sensorData.phosphorus, sensorData.potassium);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (validateSensorData(sensorData))
        {
            logSuccess("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏ –≤–∞–ª–∏–¥–Ω—ã");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            sensorCache.data = sensorData;
            sensorCache.timestamp = millis();
            sensorCache.is_valid = true;
        }
        else
        {
            logWarn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é");
            sensorData.valid = false;
        }
    }
    else
    {
        logError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        sensorData.valid = false;
    }
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ß–¢–ï–ù–ò–Ø –î–ê–¢–ß–ò–ö–ê (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì)
// ============================================================================

void readSensorData()
{
    logSensor("–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JXCT 7-–≤-1 –¥–∞—Ç—á–∏–∫–∞...");

    // –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    int basic_success = readBasicParameters();
    
    // –ß–∏—Ç–∞–µ–º NPK –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    int npk_success = readNPKParameters();
    
    // –û–±—â–∏–π —É—Å–ø–µ—Ö - –≤—Å–µ 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
    bool total_success = (basic_success == 4) && (npk_success == 3);
    
    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    finalizeSensorData(total_success);
}

float convertRegisterToFloat(uint16_t value, float multiplier)
{
    return value * multiplier;
}

void preTransmission()
{
    DEBUG_PRINTLN("Modbus TX —Ä–µ–∂–∏–º");
    digitalWrite(DE_PIN, HIGH);  // DE=HIGH –≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É
    digitalWrite(RE_PIN, HIGH);  // RE=HIGH –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º (–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏)
    delayMicroseconds(50);  // ‚úÖ –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è Modbus
}

void postTransmission()
{
    delayMicroseconds(50);  // ‚úÖ –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è Modbus
    digitalWrite(DE_PIN, LOW);   // DE=LOW –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É
    digitalWrite(RE_PIN, LOW);   // RE=LOW –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞—Ç—á–∏–∫–∞!)
    DEBUG_PRINTLN("Modbus RX —Ä–µ–∂–∏–º");
}

// ‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ —Å –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
void realSensorTask(void* pvParameters)
{
    logPrintHeader("–ü–†–û–°–¢–û–ï –ß–¢–ï–ù–ò–ï –î–ê–¢–ß–ò–ö–ê JXCT", COLOR_CYAN);
    logSystem("üî• –ò—Å–ø–æ–ª—å–∑—É—é –†–ê–ë–û–ß–ò–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: 9600 bps, 8N1, –∞–¥—Ä–µ—Å 1");
    logSystem("üìä –§—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –¥–∞—Ç—á–∏–∫–∞");
    
    for (;;) {
        // –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç—á–∏–∫–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        readSensorData(); 
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á—Ç–µ–Ω–∏—è–º–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –≤ config –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        vTaskDelay(pdMS_TO_TICKS(config.sensorReadInterval));
    }
}

void startRealSensorTask()
{
    xTaskCreate(realSensorTask, "RealSensor", 4096, NULL, 1, NULL);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ Modbus
void printModbusError(uint8_t errNum)
{
    switch (errNum)
    {
        case ModbusMaster::ku8MBSuccess:
            logSuccess("Modbus –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
            break;
        case ModbusMaster::ku8MBIllegalFunction:
            logError("Modbus: Illegal Function Exception");
            break;
        case ModbusMaster::ku8MBIllegalDataAddress:
            logError("Modbus: Illegal Data Address Exception");
            break;
        case ModbusMaster::ku8MBIllegalDataValue:
            logError("Modbus: Illegal Data Value Exception");
            break;
        case ModbusMaster::ku8MBSlaveDeviceFailure:
            logError("Modbus: Slave Device Failure");
            break;
        case ModbusMaster::ku8MBInvalidSlaveID:
            logError("Modbus: Invalid Slave ID");
            break;
        case ModbusMaster::ku8MBInvalidFunction:
            logError("Modbus: Invalid Function");
            break;
        case ModbusMaster::ku8MBResponseTimedOut:
            logError("Modbus: Response Timed Out");
            break;
        case ModbusMaster::ku8MBInvalidCRC:
            logError("Modbus: Invalid CRC");
            break;
        default:
            logError("Modbus: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ %d", errNum);
            break;
    }
}

// ========================================
// v2.3.0: –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–û–õ–¨–ó–Ø–©–ï–ì–û –°–†–ï–î–ù–ï–ì–û
// ========================================

void initMovingAverageBuffers(SensorData& data)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä—ã –Ω—É–ª—è–º–∏
    for (int i = 0; i < 15; i++) {
        data.temp_buffer[i] = 0.0;
        data.hum_buffer[i] = 0.0;
        data.ec_buffer[i] = 0.0;
        data.ph_buffer[i] = 0.0;
        data.n_buffer[i] = 0.0;
        data.p_buffer[i] = 0.0;
        data.k_buffer[i] = 0.0;
    }
    data.buffer_index = 0;
    data.buffer_filled = 0;
    DEBUG_PRINTLN("[MOVING_AVG] –ë—É—Ñ–µ—Ä—ã —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
}

void addToMovingAverage(SensorData& data, float temp, float hum, float ec, float ph, float n, float p, float k)
{
    uint8_t window_size = config.movingAverageWindow;
    if (window_size < 5) window_size = 5;     // –ú–∏–Ω–∏–º—É–º 5
    if (window_size > 15) window_size = 15;   // –ú–∞–∫—Å–∏–º—É–º 15
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª—å—Ü–µ–≤—ã–µ –±—É—Ñ–µ—Ä—ã
    data.temp_buffer[data.buffer_index] = temp;
    data.hum_buffer[data.buffer_index] = hum;
    data.ec_buffer[data.buffer_index] = ec;
    data.ph_buffer[data.buffer_index] = ph;
    data.n_buffer[data.buffer_index] = n;
    data.p_buffer[data.buffer_index] = p;
    data.k_buffer[data.buffer_index] = k;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å (–∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä)
    data.buffer_index = (data.buffer_index + 1) % window_size;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (data.buffer_filled < window_size) {
        data.buffer_filled++;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω (–º–∏–Ω–∏–º—É–º 3 –∑–Ω–∞—á–µ–Ω–∏—è)
    if (data.buffer_filled >= 3) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        uint8_t effective_window = (data.buffer_filled < window_size) ? data.buffer_filled : window_size;
        
        data.temperature = calculateMovingAverage(data.temp_buffer, effective_window, data.buffer_filled);
        data.humidity = calculateMovingAverage(data.hum_buffer, effective_window, data.buffer_filled);
        data.ec = calculateMovingAverage(data.ec_buffer, effective_window, data.buffer_filled);
        data.ph = calculateMovingAverage(data.ph_buffer, effective_window, data.buffer_filled);
        data.nitrogen = calculateMovingAverage(data.n_buffer, effective_window, data.buffer_filled);
        data.phosphorus = calculateMovingAverage(data.p_buffer, effective_window, data.buffer_filled);
        data.potassium = calculateMovingAverage(data.k_buffer, effective_window, data.buffer_filled);
        
        DEBUG_PRINTF("[MOVING_AVG] –û–∫–Ω–æ=%d, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ=%d, –¢–µ–º–ø=%.1f¬∞C\n", effective_window, data.buffer_filled, data.temperature);
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        data.temperature = temp;
        data.humidity = hum;
        data.ec = ec;
        data.ph = ph;
        data.nitrogen = n;
        data.phosphorus = p;
        data.potassium = k;
        
        DEBUG_PRINTF("[MOVING_AVG] –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: %d/%d\n", data.buffer_filled, window_size);
    }
}

float calculateMovingAverage(float* buffer, uint8_t window_size, uint8_t filled)
{
    if (filled == 0) return 0.0;
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ filled —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏–ª–∏ window_size, –µ—Å–ª–∏ filled >= window_size)
    uint8_t elements_to_use = (filled < window_size) ? filled : window_size;
    
    // v2.4.1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (—Å—Ä–µ–¥–Ω–µ–µ –∏–ª–∏ –º–µ–¥–∏–∞–Ω–∞)
    extern Config config;
    
    if (config.filterAlgorithm == 1) {  // FILTER_ALGORITHM_MEDIAN
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã
        float temp_values[15];  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        for (uint8_t i = 0; i < elements_to_use; i++) {
            temp_values[i] = buffer[i];
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–Ω—ã
        for (uint8_t i = 0; i < elements_to_use - 1; i++) {
            for (uint8_t j = 0; j < elements_to_use - i - 1; j++) {
                if (temp_values[j] > temp_values[j + 1]) {
                    float temp = temp_values[j];
                    temp_values[j] = temp_values[j + 1];
                    temp_values[j + 1] = temp;
                }
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–¥–∏–∞–Ω—É
        if (elements_to_use % 2 == 0) {
            return (temp_values[elements_to_use/2 - 1] + temp_values[elements_to_use/2]) / 2.0f;
        } else {
            return temp_values[elements_to_use/2];
        }
    } else {
        // FILTER_ALGORITHM_MEAN (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        float sum = 0.0;
        for (uint8_t i = 0; i < elements_to_use; i++) {
            sum += buffer[i];
        }
        return sum / elements_to_use;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
SensorData getSensorData() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
    SensorData result = sensorData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ isValid –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    result.isValid = result.valid;
    result.timestamp = result.last_update;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    result.conductivity = result.ec;
    result.moisture = result.humidity;
    
    return result;
}