/**
 * @file modbus_sensor.cpp
 * @brief –†–∞–±–æ—Ç–∞ —Å Modbus-–¥–∞—Ç—á–∏–∫–æ–º JXCT
 * @details –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∑–∞–¥–∞—á –¥–ª—è –æ–ø—Ä–æ—Å–∞ –¥–∞—Ç—á–∏–∫–∞ –ø–æ Modbus RTU, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–µ–π –ø–µ—Ä–µ–¥–∞—á–∏.
 */
#include <Arduino.h>
#include "modbus_sensor.h"
#include "jxct_device_info.h"
#include "jxct_config_vars.h"
#include "logger.h"

ModbusMaster modbus;
SensorData sensorData;
SensorCache sensorCache;
String sensorLastError = "";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç—á–∏–∫–æ–º
const unsigned long CACHE_TIMEOUT = 5000;  // 5 —Å–µ–∫—É–Ω–¥
const uint8_t MAX_RETRIES = 3;            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á—Ç–µ–Ω–∏—è
const unsigned long RETRY_DELAY = 1000;    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∏–Ω—ã –¥–ª—è DE –∏ RE
#define DE_PIN 4
#define RE_PIN 5

void debugPrintBuffer(const char* prefix, uint8_t* buffer, size_t length) {
    if (currentLogLevel < LOG_DEBUG) return;
    
    String hex_str = "";
    for(size_t i = 0; i < length; i++) {
        if(buffer[i] < 0x10) hex_str += "0";
        hex_str += String(buffer[i], HEX);
        hex_str += " ";
    }
    logDebug("%s%s", prefix, hex_str.c_str());
}

void testMAX485() {
    logDebug("–¢–µ—Å—Ç MAX485...");
    digitalWrite(DE_PIN, HIGH);
    digitalWrite(RE_PIN, HIGH);
    delay(2);
    Serial2.write(0x55);
    Serial2.flush();
    digitalWrite(DE_PIN, LOW);
    digitalWrite(RE_PIN, LOW);
    delay(1000);
    if (Serial2.available()) {
        String response = "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ";
        while (Serial2.available()) {
            response += String(Serial2.read(), HEX) + " ";
        }
        logDebug("%s", response.c_str());
    } else {
        logDebug("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç MAX485");
    }
}

void setupModbus() {
    logPrintHeader("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MODBUS", COLOR_CYAN);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–Ω—ã
    logSystem("RX_PIN: %d, TX_PIN: %d", RX_PIN, TX_PIN);
    logSystem("DE_PIN: %d, RE_PIN: %d", DE_PIN, RE_PIN);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MAX485
    logSystem("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ MAX485...");
    pinMode(DE_PIN, OUTPUT);
    pinMode(RE_PIN, OUTPUT);
    digitalWrite(DE_PIN, LOW);  // –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞
    digitalWrite(RE_PIN, LOW);  // –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞
    logSuccess("–ü–∏–Ω—ã MAX485 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Serial2 –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ 9600 (–∏–∑ –ø—Ä–∏–º–µ—Ä–∞)
    logSystem("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serial2 –Ω–∞ 9600 –±–æ–¥...");
    Serial2.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
    delay(100);
    logSuccess("Serial2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModbusMaster —Å –∞–¥—Ä–µ—Å–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 1
    logSystem("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModbusMaster...");
    modbus.begin(1, Serial2);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DE/RE
    modbus.preTransmission(preTransmission);
    modbus.postTransmission(postTransmission);
    
    logSuccess("ModbusMaster –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    logPrintSeparator("‚îÄ", 60);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ CRC16 Modbus
uint16_t calculateCRC16(uint8_t* data, size_t length) {
    uint16_t crc = 0xFFFF;
    
    for (size_t i = 0; i < length; i++) {
        crc ^= (uint16_t)data[i];
        for (int j = 0; j < 8; j++) {
            if (crc & 0x0001) {
                crc = (crc >> 1) ^ 0xA001;
            } else {
                crc = crc >> 1;
            }
        }
    }
    
    return crc;
}

bool validateSensorData(SensorData& data) {
    if (data.temperature < MIN_TEMPERATURE || data.temperature > MAX_TEMPERATURE) return false;
    if (data.humidity < MIN_HUMIDITY || data.humidity > MAX_HUMIDITY) return false;
    if (data.ec < MIN_EC || data.ec > MAX_EC) return false;
    if (data.ph < MIN_PH || data.ph > MAX_PH) return false;
    if (data.nitrogen < MIN_NPK || data.nitrogen > MAX_NPK) return false;
    if (data.phosphorus < MIN_NPK || data.phosphorus > MAX_NPK) return false;
    if (data.potassium < MIN_NPK || data.potassium > MAX_NPK) return false;
    return true;
}

bool getCachedData(SensorData& data) {
    if (!sensorCache.is_valid) return false;
    if (millis() - sensorCache.timestamp > CACHE_TIMEOUT) return false;
    
    data = sensorCache.data;
    return true;
}

bool readFirmwareVersion() {
    logSensor("–ó–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞...");
    uint8_t result = modbus.readHoldingRegisters(0x07, 1);
    
    if (result == modbus.ku8MBSuccess) {
        uint16_t version = modbus.getResponseBuffer(0);
        logSuccess("–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞: %d.%d", (version >> 8) & 0xFF, version & 0xFF);
        return true;
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏: %d", result);
        printModbusError(result);
        return false;
    }
}

bool readErrorStatus() {
    uint8_t result = modbus.readHoldingRegisters(REG_ERROR_STATUS, 1);
    if (result == modbus.ku8MBSuccess) {
        sensorData.error_status = modbus.getResponseBuffer(0);
        return true;
    }
    return false;
}

bool changeDeviceAddress(uint8_t new_address) {
    if (new_address < 1 || new_address > 247) return false;
    
    uint8_t result = modbus.writeSingleRegister(REG_DEVICE_ADDRESS, new_address);
    if (result == modbus.ku8MBSuccess) {
        delay(100); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        modbus.begin(new_address, Serial2);
        return true;
    }
    return false;
}

void readSensorData() {
    logSensor("–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JXCT 7-–≤-1 –¥–∞—Ç—á–∏–∫–∞...");
    
    uint8_t result;
    bool success = true;
    
    // 1. PH (–∞–¥—Ä–µ—Å 0x0006, √∑ 100)
    logDebug("–ß—Ç–µ–Ω–∏–µ PH (0x0006)...");
    result = modbus.readHoldingRegisters(0x0006, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t ph_raw = modbus.getResponseBuffer(0);
        sensorData.ph = (float)ph_raw / 100.0;  // –î–µ–ª–∏–º –Ω–∞ 100
        logData("PH: %.2f", sensorData.ph);
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PH: %d", result);
        success = false;
    }
    
    // 2. –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (–∞–¥—Ä–µ—Å 0x0012, √∑ 10)
    logDebug("–ß—Ç–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (0x0012)...");
    result = modbus.readHoldingRegisters(0x0012, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t moisture_raw = modbus.getResponseBuffer(0);
        sensorData.humidity = (float)moisture_raw / 10.0;  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ humidity –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        sensorData.moisture = sensorData.humidity;          // –î—É–±–ª–∏—Ä—É–µ–º –≤ moisture
        logData("–í–ª–∞–∂–Ω–æ—Å—Ç—å: %.1f%%", sensorData.humidity);
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: %d", result);
        success = false;
    }
    
    // 3. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∞–¥—Ä–µ—Å 0x0013, √∑ 10)
    logDebug("–ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (0x0013)...");
    result = modbus.readHoldingRegisters(0x0013, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t temp_raw = modbus.getResponseBuffer(0);
        sensorData.temperature = (float)temp_raw / 10.0;  // –î–µ–ª–∏–º –Ω–∞ 10
        logData("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C", sensorData.temperature);
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: %d", result);
        success = false;
    }
    
    // 4. –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å (–∞–¥—Ä–µ—Å 0x0015, –∫–∞–∫ –µ—Å—Ç—å)
    logDebug("–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ (0x0015)...");
    result = modbus.readHoldingRegisters(0x0015, 1);
    if (result == modbus.ku8MBSuccess) {
        uint16_t conductivity_raw = modbus.getResponseBuffer(0);
        sensorData.ec = (float)conductivity_raw;  // –ö–∞–∫ –µ—Å—Ç—å, ¬µS/cm
        logData("–ü—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å: %.0f ¬µS/cm", sensorData.ec);
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏: %d", result);
        success = false;
    }
    
    // 5-7. NPK –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–∞–¥—Ä–µ—Å–∞ 0x001E-0x0020, –∫–∞–∫ –µ—Å—Ç—å)
    logDebug("–ß—Ç–µ–Ω–∏–µ NPK (0x001E-0x0020)...");
    result = modbus.readHoldingRegisters(0x001E, 3);
    if (result == modbus.ku8MBSuccess) {
        uint16_t nitrogen_raw = modbus.getResponseBuffer(0);
        uint16_t phosphorus_raw = modbus.getResponseBuffer(1);
        uint16_t potassium_raw = modbus.getResponseBuffer(2);
        
        sensorData.nitrogen = (float)nitrogen_raw;
        sensorData.phosphorus = (float)phosphorus_raw;
        sensorData.potassium = (float)potassium_raw;
        
        logData("NPK: N=%.0f, P=%.0f, K=%.0f –º–≥/–∫–≥", 
               sensorData.nitrogen, sensorData.phosphorus, sensorData.potassium);
    } else {
        logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è NPK: %d", result);
        success = false;
    }
    
    if (success) {
        sensorData.valid = true;
                sensorData.last_update = millis();
        
        logSuccess("–í—Å–µ 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã!");
        logData("üìä PH=%.2f, –í–ª–∞–∂=%.1f%%, –¢–µ–º–ø=%.1f¬∞C, EC=%.0f¬µS/cm, N=%.0f, P=%.0f, K=%.0f", 
               sensorData.ph, sensorData.humidity, sensorData.temperature, sensorData.ec,
               sensorData.nitrogen, sensorData.phosphorus, sensorData.potassium);
    } else {
        logWarn("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
        sensorData.valid = false;
    }
}

float convertRegisterToFloat(uint16_t value, float multiplier) {
    return value * multiplier;
}

void preTransmission() {
    logDebug("Modbus TX —Ä–µ–∂–∏–º");
    digitalWrite(DE_PIN, HIGH);
    digitalWrite(RE_PIN, HIGH);
    delayMicroseconds(50);
}

void postTransmission() {
    delayMicroseconds(50);
    digitalWrite(DE_PIN, LOW);
    digitalWrite(RE_PIN, LOW);
    logDebug("Modbus RX —Ä–µ–∂–∏–º");
}

void realSensorTask(void *pvParameters) {
    for (;;) {
        readSensorData();
        vTaskDelay(SENSOR_READ_INTERVAL / portTICK_PERIOD_MS);
    }
}

void startRealSensorTask() {
    xTaskCreate(realSensorTask, "RealSensor", 4096, NULL, 1, NULL);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ Modbus
void printModbusError(uint8_t errNum) {
    switch (errNum) {
        case ModbusMaster::ku8MBSuccess:
            logSuccess("Modbus –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
            break;
        case ModbusMaster::ku8MBIllegalFunction:
            logError("Modbus: Illegal Function Exception");
            break;
        case ModbusMaster::ku8MBIllegalDataAddress:
            logError("Modbus: Illegal Data Address Exception");
            break;
        case ModbusMaster::ku8MBIllegalDataValue:
            logError("Modbus: Illegal Data Value Exception");
            break;
        case ModbusMaster::ku8MBSlaveDeviceFailure:
            logError("Modbus: Slave Device Failure");
            break;
        case ModbusMaster::ku8MBInvalidSlaveID:
            logError("Modbus: Invalid Slave ID");
            break;
        case ModbusMaster::ku8MBInvalidFunction:
            logError("Modbus: Invalid Function");
            break;
        case ModbusMaster::ku8MBResponseTimedOut:
            logError("Modbus: Response Timed Out");
            break;
        case ModbusMaster::ku8MBInvalidCRC:
            logError("Modbus: Invalid CRC");
            break;
        default:
            logError("Modbus: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ %d", errNum);
            break;
    }
} 