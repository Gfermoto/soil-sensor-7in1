#ifndef MODBUS_SENSOR_H
#define MODBUS_SENSOR_H

#include <Arduino.h>
#include <ModbusMaster.h>

// üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –†–ê–ë–û–ß–ò–ï –†–ï–ì–ò–°–¢–†–´ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ JXCT:
// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï Modbus –∞–¥—Ä–µ—Å–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π):
#define REG_PH 0x0006              // pH –ø–æ—á–≤—ã (√∑100)
#define REG_SOIL_MOISTURE 0x0012   // –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (√∑10)
#define REG_SOIL_TEMP 0x0013       // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (√∑10)
#define REG_CONDUCTIVITY 0x0015    // –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å (–∫–∞–∫ –µ—Å—Ç—å)
#define REG_NITROGEN 0x001E        // –ê–∑–æ—Ç (–∫–∞–∫ –µ—Å—Ç—å)
#define REG_PHOSPHORUS 0x001F      // –§–æ—Å—Ñ–æ—Ä (–∫–∞–∫ –µ—Å—Ç—å)
#define REG_POTASSIUM 0x0020       // –ö–∞–ª–∏–π (–∫–∞–∫ –µ—Å—Ç—å)
#define REG_FIRMWARE_VERSION 0x07  // –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
#define REG_CALIBRATION 0x08       // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞
#define REG_ERROR_STATUS 0x0B      // –°—Ç–∞—Ç—É—Å –æ—à–∏–±–æ–∫
#define REG_DEVICE_ADDRESS 0x0C    // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

// –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
#define MIN_TEMPERATURE -10.0
#define MAX_TEMPERATURE 50.0
#define MIN_HUMIDITY 0.0
#define MAX_HUMIDITY 100.0
#define MIN_EC 0.0
#define MAX_EC 20000.0
#define MIN_PH 0.0
#define MAX_PH 14.0
#define MIN_NPK 0.0
#define MAX_NPK 2000.0

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞
struct SensorData
{
    float temperature;          // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã –≤ ¬∞C (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10)
    float humidity;             // –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –≤ % (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10)
    float ec;                   // –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –≤ ¬µS/cm
    float ph;                   // pH –ø–æ—á–≤—ã (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 100)
    float nitrogen;             // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∑–æ—Ç–∞ –≤ –º–≥/–∫–≥
    float phosphorus;           // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Å—Ñ–æ—Ä–∞ –≤ –º–≥/–∫–≥
    float potassium;            // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞–ª–∏—è –≤ –º–≥/–∫–≥
    float moisture;             // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    float conductivity;         // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏
    uint16_t firmware_version;  // –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
    uint8_t error_status;       // –°—Ç–∞—Ç—É—Å –æ—à–∏–±–æ–∫
    bool valid;                 // –§–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    bool isValid;               // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    unsigned long last_update;  // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    unsigned long timestamp;    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    // –î–ï–õ–¨–¢–ê-–§–ò–õ–¨–¢–† v2.2.1: –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    float prev_temperature;           // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_humidity;              // –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_ec;                    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è EC –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_ph;                    // –ü—Ä–µ–¥—ã–¥—É—â–∏–π pH –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_nitrogen;              // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∑–æ—Ç –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_phosphorus;            // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–æ—Å—Ñ–æ—Ä –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    float prev_potassium;             // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–∏–π –¥–ª—è –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
    unsigned long last_mqtt_publish;  // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ MQTT

    // –°–ö–û–õ–¨–ó–Ø–©–ï–ï –°–†–ï–î–ù–ï–ï v2.3.0: –ö–æ–ª—å—Ü–µ–≤—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
    float temp_buffer[15];  // –ë—É—Ñ–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–º–∞–∫—Å 15 –∑–Ω–∞—á–µ–Ω–∏–π)
    float hum_buffer[15];   // –ë—É—Ñ–µ—Ä –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    float ec_buffer[15];    // –ë—É—Ñ–µ—Ä EC
    float ph_buffer[15];    // –ë—É—Ñ–µ—Ä pH
    float n_buffer[15];     // –ë—É—Ñ–µ—Ä –∞–∑–æ—Ç–∞
    float p_buffer[15];     // –ë—É—Ñ–µ—Ä —Ñ–æ—Å—Ñ–æ—Ä–∞
    float k_buffer[15];     // –ë—É—Ñ–µ—Ä –∫–∞–ª–∏—è
    uint8_t buffer_index;   // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –±—É—Ñ–µ—Ä–∞—Ö
    uint8_t buffer_filled;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (0-15)
};

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
struct SensorCache
{
    SensorData data;
    bool is_valid;
    unsigned long timestamp;
};

extern ModbusMaster modbus;
extern SensorData sensorData;
extern SensorCache sensorCache;
extern String sensorLastError;

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
SensorData getSensorData();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Modbus
void setupModbus();

// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞
void readSensorData();

// –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏
bool readFirmwareVersion();

// –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–æ–∫
bool readErrorStatus();

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
bool changeDeviceAddress(uint8_t new_address);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
bool validateSensorData(SensorData& data);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
bool getCachedData(SensorData& data);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
float convertRegisterToFloat(uint16_t value, float multiplier);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SP3485E
void preTransmission();

// –§—É–Ω–∫—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SP3485E
void postTransmission();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ Modbus
void printModbusError(uint8_t errNum);

void startRealSensorTask();

// v2.3.0: –§—É–Ω–∫—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
void addToMovingAverage(SensorData& data, float temp, float hum, float ec, float ph, float n, float p, float k);
float calculateMovingAverage(float* buffer, uint8_t window_size, uint8_t filled);
void initMovingAverageBuffers(SensorData& data);

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
void testSP3485E();              // –¢–µ—Å—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ SP3485E
bool testModbusConnection();      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Modbus —Å–≤—è–∑–∏
void testSerialConfigurations();  // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Serial2

#endif  // MODBUS_SENSOR_H