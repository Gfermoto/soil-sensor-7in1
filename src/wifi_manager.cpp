/**
 * @file wifi_manager.cpp
 * @brief –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WiFi, –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
 * @details –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi, —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–∞—Ö AP/STA, –≤–µ–±-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º
 * –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
 */
#include "wifi_manager.h"
#include "web_routes.h"      // üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.4.5
#include "modbus_sensor.h"
#include "mqtt_client.h"
#include "jxct_device_info.h"
#include "jxct_config_vars.h"
#include "jxct_format_utils.h"
#include <NTPClient.h>
#include "thingspeak_client.h"
#include "config.h"
#include "logger.h"
#include "jxct_ui_system.h"  // üé® –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∑–∞–π–Ω–∞ v2.3.1

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
#define RESET_BUTTON_PIN 0  // GPIO0 –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bool wifiConnected = false;
WiFiMode currentWiFiMode = WiFiMode::AP;
WebServer webServer(80);
DNSServer dnsServer;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
unsigned long ledLastToggle = 0;
bool ledState = false;
unsigned long ledBlinkInterval = 0;
bool ledFastBlink = false;

extern NTPClient* timeClient;

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
void handleRoot();

void setLedOn()
{
    digitalWrite(STATUS_LED_PIN, HIGH);
    ledBlinkInterval = 0;
    ledFastBlink = false;
}

void setLedOff()
{
    digitalWrite(STATUS_LED_PIN, LOW);
    ledBlinkInterval = 0;
    ledFastBlink = false;
}

void setLedBlink(unsigned long interval)
{
    ledBlinkInterval = interval;
    ledFastBlink = false;
}

void setLedFastBlink()
{
    ledBlinkInterval = 100;
    ledFastBlink = true;
}

void updateLed()
{
    if (ledBlinkInterval > 0)
    {
        unsigned long now = millis();
        if (now - ledLastToggle >= ledBlinkInterval)
        {
            ledLastToggle = now;
            ledState = !ledState;
            digitalWrite(STATUS_LED_PIN, ledState ? HIGH : LOW);
        }
    }
}

// HTML –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
String navHtml()
{
    String html = "<div class='nav'>";
    html += "<a href='/'>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>";
    if (currentWiFiMode == WiFiMode::STA)
    {
        html += "<a href='/readings'>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</a>";
        html += "<a href='/intervals'>" UI_ICON_INTERVALS " –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã</a>";  // v2.3.0
    
        html += "<a href='/config_manager'>" UI_ICON_FOLDER " –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</a>";  // v2.3.0
        html += "<a href='/service'>" UI_ICON_SERVICE " –°–µ—Ä–≤–∏—Å</a>";
    }
    html += "</div>";
    return html;
}

void setupWiFi()
{
    logPrintHeader("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WiFi", COLOR_GREEN);

    pinMode(STATUS_LED_PIN, OUTPUT);
    setLedBlink(500);
    WiFi.mode(WIFI_AP_STA);
    loadConfig();

    logSystem("SSID: %s", config.ssid);
    logDebug("Password: %s", strlen(config.password) > 0 ? "–∑–∞–¥–∞–Ω" : "–Ω–µ –∑–∞–¥–∞–Ω");

    if (strlen(config.ssid) > 0 && strlen(config.password) > 0)
    {
        logWiFi("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º STA (–∫–ª–∏–µ–Ω—Ç)");
        startSTAMode();
    }
    else
    {
        logWiFi("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º AP (—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞)");
        startAPMode();
    }
    logPrintSeparator("‚îÄ", 60);
}

void handleWiFi()
{
    updateLed();
    if (currentWiFiMode == WiFiMode::AP)
    {
        dnsServer.processNextRequest();
        webServer.handleClient();
        if (WiFi.softAPgetStationNum() > 0)
        {
            setLedOn();
        }
        else
        {
            setLedBlink(500);
        }
    }
    else if (currentWiFiMode == WiFiMode::STA)
    {
        if (WiFi.status() != WL_CONNECTED)
        {
            wifiConnected = false;
            setLedBlink(500);
            logWarn("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WiFi, –ø–µ—Ä–µ—Ö–æ–¥ –≤ AP");
            startAPMode();
        }
        else if (!wifiConnected)
        {
            wifiConnected = true;
            setLedOn();
            logSuccess("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi, IP: %s", WiFi.localIP().toString().c_str());
        }
        webServer.handleClient();
    }
}

String getApSsid()
{
    uint8_t mac[6];
    WiFi.macAddress(mac);
    char buf[20];
    snprintf(buf, sizeof(buf), "jxct-%02X%02X%02X", mac[3], mac[4], mac[5]);
    for (int i = 0; buf[i]; ++i) buf[i] = tolower(buf[i]);
    return String(buf);
}

void startAPMode()
{
    currentWiFiMode = WiFiMode::AP;
    WiFi.disconnect();
    WiFi.mode(WIFI_AP);
    String apSsid = getApSsid();
    WiFi.softAP(apSsid.c_str(), WIFI_AP_PASS);
    dnsServer.start(53, "*", WiFi.softAPIP());
    setupWebServer();
    setLedBlink(500);
    logWiFi("–†–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—É—â–µ–Ω");
    logSystem("SSID: %s", apSsid.c_str());
    logSystem("IP –∞–¥—Ä–µ—Å: %s", WiFi.softAPIP().toString().c_str());
}

void startSTAMode()
{
    currentWiFiMode = WiFiMode::STA;
    WiFi.mode(WIFI_STA);
    String hostname = getApSsid();
    WiFi.setHostname(hostname.c_str());
    if (strlen(config.ssid) > 0)
    {
        WiFi.begin(config.ssid, config.password);
        logWiFi("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
        int attempts = 0;
        setLedBlink(500);
        while (WiFi.status() != WL_CONNECTED && attempts < 20)
        {
            delay(500);
            updateLed();
            attempts++;
        }
        if (WiFi.status() == WL_CONNECTED)
        {
            wifiConnected = true;
            setLedOn();
            logSuccess("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi: %s", config.ssid);
            logSystem("IP –∞–¥—Ä–µ—Å: %s", WiFi.localIP().toString().c_str());
            setupWebServer();
        }
        else
        {
            logError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi");
            startAPMode();
        }
    }
    else
    {
        logWarn("SSID –Ω–µ –∑–∞–¥–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ AP");
        startAPMode();
    }
}

bool checkResetButton()
{
    static unsigned long pressStart = 0;
    static bool wasPressed = false;
    bool isPressed = digitalRead(RESET_BUTTON_PIN) == LOW;
    if (isPressed && !wasPressed)
    {
        pressStart = millis();
        wasPressed = true;
        setLedFastBlink();
    }
    else if (!isPressed && wasPressed)
    {
        wasPressed = false;
        setLedBlink(500);
        return false;
    }
    else if (isPressed && wasPressed)
    {
        if (millis() - pressStart >= 5000)
        {
            return true;
        }
    }
    return false;
}

void restartESP()
{
    logWarn("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32...");
    delay(1000);
    ESP.restart();
}

void handleStatus()
{
    String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
    html += "<title>" UI_ICON_STATUS " –°—Ç–∞—Ç—É—Å JXCT</title>";
    html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
    html += navHtml();
    html += "<h1>" UI_ICON_STATUS " –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h1>";
    html += "<div class='section'><h2>WiFi</h2><ul>";
    html += "<li>–†–µ–∂–∏–º: " + String(currentWiFiMode == WiFiMode::AP ? "–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞" : "–ö–ª–∏–µ–Ω—Ç") + "</li>";
    if (currentWiFiMode == WiFiMode::STA && wifiConnected) {
        html += "<li>SSID: " + String(config.ssid) + "</li>";
        html += "<li>IP: " + WiFi.localIP().toString() + "</li>";
        html += "<li>RSSI: " + String(WiFi.RSSI()) + " dBm</li>";
    }
    html += "</ul></div>";
    html += "<div class='section'><h2>–°–∏—Å—Ç–µ–º–∞</h2><ul>";
    html += "<li>–í–µ—Ä—Å–∏—è: " + String(DEVICE_SW_VERSION) + "</li>";
    html += "<li>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(millis() / 1000) + " —Å–µ–∫</li>";
    html += "<li>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()) + " –±–∞–π—Ç</li>";
    html += "</ul></div>";
    html += "</div>" + String(getToastHTML()) + "</body></html>";
    webServer.send(200, "text/html; charset=utf-8", html);
}

void setupWebServer()
{
    logInfo("üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ v2.4.5...");
    
    // ============================================================================
    // –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
    // ============================================================================
    
    setupMainRoutes();     // –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (/, /save, /status)
    setupDataRoutes();     // –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞ (/readings, /sensor_json, /api/sensor)
    setupConfigRoutes();   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (/intervals, /config_manager, /api/config/*)
    setupServiceRoutes();  // –°–µ—Ä–≤–∏—Å (/health, /service_status, /reset, /reboot, /ota)
    
    setupErrorHandlers();  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ (404, 500) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
    
    // ============================================================================
    // –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
    // ============================================================================
    
    webServer.begin();
    logSuccess("üèóÔ∏è –ú–æ–¥—É–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä v2.4.5 –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º: %s", 
              currentWiFiMode == WiFiMode::AP ? "AP" : "STA");
    logSystem("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: main_routes, data_routes, config_routes, service_routes, error_handlers");
    logSystem("üìã –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
}

void handleRoot()
{
    String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
    html += "<title>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JXCT</title>";
    html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
    html += navHtml();
    html += "<h1>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JXCT</h1>";
    html += "<form action='/save' method='post'>";
    html += "<div class='section'><h2>WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
    html += "<div class='form-group'><label for='ssid'>SSID:</label><input type='text' id='ssid' name='ssid' value='" +
            String(config.ssid) + "' required></div>";
    html +=
        "<div class='form-group'><label for='password'>–ü–∞—Ä–æ–ª—å:</label><input type='password' id='password' "
        "name='password' value='" +
        String(config.password) + "' required></div></div>";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ STA
    if (currentWiFiMode == WiFiMode::STA)
    {
        String mqttChecked = config.flags.mqttEnabled ? " checked" : "";
        html += "<div class='section'><h2>MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
        html +=
            "<div class='form-group'><label for='mqtt_enabled'>–í–∫–ª—é—á–∏—Ç—å MQTT:</label><input type='checkbox' "
            "id='mqtt_enabled' name='mqtt_enabled'" +
            mqttChecked + "></div>";
        html +=
            "<div class='form-group'><label for='mqtt_server'>MQTT —Å–µ—Ä–≤–µ—Ä:</label><input type='text' id='mqtt_server' "
            "name='mqtt_server' value='" +
            String(config.mqttServer) + "'" + (config.flags.mqttEnabled ? " required" : "") + "></div>";
        html +=
            "<div class='form-group'><label for='mqtt_port'>MQTT –ø–æ—Ä—Ç:</label><input type='text' id='mqtt_port' "
            "name='mqtt_port' value='" +
            String(config.mqttPort) + "'></div>";
        html +=
            "<div class='form-group'><label for='mqtt_user'>MQTT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</label><input type='text' "
            "id='mqtt_user' name='mqtt_user' value='" +
            String(config.mqttUser) + "'></div>";
        html +=
            "<div class='form-group'><label for='mqtt_password'>MQTT –ø–∞—Ä–æ–ª—å:</label><input type='password' "
            "id='mqtt_password' name='mqtt_password' value='" +
            String(config.mqttPassword) + "'></div>";
        String hassChecked = config.flags.hassEnabled ? " checked" : "";
        html +=
            "<div class='form-group'><label for='hass_enabled'>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Home Assistant:</label><input "
            "type='checkbox' id='hass_enabled' name='hass_enabled'" +
            hassChecked + "></div></div>";
        String tsChecked = config.flags.thingSpeakEnabled ? " checked" : "";
        html += "<div class='section'><h2>ThingSpeak –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
        html +=
            "<div class='form-group'><label for='ts_enabled'>–í–∫–ª—é—á–∏—Ç—å ThingSpeak:</label><input type='checkbox' "
            "id='ts_enabled' name='ts_enabled'" +
            tsChecked + "></div>";
        html +=
            "<div class='form-group'><label for='ts_api_key'>API –∫–ª—é—á:</label><input type='text' id='ts_api_key' "
            "name='ts_api_key' value='" +
            String(config.thingSpeakApiKey) + "'" + (config.flags.thingSpeakEnabled ? " required" : "") + "></div>";
        html +=
            "<div class='form-group'><label for='ts_channel_id'>Channel ID:</label><input type='text' "
            "id='ts_channel_id' name='ts_channel_id' value='" +
            String(config.thingSpeakChannelId) + "'></div>";
        html +=
            "<div style='color:#888;font-size:13px'>üí° –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ <a href='/intervals' style='color:#4CAF50'>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã</a></div></div>";
        String realSensorChecked = config.flags.useRealSensor ? " checked" : "";
        html += "<div class='section'><h2>–î–∞—Ç—á–∏–∫</h2>";
        html +=
            "<div class='form-group'><label for='real_sensor'>–†–µ–∞–ª—å–Ω—ã–π –¥–∞—Ç—á–∏–∫:</label><input type='checkbox' "
            "id='real_sensor' name='real_sensor'" +
            realSensorChecked + "></div></div>";
        html += "<div class='section'><h2>NTP</h2>";
        html +=
            "<div class='form-group'><label for='ntp_server'>NTP —Å–µ—Ä–≤–µ—Ä:</label><input type='text' id='ntp_server' "
            "name='ntp_server' value='" +
            String(config.ntpServer) + "' required></div>";
        html +=
            "<div class='form-group'><label for='ntp_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NTP (–º—Å):</label><input "
            "type='number' id='ntp_interval' name='ntp_interval' min='10000' max='86400000' value='" +
            String(config.ntpUpdateInterval) + "'></div></div>";
    }
    html += generateButton(ButtonType::PRIMARY, UI_ICON_SAVE, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") + "</form>";

    // –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (currentWiFiMode == WiFiMode::STA)
    {
        html += "<script>";
        html += "document.getElementById('mqtt_enabled').addEventListener('change', function() {";
        html += "  document.getElementById('mqtt_server').required = this.checked;";
        html += "});";
        html += "document.getElementById('ts_enabled').addEventListener('change', function() {";
        html += "  document.getElementById('ts_api_key').required = this.checked;";
        html += "});";
        html += "</script>";
    }

    html += "</div>" + String(getToastHTML()) + "</body></html>";
    webServer.send(200, "text/html; charset=utf-8", html);
} 