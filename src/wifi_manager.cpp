/**
 * @file wifi_manager.cpp
 * @brief –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WiFi, –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
 * @details –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi, —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–∞—Ö AP/STA, –≤–µ–±-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º
 * –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
 */
#include "wifi_manager.h"
#include <NTPClient.h>
#include "jxct_config_vars.h"
#include "jxct_constants.h"
#include "jxct_device_info.h"
#include "jxct_format_utils.h"
#include "jxct_ui_system.h"  // üé® –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∑–∞–π–Ω–∞ v2.3.1
#include "logger.h"
#include "modbus_sensor.h"
#include "mqtt_client.h"
#include "thingspeak_client.h"
#include "web/csrf_protection.h"  // üîí CSRF –∑–∞—â–∏—Ç–∞
#include "web_routes.h"           // üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.4.5

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
#define RESET_BUTTON_PIN 0             // GPIO0 –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
#define WIFI_RECONNECT_INTERVAL 30000  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞ –∏ —Ç–∞–π–º–∏–Ω–≥–æ–≤
#define LED_FAST_BLINK_INTERVAL 100  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –±—ã—Å—Ç—Ä–æ–≥–æ –º–∏–≥–∞–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞ (–º—Å)
#define LED_SLOW_BLINK_INTERVAL 500  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –º–∏–≥–∞–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞ (–º—Å)
#define WIFI_MODE_DELAY 100          // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ WiFi (–º—Å)
#define NTP_TIMEOUT_MS 5000          // –¢–∞–π–º–∞—É—Ç –¥–ª—è NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–º—Å)
#define RESET_BUTTON_HOLD_TIME 5000  // –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ (–º—Å)
#define RESTART_DELAY_MS 1000        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π (–º—Å)
#define DNS_PORT 53                  // –ü–æ—Ä—Ç DNS —Å–µ—Ä–≤–µ—Ä–∞
#define MAC_ADDRESS_BUFFER_SIZE 20   // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è MAC –∞–¥—Ä–µ—Å–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bool wifiConnected = false;
WiFiMode currentWiFiMode = WiFiMode::AP;
WebServer webServer(DEFAULT_WEB_SERVER_PORT);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ jxct_constants.h
DNSServer dnsServer;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
unsigned long ledLastToggle = 0;
bool ledState = false;
unsigned long ledBlinkInterval = 0;
bool ledFastBlink = false;

extern NTPClient* timeClient;

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
void handleRoot();

void setLedOn()
{
    digitalWrite(STATUS_LED_PIN, HIGH);
    ledBlinkInterval = 0;
    ledFastBlink = false;
}

void setLedOff()
{
    digitalWrite(STATUS_LED_PIN, LOW);
    ledBlinkInterval = 0;
    ledFastBlink = false;
}

void setLedBlink(unsigned long interval)
{
    ledBlinkInterval = interval;
    ledFastBlink = false;
}

void setLedFastBlink()
{
    ledBlinkInterval = LED_FAST_BLINK_INTERVAL;
    ledFastBlink = true;
}

void updateLed()
{
    if (ledBlinkInterval > 0)
    {
        unsigned long now = millis();
        if (now - ledLastToggle >= ledBlinkInterval)
        {
            ledLastToggle = now;
            ledState = !ledState;
            digitalWrite(STATUS_LED_PIN, ledState ? HIGH : LOW);
        }
    }
}

// HTML –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
String navHtml()
{
    String html = "<div class='nav'>";
    html += "<a href='/'>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>";
    if (currentWiFiMode == WiFiMode::STA)
    {
        html += "<a href='/readings'>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</a>";
        html += "<a href='/intervals'>" UI_ICON_INTERVALS " –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã</a>";  // v2.3.0

        html += "<a href='/config_manager'>" UI_ICON_FOLDER " –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</a>";  // v2.3.0
        html += "<a href='/updates'>üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è</a>";
        html += "<a href='/service'>" UI_ICON_SERVICE " –°–µ—Ä–≤–∏—Å</a>";
    }
    html += "</div>";
    return html;
}

void setupWiFi()
{
    logPrintHeader("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WiFi", LogColor::GREEN);

    pinMode(STATUS_LED_PIN, OUTPUT);
    setLedBlink(LED_SLOW_BLINK_INTERVAL);

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º WiFi –∏ –æ—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    WiFi.disconnect(true);
    WiFi.mode(WIFI_OFF);
    delay(WIFI_MODE_DELAY);

    loadConfig();

    logSystem("SSID: %s", config.ssid);
    logDebug("Password: %s", strlen(config.password) > 0 ? "–∑–∞–¥–∞–Ω" : "–Ω–µ –∑–∞–¥–∞–Ω");

    if (strlen(config.ssid) > 0 && strlen(config.password) > 0)
    {
        logWiFi("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º STA (–∫–ª–∏–µ–Ω—Ç)");
        startSTAMode();
    }
    else
    {
        logWiFi("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º AP (—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞)");
        startAPMode();
    }
    logPrintSeparator("‚îÄ", DEFAULT_SEPARATOR_LENGTH);
}

void handleWiFi()
{
    updateLed();
    if (currentWiFiMode == WiFiMode::AP)
    {
        dnsServer.processNextRequest();
        webServer.handleClient();

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ STA-—Ä–µ–∂–∏–º, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—É—Å—Ç–∞
        static unsigned long lastStaRetry = 0;
        if (WiFi.softAPgetStationNum() == 0 &&                       // –Ω–∏–∫–æ–≥–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
            millis() - lastStaRetry >= WIFI_RECONNECT_INTERVAL &&    // –ø—Ä–æ—à–ª–æ ‚â• –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            strlen(config.ssid) > 0 && strlen(config.password) > 0)  // –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á. –¥–∞–Ω–Ω—ã–µ
        {
            lastStaRetry = millis();
            logWiFi("AP —Ä–µ–∂–∏–º: –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi \"%s\"", config.ssid);
            startSTAMode();  // –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –≤–µ—Ä–Ω—ë—Ç –Ω–∞—Å –≤ AP
            return;          // –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        }

        if (WiFi.softAPgetStationNum() > 0)
        {
            setLedOn();
        }
        else
        {
            setLedBlink(WIFI_RETRY_DELAY_MS);
        }
    }
    else if (currentWiFiMode == WiFiMode::STA)
    {
        static unsigned long lastReconnectAttempt = 0;
        static int reconnectAttempts = 0;
        const int MAX_RECONNECT_ATTEMPTS = 3;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ AP

        if (WiFi.status() != WL_CONNECTED)
        {
            if (!wifiConnected || (millis() - lastReconnectAttempt >= WIFI_RECONNECT_INTERVAL))
            {
                wifiConnected = false;
                setLedBlink(WIFI_RETRY_DELAY_MS);

                if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS)
                {
                    logWarn("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WiFi, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è %d –∏–∑ %d", reconnectAttempts + 1,
                            MAX_RECONNECT_ATTEMPTS);

                    WiFi.disconnect(true);
                    delay(WIFI_MODE_DELAY);
                    WiFi.begin(config.ssid, config.password);

                    lastReconnectAttempt = millis();
                    reconnectAttempts++;
                }
                else
                {
                    logError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥ –≤ AP",
                             MAX_RECONNECT_ATTEMPTS);
                    startAPMode();
                    reconnectAttempts = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
                }
            }
        }
        else
        {
            if (!wifiConnected)
            {
                wifiConnected = true;
                reconnectAttempts = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                setLedOn();
                logSuccess("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi, IP: %s", WiFi.localIP().toString().c_str());
            }
        }
        webServer.handleClient();
    }
}

String getApSsid()
{
    uint8_t mac[6];
    WiFi.macAddress(mac);
    char buf[MAC_ADDRESS_BUFFER_SIZE];
    snprintf(buf, sizeof(buf), "jxct-%02X%02X%02X", mac[3], mac[4], mac[5]);
    for (int i = 0; buf[i]; ++i) {
        buf[i] = tolower(buf[i]);
    }
    return String(buf);
}

void startAPMode()
{
    currentWiFiMode = WiFiMode::AP;
    WiFi.disconnect();
    WiFi.mode(WIFI_AP);
    String apSsid = getApSsid();
    WiFi.softAP(apSsid.c_str(), JXCT_WIFI_AP_PASS);
    dnsServer.start(DNS_PORT, "*", WiFi.softAPIP());
    setupWebServer();
    setLedBlink(LED_SLOW_BLINK_INTERVAL);
    logWiFi("–†–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—É—â–µ–Ω");
    logSystem("SSID: %s", apSsid.c_str());
    logSystem("IP –∞–¥—Ä–µ—Å: %s", WiFi.softAPIP().toString().c_str());
}

void startSTAMode()
{
    currentWiFiMode = WiFiMode::STA;
    WiFi.disconnect(true);  // –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    WiFi.mode(WIFI_STA);
    delay(WIFI_MODE_DELAY);  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞

    String hostname = getApSsid();
    WiFi.setHostname(hostname.c_str());

    if (strlen(config.ssid) > 0)
    {
        logWiFi("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
        WiFi.begin(config.ssid, config.password);  // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

        int attempts = 0;
        setLedBlink(WIFI_RETRY_DELAY_MS);
        unsigned long startTime = millis();

        while (WiFi.status() != WL_CONNECTED && attempts < WIFI_CONNECTION_ATTEMPTS &&
               (millis() - startTime) < WIFI_CONNECTION_TIMEOUT)
        {
            delay(WIFI_RETRY_DELAY_MS);
            updateLed();
            attempts++;
            logDebug("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è %d –∏–∑ %d", attempts, WIFI_CONNECTION_ATTEMPTS);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (checkResetButton())
            {
                logWarn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
                startAPMode();
                return;
            }
        }

        if (WiFi.status() == WL_CONNECTED)
        {
            wifiConnected = true;
            setLedOn();
            logSuccess("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi: %s", config.ssid);
            logSystem("IP –∞–¥—Ä–µ—Å: %s", WiFi.localIP().toString().c_str());
            logSystem("MAC –∞–¥—Ä–µ—Å: %s", WiFi.macAddress().c_str());
            logSystem("Hostname: %s", hostname.c_str());
            logSystem("RSSI: %d dBm", WiFi.RSSI());
            // --- –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ NTP (–±–ª–æ–∫ –¥–æ 5 —Å–µ–∫) ---
            if (timeClient == nullptr)
            {
                extern WiFiUDP ntpUDP;
                timeClient = new NTPClient(ntpUDP, "pool.ntp.org", 0, 3600000);
                timeClient->begin();
            }
            if (timeClient)
            {
                unsigned long ntpStart = millis();
                while (!timeClient->forceUpdate() && millis() - ntpStart < NTP_TIMEOUT_MS)
                {
                    delay(WIFI_MODE_DELAY);
                }
                logSystem("NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: %s", timeClient->isTimeSet() ? "OK" : "–Ω–µ —É–¥–∞–ª–æ—Å—å");
            }

            setupWebServer();
        }
        else
        {
            logError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", attempts);
            startAPMode();
        }
    }
    else
    {
        logWarn("SSID –Ω–µ –∑–∞–¥–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ AP");
        startAPMode();
    }
}

bool checkResetButton()
{
    static unsigned long pressStart = 0;
    static bool wasPressed = false;
    bool isPressed = digitalRead(RESET_BUTTON_PIN) == LOW;
    if (isPressed && !wasPressed)
    {
        pressStart = millis();
        wasPressed = true;
        setLedFastBlink();
    }
    else if (!isPressed && wasPressed)
    {
        wasPressed = false;
        setLedBlink(LED_SLOW_BLINK_INTERVAL);
        return false;
    }
    else if (isPressed && wasPressed)
    {
        if (millis() - pressStart >= RESET_BUTTON_HOLD_TIME)
        {
            return true;
        }
    }
    return false;
}

void restartESP()
{
    logWarn("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32...");
    delay(RESTART_DELAY_MS);
    ESP.restart();
}

void handleStatus()
{
    String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
    html += "<title>" UI_ICON_STATUS " –°—Ç–∞—Ç—É—Å JXCT</title>";
    html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
    html += navHtml();
    html += "<h1>" UI_ICON_STATUS " –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h1>";
    html += "<div class='section'><h2>WiFi</h2><ul>";
    html += "<li>–†–µ–∂–∏–º: " + String(currentWiFiMode == WiFiMode::AP ? "–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞" : "–ö–ª–∏–µ–Ω—Ç") + "</li>";
    if (currentWiFiMode == WiFiMode::STA && wifiConnected)
    {
        html += "<li>SSID: " + String(config.ssid) + "</li>";
        html += "<li>IP: " + WiFi.localIP().toString() + "</li>";
        html += "<li>RSSI: " + String(WiFi.RSSI()) + " dBm</li>";
    }
    html += "</ul></div>";
    html += "<div class='section'><h2>–°–∏—Å—Ç–µ–º–∞</h2><ul>";
    html += "<li>–í–µ—Ä—Å–∏—è: " + String(DEVICE_SW_VERSION) + "</li>";
    html += "<li>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(millis() / 1000) + " —Å–µ–∫</li>";
    html += "<li>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()) + " –±–∞–π—Ç</li>";
    html += "</ul></div>";
    html += "</div>" + String(getToastHTML()) + "</body></html>";
    webServer.send(200, "text/html; charset=utf-8", html);
}

void setupWebServer()
{
    logInfo("üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ v2.4.5...");

    // ============================================================================
    // –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
    // ============================================================================

    setupMainRoutes();     // –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (/, /save, /status)
    setupDataRoutes();     // –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞ (/readings, /sensor_json, /api/sensor)
    setupConfigRoutes();   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (/intervals, /config_manager, /api/config/*)
    setupServiceRoutes();  // –°–µ—Ä–≤–∏—Å
    setupOtaRoutes();      // OTA (/updates, api)
    setupReportsRoutes();  // –û—Ç—á—ë—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (/api/reports/*, /reports)

    setupErrorHandlers();  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ (404, 500) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏

    // ============================================================================
    // –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
    // ============================================================================

    webServer.begin();
    logSuccess("üèóÔ∏è –ú–æ–¥—É–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä v2.4.5 –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º: %s", currentWiFiMode == WiFiMode::AP ? "AP" : "STA");
    logSystem("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: main, data, config, service, ota, error_handlers");
    logSystem("üìã –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
}

void handleRoot()
{
    String html =
        "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, "
        "initial-scale=1.0'>";
    html += "<title>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JXCT</title>";
    html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
    html += navHtml();
    html += "<h1>" UI_ICON_CONFIG " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JXCT</h1>";
    html += "<form action='/save' method='post'>";
    html += getCSRFHiddenField();  // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
    html += "<div class='section'><h2>WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
    html += "<div class='form-group'><label for='ssid'>SSID:</label><input type='text' id='ssid' name='ssid' value='" +
            String(config.ssid) + "' required></div>";
    html +=
        "<div class='form-group'><label for='password'>–ü–∞—Ä–æ–ª—å:</label><input type='password' id='password' "
        "name='password' value='" +
        String(config.password) + "' required></div></div>";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ STA
    if (currentWiFiMode == WiFiMode::STA)
    {
        String mqttChecked = config.flags.mqttEnabled ? " checked" : "";
        html += "<div class='section'><h2>MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
        html +=
            "<div class='form-group'><label for='mqtt_enabled'>–í–∫–ª—é—á–∏—Ç—å MQTT:</label><input type='checkbox' "
            "id='mqtt_enabled' name='mqtt_enabled'" +
            mqttChecked + "></div>";
        html +=
            "<div class='form-group'><label for='mqtt_server'>MQTT —Å–µ—Ä–≤–µ—Ä:</label><input type='text' id='mqtt_server' "
            "name='mqtt_server' value='" +
            String(config.mqttServer) + "'" + (config.flags.mqttEnabled ? " required" : "") + "></div>";
        html +=
            "<div class='form-group'><label for='mqtt_port'>MQTT –ø–æ—Ä—Ç:</label><input type='text' id='mqtt_port' "
            "name='mqtt_port' value='" +
            String(config.mqttPort) + "'></div>";
        html +=
            "<div class='form-group'><label for='mqtt_user'>MQTT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</label><input type='text' "
            "id='mqtt_user' name='mqtt_user' value='" +
            String(config.mqttUser) + "'></div>";
        html +=
            "<div class='form-group'><label for='mqtt_password'>MQTT –ø–∞—Ä–æ–ª—å:</label><input type='password' "
            "id='mqtt_password' name='mqtt_password' value='" +
            String(config.mqttPassword) + "'></div>";
        String hassChecked = config.flags.hassEnabled ? " checked" : "";
        html +=
            "<div class='form-group'><label for='hass_enabled'>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Home Assistant:</label><input "
            "type='checkbox' id='hass_enabled' name='hass_enabled'" +
            hassChecked + "></div></div>";
        String tsChecked = config.flags.thingSpeakEnabled ? " checked" : "";
        html += "<div class='section'><h2>ThingSpeak –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>";
        html +=
            "<div class='form-group'><label for='ts_enabled'>–í–∫–ª—é—á–∏—Ç—å ThingSpeak:</label><input type='checkbox' "
            "id='ts_enabled' name='ts_enabled'" +
            tsChecked + "></div>";
        html +=
            "<div class='form-group'><label for='ts_api_key'>API –∫–ª—é—á:</label><input type='text' id='ts_api_key' "
            "name='ts_api_key' value='" +
            String(config.thingSpeakApiKey) + "'" + (config.flags.thingSpeakEnabled ? " required" : "") + "></div>";
        html +=
            "<div class='form-group'><label for='ts_channel_id'>Channel ID:</label><input type='text' "
            "id='ts_channel_id' name='ts_channel_id' value='" +
            String(config.thingSpeakChannelId) + "'></div>";
        html +=
            "<div style='color:#888;font-size:13px'>üí° –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ <a "
            "href='/intervals' style='color:#4CAF50'>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã</a></div></div>";
        String realSensorChecked = config.flags.useRealSensor ? " checked" : "";
        html += "<div class='section'><h2>–î–∞—Ç—á–∏–∫</h2>";
        html +=
            "<div class='form-group'><label for='real_sensor'>–†–µ–∞–ª—å–Ω—ã–π –¥–∞—Ç—á–∏–∫:</label><input type='checkbox' "
            "id='real_sensor' name='real_sensor'" +
            realSensorChecked + "></div>";

        // ----------------- ‚öôÔ∏è –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ -----------------
        html += "<div class='section'><h2>‚öôÔ∏è –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤</h2>";
        String calibChecked = config.flags.calibrationEnabled ? " checked" : "";
        html +=
            "<div class='form-group'><label for='cal_enabled'>–í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é:</label><input type='checkbox' "
            "id='cal_enabled' name='cal_enabled'" +
            calibChecked + "></div>";
        html +=
            "<div class='form-group'><label for='irrig_th'>–ü–æ—Ä–æ–≥ ‚àÜ–≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (%):</label><input type='number' "
            "step='0.1' id='irrig_th' name='irrig_th' value='" +
            String(config.irrigationSpikeThreshold, 1) + "'></div>";
        html +=
            "<div class='form-group'><label for='irrig_hold'>–£–¥–µ—Ä–∂–∞–Ω–∏–µ (–º–∏–Ω):</label><input type='number' "
            "id='irrig_hold' name='irrig_hold' value='" +
            String(config.irrigationHoldMinutes) + "'></div>";
        html += "</div>";  // –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏

        // ----------------- üå± –ê–≥—Ä–æ—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -----------------
        html += "<div class='section'><h2>üå± –ê–≥—Ä–æ—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>";
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        html +=
            "<div class='form-group'><label for='latitude'>–®–∏—Ä–æ—Ç–∞:</label><input type='number' step='0.0001' "
            "id='latitude' name='latitude' value='" +
            String(config.latitude, 4) + "'></div>";
        html +=
            "<div class='form-group'><label for='longitude'>–î–æ–ª–≥–æ—Ç–∞:</label><input type='number' step='0.0001' "
            "id='longitude' name='longitude' value='" +
            String(config.longitude, 4) + "'></div>";
        // –ö—É–ª—å—Ç—É—Ä–∞
        html += "<div class='form-group'><label for='crop'>–ö—É–ª—å—Ç—É—Ä–∞:</label><select id='crop' name='crop'>";
        html +=
            String("<option value='none'") + (strcmp(config.cropId, "none") == 0 ? " selected" : "") + ">–Ω–µ—Ç</option>";
        html += String("<option value='tomato'") + (strcmp(config.cropId, "tomato") == 0 ? " selected" : "") +
                ">–¢–æ–º–∞—Ç</option>";
        html += String("<option value='cucumber'") + (strcmp(config.cropId, "cucumber") == 0 ? " selected" : "") +
                ">–û–≥—É—Ä–µ—Ü</option>";
        html += String("<option value='pepper'") + (strcmp(config.cropId, "pepper") == 0 ? " selected" : "") +
                ">–ü–µ—Ä–µ—Ü</option>";
        html += String("<option value='lettuce'") + (strcmp(config.cropId, "lettuce") == 0 ? " selected" : "") +
                ">–°–∞–ª–∞—Ç</option>";
        html += String("<option value='strawberry'") + (strcmp(config.cropId, "strawberry") == 0 ? " selected" : "") +
                ">–ö–ª—É–±–Ω–∏–∫–∞</option>";
        html += String("<option value='apple'") + (strcmp(config.cropId, "apple") == 0 ? " selected" : "") +
                ">–Ø–±–ª–æ–Ω—è</option>";
        html += String("<option value='pear'") + (strcmp(config.cropId, "pear") == 0 ? " selected" : "") +
                ">–ì—Ä—É—à–∞</option>";
        html += String("<option value='cherry'") + (strcmp(config.cropId, "cherry") == 0 ? " selected" : "") +
                ">–í–∏—à–Ω—è/–ß–µ—Ä–µ—à–Ω—è</option>";
        html += String("<option value='raspberry'") + (strcmp(config.cropId, "raspberry") == 0 ? " selected" : "") +
                ">–ú–∞–ª–∏–Ω–∞</option>";
        html += String("<option value='currant'") + (strcmp(config.cropId, "currant") == 0 ? " selected" : "") +
                ">–°–º–æ—Ä–æ–¥–∏–Ω–∞</option>";
        html += String("<option value='blueberry'") + (strcmp(config.cropId, "blueberry") == 0 ? " selected" : "") +
                ">–ì–æ–ª—É–±–∏–∫–∞</option>";
        html += String("<option value='lawn'") + (strcmp(config.cropId, "lawn") == 0 ? " selected" : "") +
                ">–ì–∞–∑–æ–Ω</option>";
        html += String("<option value='grape'") + (strcmp(config.cropId, "grape") == 0 ? " selected" : "") +
                ">–í–∏–Ω–æ–≥—Ä–∞–¥</option>";
        html += String("<option value='conifer'") + (strcmp(config.cropId, "conifer") == 0 ? " selected" : "") +
                ">–•–≤–æ–π–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è</option>";
        html += "</select></div>";
        // –¢–∏–ø —Å—Ä–µ–¥—ã –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è v2.6.1
        String selectedEnvOutdoor = config.environmentType == 0 ? " selected" : "";
        String selectedEnvGreenhouse = config.environmentType == 1 ? " selected" : "";
        String selectedEnvIndoor = config.environmentType == 2 ? " selected" : "";
        html += "<div class='form-group'><label for='env_type'>–°—Ä–µ–¥–∞:</label><select id='env_type' name='env_type'>";
        html += String("<option value='0'") + selectedEnvOutdoor + ">–û—Ç–∫—Ä—ã—Ç—ã–π –≥—Ä—É–Ω—Ç</option>";
        html += String("<option value='1'") + selectedEnvGreenhouse + ">–¢–µ–ø–ª–∏—Ü–∞</option>";
        html += String("<option value='2'") + selectedEnvIndoor + ">–ö–æ–º–Ω–∞—Ç–Ω–∞—è</option></select></div>";

        // –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        String seasonalChecked = config.flags.seasonalAdjustEnabled ? " checked" : "";
        html +=
            "<div class='form-group'><label for='season_adj'>–£—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</label><input type='checkbox' "
            "id='season_adj' name='season_adj'" +
            seasonalChecked + "></div>";

        // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã
        const char* selectedSand = config.soilProfile == 0 ? " selected" : "";
        const char* selectedLoam = config.soilProfile == 1 ? " selected" : "";
        const char* selectedPeat = config.soilProfile == 2 ? " selected" : "";
        const char* selectedClay = config.soilProfile == 3 ? " selected" : "";
        const char* selectedSandPeat = config.soilProfile == 4 ? " selected" : "";
        html +=
            "<div class='form-group'><label for='soil_profile_sel'>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã:</label><select id='soil_profile_sel' "
            "name='soil_profile_sel'>";
        html += String("<option value='0'") + selectedSand + ">–ü–µ—Å–æ–∫</option>";
        html += String("<option value='1'") + selectedLoam + ">–°—É–≥–ª–∏–Ω–æ–∫</option>";
        html += String("<option value='2'") + selectedPeat + ">–¢–æ—Ä—Ñ</option>";
        html += String("<option value='3'") + selectedClay + ">–ì–ª–∏–Ω–∞</option>";
        html += String("<option value='4'") + selectedSandPeat + ">–ü–µ—Å—á–∞–Ω–æ-—Ç–æ—Ä—Ñ—è–Ω–æ–π</option>";
        html += "</select></div>";

        html += "</div>";  // –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –∞–≥—Ä–æ—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

        html += "</div>";  // –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞
        html += "<div class='section'><h2>NTP</h2>";
        html +=
            "<div class='form-group'><label for='ntp_server'>NTP —Å–µ—Ä–≤–µ—Ä:</label><input type='text' id='ntp_server' "
            "name='ntp_server' value='" +
            String(config.ntpServer) + "' required></div>";
        html +=
            "<div class='form-group'><label for='ntp_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NTP (–º—Å):</label><input "
            "type='number' id='ntp_interval' name='ntp_interval' min='10000' max='86400000' value='" +
            String(config.ntpUpdateInterval) + "'></div></div>";
    }
    html += generateButton(ButtonType::PRIMARY, UI_ICON_SAVE, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "") + "</form>";

    // –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (currentWiFiMode == WiFiMode::STA)
    {
        html += "<script>";
        html += "document.getElementById('mqtt_enabled').addEventListener('change', function() {";
        html += "  document.getElementById('mqtt_server').required = this.checked;";
        html += "});";
        html += "document.getElementById('ts_enabled').addEventListener('change', function() {";
        html += "  document.getElementById('ts_api_key').required = this.checked;";
        html += "});";
        html += "</script>";
    }

    html += "</div>" + String(getToastHTML()) + "</body></html>";
    webServer.send(200, "text/html; charset=utf-8", html);
}
