#include <WiFiClient.h>
#include "thingspeak_client.h"
#include "modbus_sensor.h"
#include "wifi_manager.h"
#include <ThingSpeak.h>
#include "jxct_device_info.h"
#include "jxct_config_vars.h"
#include "jxct_format_utils.h"
#include <NTPClient.h>
extern NTPClient* timeClient;

// URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ ThingSpeak
const char* THINGSPEAK_API_URL = "https://api.thingspeak.com/update";

static unsigned long lastTsPublish = 0;
String thingSpeakLastPublish = "";
String thingSpeakLastError = "";

void setupThingSpeak(WiFiClient& client) {
    ThingSpeak.begin(client);
}

bool sendDataToThingSpeak() {
    Serial.println("\n[ThingSpeak] === –û–¢–õ–ê–î–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===");
    Serial.printf("[ThingSpeak] Enabled: %s\n", config.thingSpeakEnabled ? "–î–ê" : "–ù–ï–¢");
    Serial.printf("[ThingSpeak] WiFi connected: %s\n", wifiConnected ? "–î–ê" : "–ù–ï–¢");
    Serial.printf("[ThingSpeak] Sensor valid: %s\n", sensorData.valid ? "–î–ê" : "–ù–ï–¢");
    Serial.printf("[ThingSpeak] Channel ID: %s\n", config.thingSpeakChannelId);
    Serial.printf("[ThingSpeak] API Key: %s\n", strlen(config.thingSpeakApiKey) > 0 ? "–ó–ê–î–ê–ù" : "–ü–£–°–¢–û–ô");
    
    if (!config.thingSpeakEnabled) {
        Serial.println("[ThingSpeak] ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!");
        return false;
    }
    if (!wifiConnected) {
        Serial.println("[ThingSpeak] ‚ùå WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        return false;
    }
    if (!sensorData.valid) {
        Serial.println("[ThingSpeak] ‚ùå –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã!");
        return false;
    }
    unsigned long now = millis();
    if (now - lastTsPublish < config.thingspeakInterval * 1000UL) {
        Serial.println("[ThingSpeak] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø—Ä–æ–ø—É—â–µ–Ω–æ");
        return false;
    }
    lastTsPublish = now;
    unsigned long channelId = strtoul(config.thingSpeakChannelId, nullptr, 10);
    
    Serial.println("[ThingSpeak] üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:");
    String temp = String(format_temperature(sensorData.temperature).c_str());
    String hum = String(format_moisture(sensorData.humidity).c_str());
    String ec = String(format_ec(sensorData.ec).c_str());
    String ph = String(format_ph(sensorData.ph).c_str());
    String n = String(format_npk(sensorData.nitrogen).c_str());
    String p = String(format_npk(sensorData.phosphorus).c_str());
    String k = String(format_npk(sensorData.potassium).c_str());
    String timestamp = String(timeClient ? timeClient->getEpochTime() : 0);
    
    Serial.printf("[ThingSpeak] Field 1 (Temp): %s\n", temp.c_str());
    Serial.printf("[ThingSpeak] Field 2 (Hum): %s\n", hum.c_str());
    Serial.printf("[ThingSpeak] Field 3 (EC): %s\n", ec.c_str());
    Serial.printf("[ThingSpeak] Field 4 (PH): %s\n", ph.c_str());
    Serial.printf("[ThingSpeak] Field 5 (N): %s\n", n.c_str());
    Serial.printf("[ThingSpeak] Field 6 (P): %s\n", p.c_str());
    Serial.printf("[ThingSpeak] Field 7 (K): %s\n", k.c_str());
    Serial.printf("[ThingSpeak] Field 8 (Time): %s\n", timestamp.c_str());
    Serial.printf("[ThingSpeak] Channel ID: %lu\n", channelId);
    
    ThingSpeak.setField(1, temp.c_str());
    ThingSpeak.setField(2, hum.c_str());
    ThingSpeak.setField(3, ec.c_str());
    ThingSpeak.setField(4, ph.c_str());
    ThingSpeak.setField(5, n.c_str());
    ThingSpeak.setField(6, p.c_str());
    ThingSpeak.setField(7, k.c_str());
    ThingSpeak.setField(8, timestamp);
    Serial.println("[ThingSpeak] üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
    int res = ThingSpeak.writeFields(channelId, config.thingSpeakApiKey);
    
    Serial.printf("[ThingSpeak] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: %d\n", res);
    if (res == 200) {
        Serial.println("[ThingSpeak] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
        thingSpeakLastPublish = String(millis());
        thingSpeakLastError = "";
        return true;
    } else if (res == -401) {
        Serial.println("[ThingSpeak] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π (15 —Å–µ–∫)");
        thingSpeakLastError = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π (15 —Å–µ–∫)";
    } else if (res == -302) {
        Serial.println("[ThingSpeak] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á");
        thingSpeakLastError = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á";
    } else if (res == -304) {
        Serial.println("[ThingSpeak] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Channel ID");
        thingSpeakLastError = "–ù–µ–≤–µ—Ä–Ω—ã–π Channel ID";
    } else if (res == 0) {
        Serial.println("[ThingSpeak] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
        thingSpeakLastError = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
    } else {
        Serial.printf("[ThingSpeak] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–æ–¥: %d\n", res);
        thingSpeakLastError = "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ThingSpeak";
    }
    return false;
} 