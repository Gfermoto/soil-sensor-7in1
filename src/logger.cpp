/**
 * @file logger.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */

#include "../include/logger.h"
#include <cstdarg>
#include <cstdio>
#include <WiFi.h>
#include <array>

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LogLevel currentLogLevel = LOG_DEBUG;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
namespace {
String getUptimeString()
{
    const unsigned long milliseconds = millis();
    unsigned long seconds = milliseconds / 1000;
    unsigned long minutes = seconds / 60;
    unsigned long hours = minutes / 60;
    const unsigned long days = hours / 24;

    seconds %= 60;
    minutes %= 60;
    hours %= 24;

    return String(days) + "–¥ " + String(hours) + "—á " + String(minutes) + "–º " + String(seconds) + "—Å";
}
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
String formatLogMessage(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    // –ë—É—Ñ–µ—Ä –Ω–∞ —Å—Ç–µ–∫–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result < 0) {
        return String("LOG FORMAT ERROR");
    }
    
    if (result < static_cast<int>(buffer.size())) {
        return String(buffer.data());
    }
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
    buffer[buffer.size() - 1] = '\0';
    return String(buffer.data());
}

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è C++ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å template parameter pack
template<typename... Args>
String formatLogMessageSafe(const char* format, Args&&... args)
{
    std::array<char, 512> buffer;
    int result = snprintf(buffer.data(), buffer.size(), format, std::forward<Args>(args)...);
    
    if (result < 0) {
        return String("LOG FORMAT ERROR");
    }
    
    if (result < static_cast<int>(buffer.size())) {
        return String(buffer.data());
    }
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
    buffer[buffer.size() - 1] = '\0';
    return String(buffer.data());
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ template —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
template<typename... Args>
void logErrorSafe(const char* format, Args&&... args)
{
    logError(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logWarnSafe(const char* format, Args&&... args)
{
    logWarn(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logInfoSafe(const char* format, Args&&... args)
{
    logInfo(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logDebugSafe(const char* format, Args&&... args)
{
    logDebug(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logSuccessSafe(const char* format, Args&&... args)
{
    logSuccess(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logSensorSafe(const char* format, Args&&... args)
{
    logSensor(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logWiFiSafe(const char* format, Args&&... args)
{
    logWiFi(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logMQTTSafe(const char* format, Args&&... args)
{
    logMQTT(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logHTTPSafe(const char* format, Args&&... args)
{
    logHTTP(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logSystemSafe(const char* format, Args&&... args)
{
    logSystem(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

template<typename... Args>
void logDataSafe(const char* format, Args&&... args)
{
    logData(formatLogMessageSafe(format, std::forward<Args>(args)...));
}

String formatLogMessage(const String& message)
{
    return message;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (String –≤–µ—Ä—Å–∏–∏)
void logError(const String& message)
{
    if (currentLogLevel < LOG_ERROR) { return; }

    Serial.print(COLOR_RED);
    Serial.print(LOG_SYMBOL_ERROR " ");
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logWarn(const String& message)
{
    if (currentLogLevel < LOG_WARN) { return; }

    Serial.print(COLOR_YELLOW);
    Serial.print(LOG_SYMBOL_WARN);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logInfo(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_BLUE);
    Serial.print(LOG_SYMBOL_INFO);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logDebug(const String& message)
{
    if (currentLogLevel < LOG_DEBUG) { return; }

    Serial.print(COLOR_CYAN);
    Serial.print(LOG_SYMBOL_DEBUG);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logSuccess(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_GREEN);
    Serial.print(LOG_SYMBOL_SUCCESS);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logSensor(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_MAGENTA);
    Serial.print(LOG_SYMBOL_SENSOR);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logWiFi(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_CYAN);
    Serial.print(LOG_SYMBOL_WIFI);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logMQTT(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_BLUE);
    Serial.print(LOG_SYMBOL_MQTT);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logHTTP(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_GREEN);
    Serial.print(LOG_SYMBOL_HTTP);
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logSystem(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_WHITE);
    Serial.print("‚öôÔ∏è  ");
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

void logData(const String& message)
{
    if (currentLogLevel < LOG_INFO) { return; }

    Serial.print(COLOR_YELLOW);
    Serial.print("üìä ");
    Serial.print(COLOR_RESET);
    Serial.println(message);
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ variadic —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
void logError(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logError(String(buffer.data()));
    } else {
        logError(String("LOG FORMAT ERROR"));
    }
}



void logWarn(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logWarn(String(buffer.data()));
    } else {
        logWarn(String("LOG FORMAT ERROR"));
    }
}

void logInfo(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logInfo(String(buffer.data()));
    } else {
        logInfo(String("LOG FORMAT ERROR"));
    }
}

void logDebug(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logDebug(String(buffer.data()));
    } else {
        logDebug(String("LOG FORMAT ERROR"));
    }
}

void logSuccess(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logSuccess(String(buffer.data()));
    } else {
        logSuccess(String("LOG FORMAT ERROR"));
    }
}

void logSensor(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logSensor(String(buffer.data()));
    } else {
        logSensor(String("LOG FORMAT ERROR"));
    }
}

void logWiFi(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logWiFi(String(buffer.data()));
    } else {
        logWiFi(String("LOG FORMAT ERROR"));
    }
}

void logMQTT(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logMQTT(String(buffer.data()));
    } else {
        logMQTT(String("LOG FORMAT ERROR"));
    }
}

void logHTTP(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logHTTP(String(buffer.data()));
    } else {
        logHTTP(String("LOG FORMAT ERROR"));
    }
}

void logSystem(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logSystem(String(buffer.data()));
    } else {
        logSystem(String("LOG FORMAT ERROR"));
    }
}

void logData(const char* format, ...)
{
    std::va_list args;
    va_start(args, format);
    
    std::array<char, 512> buffer;
    int result = vsnprintf(buffer.data(), buffer.size(), format, args);
    va_end(args);
    
    if (result >= 0) {
        logData(String(buffer.data()));
    } else {
        logData(String("LOG FORMAT ERROR"));
    }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
void logSeparator()
{
    Serial.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
}

void logNewline()
{
    Serial.println();
}

void logMemoryUsage()
{
    if (currentLogLevel < LOG_DEBUG)
    {
        return;
    }

    Serial.print(COLOR_CYAN);
    Serial.print("üîß Free heap: ");
    Serial.print(ESP.getFreeHeap());
    Serial.println(" bytes");
    Serial.print(COLOR_RESET);
}

void logSystemInfo()
{
    if (currentLogLevel < LOG_INFO)
    {
        return;
    }

    Serial.print(COLOR_BLUE);
    Serial.print("‚ÑπÔ∏è  ESP32 Chip ID: ");
    Serial.println(ESP.getChipModel());
    Serial.print(COLOR_RESET);
}

void logUptime()
{
    logSystem("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %s", getUptimeString().c_str());
}

void logWiFiStatus()
{
    if (WiFi.status() == WL_CONNECTED)
    {
        logWiFi("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ %s, IP: %s, RSSI: %d dBm", WiFi.SSID().c_str(), WiFi.localIP().toString().c_str(),
                WiFi.RSSI());
    }
    else
    {
        logWarn("WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: %d)", WiFi.status());
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏
void setLogColor(LogColor color)
{
    Serial.print(getColorCode(color));
}

void resetLogColor()
{
    Serial.print(COLOR_RESET);
}

const char* getColorCode(LogColor color)
{
    switch (color)
    {
        case LogColor::RED: return COLOR_RED;
        case LogColor::GREEN: return COLOR_GREEN;
        case LogColor::YELLOW: return COLOR_YELLOW;
        case LogColor::BLUE: return COLOR_BLUE;
        case LogColor::MAGENTA: return COLOR_MAGENTA;
        case LogColor::CYAN: return COLOR_CYAN;
        case LogColor::WHITE: return COLOR_WHITE;
        case LogColor::CYAN_DEFAULT: return COLOR_CYAN;
        default: return COLOR_RESET;
    }
}

// –£—Ç–∏–ª–∏—Ç—ã
void printHeader(const String& title, LogColor color)
{
    Serial.print(getColorCode(color));
    Serial.print("‚ïê‚ïê‚ïê ");
    Serial.print(title);
    Serial.println(" ‚ïê‚ïê‚ïê");
    Serial.print(COLOR_RESET);
}

void printSubHeader(const String& title, LogColor color)
{
    Serial.print(getColorCode(color));
    Serial.print("‚îÄ‚îÄ‚îÄ ");
    Serial.print(title);
    Serial.println(" ‚îÄ‚îÄ‚îÄ");
    Serial.print(COLOR_RESET);
}

void printTimeStamp()
{
    Serial.print("[");
    Serial.print(millis());
    Serial.print("] ");
}
