#include <LittleFS.h>
#include "calibration_manager.h"
#include "jxct_ui_system.h"
#include "logger.h"
#include "sensor_compensation.h"
#include "validation_utils.h"
#include "web/csrf_protection.h"  // üîí CSRF –∑–∞—â–∏—Ç–∞
#include "web_routes.h"

// –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö)
// extern WebServer webServer;  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ web_routes.h
// extern String navHtml();  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ wifi_manager.h

// ------------------------------
// HTML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (–ø—Ä–æ—Å—Ç–æ–π MVP)
// ------------------------------

namespace {
String generateCalibrationPage()
{
    String html;
    html += generatePageHeader("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", UI_ICON_CALIBRATION);

    html += "<div class='container'>";
    html += navHtml();
    html += "<h1>‚öôÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞</h1>";
    html += "<p>–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –¥–∞—Ç—á–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π.";
    html += " –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—á–≤—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (CSV).</p>";

    // –§–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—á–≤—ã
    html += "<form action='/calibration/save' method='post' enctype='multipart/form-data'>";
    html += getCSRFHiddenField();  // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
    html += "<div class='section'><h2>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã</h2>";
    html +=
        "<div class='form-group'><label for='soil_profile'>–¢–∏–ø –ø–æ—á–≤—ã:</label><select id='soil_profile' "
        "name='soil_profile'>";
    html += "<option value='sand'>–ü–µ—Å–æ–∫</option>";
    html += "<option value='sandpeat'>–ü–µ—Å—á–∞–Ω–æ-—Ç–æ—Ä—Ñ—è–Ω–æ–π</option>";
    html += "<option value='loam'>–°—É–≥–ª–∏–Ω–æ–∫</option>";
    html += "<option value='peat'>–¢–æ—Ä—Ñ</option>";
    html += "<option value='clay'>–ì–ª–∏–Ω–∞</option>";
    html += "</select></div></div>";

    // –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
    html += "<div class='section'><h2>–ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞";
    // –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
    const bool hasSand = CalibrationManager::hasTable(SoilProfile::SAND);
    const bool hasSandPeat = CalibrationManager::hasTable(SoilProfile::SANDPEAT);
    const bool hasLoam = CalibrationManager::hasTable(SoilProfile::LOAM);
    const bool hasClay = CalibrationManager::hasTable(SoilProfile::CLAY);
    const bool hasPeat = CalibrationManager::hasTable(SoilProfile::PEAT);
    html += " <span style='font-size:14px;color:#888'>(";
    html += "–ü–µ—Å–æ–∫:" + String(hasSand ? "‚úÖ" : "‚ùå") + ", ";
    html += "–ü–µ—Å—á.-—Ç–æ—Ä—Ñ:" + String(hasSandPeat ? "‚úÖ" : "‚ùå") + ", ";
    html += "–°—É–≥–ª–∏–Ω–æ–∫:" + String(hasLoam ? "‚úÖ" : "‚ùå") + ", ";
    html += "–ì–ª–∏–Ω–∞:" + String(hasClay ? "‚úÖ" : "‚ùå") + ", ";
    html += "–¢–æ—Ä—Ñ:" + String(hasPeat ? "‚úÖ" : "‚ùå") + ")</span></h2>";
    html +=
        "<div class='form-group'><label for='calibration_csv'>–§–∞–π–ª CSV:</label><input type='file' id='calibration_csv' "
        "name='calibration_csv' accept='.csv' required></div></div>";

    html += generateButton(ButtonType::PRIMARY, ButtonConfig{UI_ICON_SAVE, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", ""});
    html += "</form>";

    html += "</div>";

    html += generatePageFooter();
    return html;
}

// ------------------------------
//    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
// ------------------------------

void handleCalibrationPage()
{
    String html = generateCalibrationPage();
    if (webServer.hasArg("ok"))
    {
        html.replace("<div class='container'>",
                     "<div class='container'><div class='msg msg-success'>‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</div>");
    }
    webServer.send(200, "text/html; charset=utf-8", html);
}

// –ë—É—Ñ–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
File uploadFile;
SoilProfile uploadProfile = SoilProfile::SAND;
}

void handleCalibrationUpload()  // ‚úÖ –£–±–∏—Ä–∞–µ–º static - —Ñ—É–Ω–∫—Ü–∏—è extern –≤ header
{
    HTTPUpload& upload = webServer.upload();
    if (upload.status == UPLOAD_FILE_START)
    {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
        const String profileStr = webServer.arg("soil_profile");
        if (profileStr == "sand") { uploadProfile = SoilProfile::SAND; }
        else if (profileStr == "sandpeat") { uploadProfile = SoilProfile::SANDPEAT; }
        else if (profileStr == "loam") { uploadProfile = SoilProfile::LOAM; }
        else if (profileStr == "peat") { uploadProfile = SoilProfile::PEAT; }
        else if (profileStr == "clay") { uploadProfile = SoilProfile::CLAY; }

        CalibrationManager::init();
        const char* path = CalibrationManager::profileToFilename(uploadProfile);
        uploadFile = LittleFS.open(path, "w");
        if (!uploadFile)
        {
            logErrorSafe("\1", path);
        }
    }
    else if (upload.status == UPLOAD_FILE_WRITE)
    {
        if (uploadFile)
        {
            uploadFile.write(upload.buf, upload.currentSize);
        }
    }
    else if (upload.status == UPLOAD_FILE_END)
    {
        if (uploadFile)
        {
            uploadFile.close();
            logSuccessSafe("\1", upload.totalSize);
        }
        webServer.sendHeader("Location", "/calibration?ok=1", true);
        webServer.send(302, "text/plain", "Redirect");
    }
}

// ------------------------------
//       –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// ------------------------------

void setupCalibrationRoutes()
{
    logInfo("–ú–∞—Ä—à—Ä—É—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    CalibrationManager::init();

    webServer.on("/calibration", HTTP_GET, handleCalibrationPage);
    webServer.on(
        "/calibration/save", HTTP_POST,
        []()
        {
            // –ü—É—Å—Ç–æ–π ack, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ uploadHandler
        },
        handleCalibrationUpload);
}
