/**
 * @file routes_config.cpp
 * @brief –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * @details –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

#include <ArduinoJson.h>
#include "../../include/jxct_config_vars.h"
#include "../../include/jxct_constants.h"
#include "../../include/jxct_device_info.h"
#include "../../include/jxct_strings.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/logger.h"
#include "../../include/validation_utils.h"     // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#include "../../include/web/csrf_protection.h"  // üîí CSRF –∑–∞—â–∏—Ç–∞
#include "../../include/web_routes.h"
#include "../wifi_manager.h"

// --- API v1 helpers ---
static String importedJson;  // NOLINT(misc-use-anonymous-namespace)

// –û–±—ä—è–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
static void sendConfigExportJson();

void setupConfigRoutes()
{
    // –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω)
    webServer.on(
        "/intervals", HTTP_GET,
        []()
        {
            logWebRequest("GET", "/intervals", webServer.client().remoteIP().toString());

            if (currentWiFiMode == WiFiMode::AP)
            {
                webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML,
                               generateApModeUnavailablePage("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã", UI_ICON_INTERVALS));
                return;
            }

            String html = generatePageHeader("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã", UI_ICON_INTERVALS);
            html += navHtml();
            html += "<h1>" UI_ICON_INTERVALS " –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤</h1>";
            html += "<form action='/save_intervals' method='post'>";
            html += getCSRFHiddenField();  // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω

            html += "<div class='section'><h2>üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–ø—Ä–æ—Å–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h2>";
            html += "<div class='form-group'><label for='sensor_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –¥–∞—Ç—á–∏–∫–∞ (—Å–µ–∫):</label>";
            html += "<input type='number' id='sensor_interval' name='sensor_interval' min='" +
                    String(CONFIG_SENSOR_INTERVAL_MIN_SEC) + "' max='" + String(CONFIG_SENSOR_INTERVAL_MAX_SEC) +
                    "' value='" + String(config.sensorReadInterval / CONVERSION_SEC_TO_MS) + "' required>";
            html += "<div class='help'>" + String(CONFIG_SENSOR_INTERVAL_MIN_SEC) + "-" +
                    String(CONFIG_SENSOR_INTERVAL_MAX_SEC) +
                    " —Å–µ–∫. –¢–µ–∫—É—â–µ–µ: " + String(config.sensorReadInterval / CONVERSION_SEC_TO_MS) +
                    " —Å–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 —Å–µ–∫)</div></div>";

            html += "<div class='form-group'><label for='mqtt_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª MQTT –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–º–∏–Ω):</label>";
            html += "<input type='number' id='mqtt_interval' name='mqtt_interval' min='" +
                    String(CONFIG_MQTT_INTERVAL_MIN_MIN) + "' max='" + String(CONFIG_MQTT_INTERVAL_MAX_MIN) +
                    "' value='" + String(config.mqttPublishInterval / CONVERSION_MIN_TO_MS) + "' required>";
            html += "<div class='help'>" + String(CONFIG_MQTT_INTERVAL_MIN_MIN) + "-" +
                    String(CONFIG_MQTT_INTERVAL_MAX_MIN) +
                    " –º–∏–Ω. –¢–µ–∫—É—â–µ–µ: " + String(config.mqttPublishInterval / CONVERSION_MIN_TO_MS) + " –º–∏–Ω</div></div>";

            html += "<div class='form-group'><label for='ts_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª ThingSpeak (–º–∏–Ω):</label>";
            html += "<input type='number' id='ts_interval' name='ts_interval' min='" +
                    String(CONFIG_THINGSPEAK_INTERVAL_MIN_MIN) + "' max='" +
                    String(CONFIG_THINGSPEAK_INTERVAL_MAX_MIN) + "' value='" +
                    String(config.thingSpeakInterval / CONVERSION_MIN_TO_MS) + "' required>";
            html += "<div class='help'>" + String(CONFIG_THINGSPEAK_INTERVAL_MIN_MIN) + "-" +
                    String(CONFIG_THINGSPEAK_INTERVAL_MAX_MIN) +
                    " –º–∏–Ω. –¢–µ–∫—É—â–µ–µ: " + String(config.thingSpeakInterval / CONVERSION_MIN_TO_MS) + " –º–∏–Ω</div></div>";

            html +=
                "<div class='form-group'><label for='web_interval'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å–µ–∫):</label>";
            html += "<input type='number' id='web_interval' name='web_interval' min='" +
                    String(CONFIG_WEB_INTERVAL_MIN_SEC) + "' max='" + String(CONFIG_WEB_INTERVAL_MAX_SEC) +
                    "' value='" + String(config.webUpdateInterval / CONVERSION_SEC_TO_MS) + "' required>";
            html +=
                "<div class='help'>" + String(CONFIG_WEB_INTERVAL_MIN_SEC) + "-" + String(CONFIG_WEB_INTERVAL_MAX_SEC) +
                " —Å–µ–∫. –¢–µ–∫—É—â–µ–µ: " + String(config.webUpdateInterval / CONVERSION_SEC_TO_MS) + " —Å–µ–∫</div></div></div>";

            html += "<div class='section'><h2>üéØ –ü–æ—Ä–æ–≥–∏ –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞</h2>";
            html += "<div class='form-group'><label for='delta_temp'>–ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬∞C):</label>";
            html += "<input type='number' id='delta_temp' name='delta_temp' min='0.1' max='5.0' step='0.1' value='" +
                    String(config.deltaTemperature) + "' required>";
            html += "<div class='help'>0.1-5.0¬∞C. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ</div></div>";

            html += "<div class='form-group'><label for='delta_hum'>–ü–æ—Ä–æ–≥ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (%):</label>";
            html += "<input type='number' id='delta_hum' name='delta_hum' min='" + String(CONFIG_DELTA_HUMIDITY_MIN) +
                    "' max='" + String(CONFIG_DELTA_HUMIDITY_MAX) + "' step='" + String(CONFIG_STEP_HUMIDITY) +
                    "' value='" + String(config.deltaHumidity) + "' required>";
            html += "<div class='help'>" + String(CONFIG_DELTA_HUMIDITY_MIN) + "-" + String(CONFIG_DELTA_HUMIDITY_MAX) +
                    "%. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ</div></div>";

            html += "<div class='form-group'><label for='delta_ph'>–ü–æ—Ä–æ–≥ pH:</label>";
            html += "<input type='number' id='delta_ph' name='delta_ph' min='" + String(CONFIG_DELTA_PH_MIN) +
                    "' max='" + String(CONFIG_DELTA_PH_MAX) + "' step='" + String(CONFIG_STEP_PH) + "' value='" +
                    String(config.deltaPh) + "' required>";
            html += "<div class='help'>" + String(CONFIG_DELTA_PH_MIN) + "-" + String(CONFIG_DELTA_PH_MAX) +
                    ". –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ</div></div>";

            html += "<div class='form-group'><label for='delta_ec'>–ü–æ—Ä–æ–≥ EC (¬µS/cm):</label>";
            html += "<input type='number' id='delta_ec' name='delta_ec' min='" + String(CONFIG_DELTA_EC_MIN) +
                    "' max='" + String(CONFIG_DELTA_EC_MAX) + "' value='" + String((int)config.deltaEc) + "' required>";
            html += "<div class='help'>" + String(CONFIG_DELTA_EC_MIN) + "-" + String(CONFIG_DELTA_EC_MAX) +
                    " ¬µS/cm. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ</div></div>";

            html += "<div class='form-group'><label for='delta_npk'>–ü–æ—Ä–æ–≥ NPK (mg/kg):</label>";
            html += "<input type='number' id='delta_npk' name='delta_npk' min='" + String(CONFIG_DELTA_NPK_MIN) +
                    "' max='" + String(CONFIG_DELTA_NPK_MAX) + "' value='" + String((int)config.deltaNpk) +
                    "' required>";
            html += "<div class='help'>" + String(CONFIG_DELTA_NPK_MIN) + "-" + String(CONFIG_DELTA_NPK_MAX) +
                    " mg/kg. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ</div></div></div>";

            html += "<div class='section'><h2>üìà –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ</h2>";
            html += "<div class='form-group'><label for='avg_window'>–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è:</label>";
            html += "<input type='number' id='avg_window' name='avg_window' min='" + String(CONFIG_AVG_WINDOW_MIN) +
                    "' max='" + String(CONFIG_AVG_WINDOW_MAX) + "' value='" + String(config.movingAverageWindow) +
                    "' required>";
            html += "<div class='help'>" + String(CONFIG_AVG_WINDOW_MIN) + "-" + String(CONFIG_AVG_WINDOW_MAX) +
                    " –∏–∑–º–µ—Ä–µ–Ω–∏–π. –ë–æ–ª—å—à–µ = –ø–ª–∞–≤–Ω–µ–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Ä–µ–∞–∫—Ü–∏—è</div></div>";

            html += "<div class='form-group'><label for='force_cycles'>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (—Ü–∏–∫–ª–æ–≤):</label>";
            html += "<input type='number' id='force_cycles' name='force_cycles' min='" +
                    String(CONFIG_FORCE_CYCLES_MIN) + "' max='" + String(CONFIG_FORCE_CYCLES_MAX) + "' value='" +
                    String(config.forcePublishCycles) + "' required>";
            html += "<div class='help'>" + String(CONFIG_FORCE_CYCLES_MIN) + "-" + String(CONFIG_FORCE_CYCLES_MAX) +
                    " —Ü–∏–∫–ª–æ–≤. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ N —Ü–∏–∫–ª–æ–≤ –¥–∞–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π</div></div>";

            // –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—ã–±—Ä–æ—Å–æ–≤
            html += "<div class='form-group'><label for='filter_algo'>–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</label>";
            html += "<select id='filter_algo' name='filter_algo' required>";
            html += "<option value='0'" + String(config.filterAlgorithm == 0 ? " selected" : "") +
                    ">–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ</option>";
            html += "<option value='1'" + String(config.filterAlgorithm == 1 ? " selected" : "") +
                    ">–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</option>";
            html += "</select>";
            html += "<div class='help'>–°—Ä–µ–¥–Ω–µ–µ - –±—ã—Å—Ç—Ä–µ–µ, –º–µ–¥–∏–∞–Ω–∞ - —É—Å—Ç–æ–π—á–∏–≤–µ–µ –∫ –≤—ã–±—Ä–æ—Å–∞–º</div></div>";

            html += "<div class='form-group'><label for='outlier_filter'>–§–∏–ª—å—Ç—Ä –≤—ã–±—Ä–æ—Å–æ–≤ >2œÉ:</label>";
            html += "<select id='outlier_filter' name='outlier_filter' required>";
            html += "<option value='0'" + String(config.outlierFilterEnabled == 0 ? " selected" : "") +
                    ">–û—Ç–∫–ª—é—á–µ–Ω</option>";
            html +=
                "<option value='1'" + String(config.outlierFilterEnabled == 1 ? " selected" : "") + ">–í–∫–ª—é—á–µ–Ω</option>";
            html += "</select>";
            html +=
                "<div class='help'>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ—Ç–∫–ª–æ–Ω—è—é—â–∏–µ—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 "
                "—Å–∏–≥–º–∞</div></div></div>";

            html += generateButton(ButtonType::PRIMARY, UI_ICON_SAVE, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "");
            html +=
                generateButton(ButtonType::SECONDARY, UI_ICON_RESET, "–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é (1 —Å–µ–∫ + –º–∏–Ω. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)",
                               "location.href='/reset_intervals'");
            html += "</form>";
            html += generatePageFooter();

            webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
        });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    webServer.on("/save_intervals", HTTP_POST,
                 []()
                 {
                     logWebRequest("POST", "/save_intervals", webServer.client().remoteIP().toString());

                     // ‚úÖ CSRF –∑–∞—â–∏—Ç–∞
                     if (!checkCSRFSafety())
                     {
                         logWarn("CSRF –∞—Ç–∞–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ /save_intervals –æ—Ç %s",
                                 webServer.client().remoteIP().toString().c_str());
                         const String html = generateErrorPage(HTTP_FORBIDDEN, "Forbidden: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω");
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_HTML, html);
                         return;
                     }

                     if (currentWiFiMode == WiFiMode::AP)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_PLAIN, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
                         return;
                     }

                     // ======= –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• =======
                     const unsigned long sensorMs = webServer.arg("sensor_interval").toInt() * CONVERSION_SEC_TO_MS;
                     const unsigned long mqttMs = webServer.arg("mqtt_interval").toInt() * CONVERSION_MIN_TO_MS;
                     const unsigned long tsMs = webServer.arg("ts_interval").toInt() * CONVERSION_MIN_TO_MS;
                     const unsigned long webMs = webServer.arg("web_interval").toInt() * CONVERSION_SEC_TO_MS;

                     ValidationResult valSensor = validateSensorReadInterval(sensorMs);
                     ValidationResult valMqtt = validateMQTTPublishInterval(mqttMs);
                     ValidationResult valTs = validateThingSpeakInterval(tsMs);

                     if (!valSensor.isValid || !valMqtt.isValid || !valTs.isValid)
                     {
                         String html =
                             generateErrorPage(HTTP_BAD_REQUEST, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: " +
                                                                     String(!valSensor.isValid ? valSensor.message
                                                                            : !valMqtt.isValid ? valMqtt.message
                                                                                               : valTs.message));
                         webServer.send(HTTP_BAD_REQUEST, HTTP_CONTENT_TYPE_HTML, html);
                         return;
                     }

                     // ======= –°–û–•–†–ê–ù–Ø–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò =======
                     config.sensorReadInterval = sensorMs;
                     config.mqttPublishInterval = mqttMs;
                     config.thingSpeakInterval = tsMs;
                     config.webUpdateInterval = webMs;

                     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–µ–ª—å—Ç–∞-—Ñ–∏–ª—å—Ç—Ä–∞
                     config.deltaTemperature = webServer.arg("delta_temp").toFloat();
                     config.deltaHumidity = webServer.arg("delta_hum").toFloat();
                     config.deltaPh = webServer.arg("delta_ph").toFloat();
                     config.deltaEc = webServer.arg("delta_ec").toFloat();
                     config.deltaNpk = webServer.arg("delta_npk").toFloat();

                     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
                     config.movingAverageWindow = webServer.arg("avg_window").toInt();
                     config.forcePublishCycles = webServer.arg("force_cycles").toInt();

                     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—ã–±—Ä–æ—Å–æ–≤
                     config.filterAlgorithm = webServer.arg("filter_algo").toInt();
                     config.outlierFilterEnabled = webServer.arg("outlier_filter").toInt();

                     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ NVS
                     saveConfig();

                     String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta http-equiv='refresh' "
                         "content='3;url=/intervals'>";
                     html += "<title>" UI_ICON_SUCCESS " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</title>";
                     html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                     html += "<h1>" UI_ICON_SUCCESS " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</h1>";
                     html += "<div class='msg msg-success'>" UI_ICON_SUCCESS " –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É</div>";
                     html += "<p><strong>–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</strong><br>";
                     html += "üìä –î–∞—Ç—á–∏–∫: " + String(config.sensorReadInterval / CONVERSION_SEC_TO_MS) + " —Å–µ–∫<br>";
                     html += "üì° MQTT: " + String(config.mqttPublishInterval / CONVERSION_MIN_TO_MS) + " –º–∏–Ω<br>";
                     html += "üìà ThingSpeak: " + String(config.thingSpeakInterval / CONVERSION_MIN_TO_MS) + " –º–∏–Ω</p>";
                     html += "<p><em>–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</em></p>";
                     html += "</div>" + String(getToastHTML()) + "</body></html>";
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                 });

    // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∫ —É–º–æ–ª—á–∞–Ω–∏—é
    webServer.on("/reset_intervals", HTTP_GET,
                 []()
                 {
                     logWebRequest("GET", "/reset_intervals", webServer.client().remoteIP().toString());

                     if (currentWiFiMode == WiFiMode::AP)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_PLAIN, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
                         return;
                     }

                     // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø + –ß–ê–°–¢–´–ô MQTT)
                     config.sensorReadInterval = SENSOR_READ_INTERVAL;
                     config.mqttPublishInterval = MQTT_PUBLISH_INTERVAL;
                     config.thingSpeakInterval = THINGSPEAK_INTERVAL;
                     config.webUpdateInterval = WEB_UPDATE_INTERVAL;
                     config.deltaTemperature = DELTA_TEMPERATURE;       // 0.1¬∞C
                     config.deltaHumidity = DELTA_HUMIDITY;             // 0.5%
                     config.deltaPh = DELTA_PH;                         // 0.01 pH
                     config.deltaEc = DELTA_EC;                         // 10 ¬µS/cm
                     config.deltaNpk = DELTA_NPK;                       // 1 mg/kg
                     config.movingAverageWindow = 5;                    // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                     config.forcePublishCycles = FORCE_PUBLISH_CYCLES;  // –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤
                     config.filterAlgorithm = 0;                        // —Å—Ä–µ–¥–Ω–µ–µ
                     config.outlierFilterEnabled = 0;                   // –æ—Ç–∫–ª—é—á–µ–Ω

                     saveConfig();

                     String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta http-equiv='refresh' "
                         "content='2;url=/intervals'>";
                     html += "<title>" UI_ICON_RESET " –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫</title>";
                     html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                     html += "<h1>" UI_ICON_RESET " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã</h1>";
                     html += "<div class='msg msg-success'>" UI_ICON_SUCCESS
                             " –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</div>";
                     html += "<p><em>–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...</em></p>";
                     html += "</div>" + String(getToastHTML()) + "</body></html>";
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                 });

    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    webServer.on("/config_manager", HTTP_GET,
                 []()
                 {
                     logWebRequest("GET", "/config_manager", webServer.client().remoteIP().toString());

                     if (currentWiFiMode == WiFiMode::AP)
                     {
                         String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>" UI_ICON_FOLDER
                                       " –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</title>";
                         html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                         html += "<h1>" UI_ICON_FOLDER " –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</h1>";
                         html += "<div class='msg msg-error'>" UI_ICON_ERROR
                                 " –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞</div></div></body></html>";
                         webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                         return;
                     }

                     String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' "
                         "content='width=device-width, initial-scale=1.0'>";
                     html += "<title>" UI_ICON_FOLDER " –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π JXCT</title>";
                     html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                     html += navHtml();
                     html += "<h1>" UI_ICON_FOLDER " –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</h1>";

                     if (webServer.hasArg("import_ok"))
                     {
                         html += "<div class='msg msg-success'>‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</div>";
                     }

                     html += "<div class='section'>";
                     html += "<h2>üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>";
                     html += "<p>–°–∫–∞—á–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–ø–∞—Ä–æ–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏):</p>";
                     html += generateButton(ButtonType::PRIMARY, "üì•", "–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                                            "location.href='/api/v1/config/export'");
                     html += "</div>";

                     html += "<div class='section'>";
                     html += "<h2>üì• –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>";
                     html += "<p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:</p>";
                     html += "<form action='/api/config/import' method='post' enctype='multipart/form-data'>";
                     html += getCSRFHiddenField();  // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
                     html += "<input type='file' name='config' accept='.json' required>";
                     html += generateButton(ButtonType::SECONDARY, "üì§", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", "");
                     html += "</form>";
                     html += "</div>";

                     html += "</div>" + String(getToastHTML()) + "</body></html>";
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                 });

    // API v1 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    webServer.on(API_CONFIG_EXPORT, HTTP_GET, sendConfigExportJson);

    // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ multipart/form-data (—Ñ–∞–π–ª JSON)
    webServer.on(
        "/api/config/import", HTTP_POST,
        // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        []()
        {
            logWebRequest("POST", "/api/config/import", webServer.client().remoteIP().toString());

            if (currentWiFiMode == WiFiMode::AP)
            {
                webServer.send(HTTP_FORBIDDEN, "application/json", "{\"error\":\"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ AP\"}");
                importedJson = "";
                return;
            }

            // ‚úÖ CSRF –∑–∞—â–∏—Ç–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!
            if (!checkCSRFSafety())
            {
                logWarn("CSRF –∞—Ç–∞–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ /api/config/import –æ—Ç %s",
                        webServer.client().remoteIP().toString().c_str());
                webServer.send(HTTP_FORBIDDEN, "application/json", "{\"error\":\"CSRF token invalid\"}");
                importedJson = "";
                return;
            }

            // –ü–∞—Ä—Å–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π JSON
            StaticJsonDocument<CONFIG_JSON_DOC_SIZE> doc;
            DeserializationError err = deserializeJson(doc, importedJson);
            if (err)
            {
                String resp = String("{\"error\":\"–û—à–∏–±–∫–∞ JSON: ") + err.c_str() + "\"}";
                webServer.send(HTTP_BAD_REQUEST, "application/json", resp);
                importedJson = "";
                return;
            }

            // --- –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é --- (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä, —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            if (doc.containsKey("wifi"))
            {
                JsonObject wifi = doc["wifi"];
                strlcpy(config.ssid, wifi["ssid"].as<const char*>(), sizeof(config.ssid));
                strlcpy(config.password, wifi["password"].as<const char*>(), sizeof(config.password));
            }
            if (doc.containsKey("mqtt"))
            {
                JsonObject mqtt = doc["mqtt"];
                config.flags.mqttEnabled = mqtt["enabled"].as<bool>();
                strlcpy(config.mqttServer, mqtt["server"].as<const char*>(), sizeof(config.mqttServer));
                config.mqttPort = mqtt["port"].as<int>();
                strlcpy(config.mqttUser, mqtt["user"].as<const char*>(), sizeof(config.mqttUser));
                strlcpy(config.mqttPassword, mqtt["password"].as<const char*>(), sizeof(config.mqttPassword));
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ NVS
            saveConfig();
            importedJson = "";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 303 Redirect, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –≤–µ—Ä–Ω—É–ª—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            webServer.sendHeader("Location", "/config_manager?import_ok=1", true);
            webServer.send(HTTP_SEE_OTHER, "text/plain", "Redirect");
        },
        // uploadHandler: –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
        []()
        {
            HTTPUpload& up = webServer.upload();
            if (up.status == UPLOAD_FILE_START)
            {
                importedJson = "";
            }
            else if (up.status == UPLOAD_FILE_WRITE)
            {
                importedJson += String((const char*)up.buf, up.currentSize);
            }
            else if (up.status == UPLOAD_FILE_END)
            {
                // –Ω–∏—á–µ–≥–æ, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
            }
        });

    logDebug("–ú–∞—Ä—à—Ä—É—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /intervals, /config_manager, /api/v1/config/export");
}

// ---------------------------------------------------------------------------
// API v1: /api/v1/config/export
// ---------------------------------------------------------------------------
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendConfigExportJson()
{
    logWebRequest("GET", webServer.uri(), webServer.client().remoteIP().toString());

    if (currentWiFiMode == WiFiMode::AP)
    {
        webServer.send(HTTP_FORBIDDEN, "application/json", "{\"error\":\"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞\"}");
        return;
    }

    StaticJsonDocument<CONFIG_JSON_ROOT_SIZE> root;

    // MQTT
    JsonObject mqtt = root.createNestedObject("mqtt");
    mqtt["enabled"] = (bool)config.flags.mqttEnabled;
    mqtt["server"] = "YOUR_MQTT_SERVER_HERE";
    mqtt["port"] = config.mqttPort;
    mqtt["user"] = "YOUR_MQTT_USER_HERE";
    mqtt["password"] = "YOUR_MQTT_PASSWORD_HERE";

    // ThingSpeak
    JsonObject ts = root.createNestedObject("thingspeak");
    ts["enabled"] = (bool)config.flags.thingSpeakEnabled;
    ts["channel_id"] = "YOUR_CHANNEL_ID_HERE";
    ts["api_key"] = "YOUR_API_KEY_HERE";

    // Intervals
    JsonObject intervals = root.createNestedObject("intervals");
    intervals["sensor_read"] = config.sensorReadInterval;
    intervals["mqtt_publish"] = config.mqttPublishInterval;
    intervals["thingspeak"] = config.thingSpeakInterval;
    intervals["web_update"] = config.webUpdateInterval;

    // Filters
    JsonObject filters = root.createNestedObject("filters");
    filters["delta_temperature"] = config.deltaTemperature;
    filters["delta_humidity"] = config.deltaHumidity;
    filters["delta_ph"] = config.deltaPh;
    filters["delta_ec"] = config.deltaEc;
    filters["delta_npk"] = config.deltaNpk;
    filters["moving_average_window"] = config.movingAverageWindow;
    filters["force_publish_cycles"] = config.forcePublishCycles;
    filters["filter_algorithm"] = config.filterAlgorithm;
    filters["outlier_filter_enabled"] = config.outlierFilterEnabled;

    // Device flags
    JsonObject device = root.createNestedObject("device");
    device["use_real_sensor"] = (bool)config.flags.useRealSensor;
    device["hass_enabled"] = (bool)config.flags.hassEnabled;

    root["export_timestamp"] = millis();

    String json;
    serializeJson(root, json);

    webServer.sendHeader("Content-Disposition", "attachment; filename=\"jxct_config_" + String(millis()) + ".json\"");
    webServer.send(HTTP_OK, "application/json", json);
}
