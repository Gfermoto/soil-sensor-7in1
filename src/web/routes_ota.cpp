#include <Arduino.h>
#include <ArduinoJson.h>
#include <Update.h>
#include "../../include/jxct_config_vars.h"
#include "../../include/jxct_constants.h"
#include "../../include/jxct_strings.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/logger.h"
#include "../../include/version.h"
#include "../../include/web_routes.h"
#include "../wifi_manager.h"
#include "ota_manager.h"

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
namespace
{
bool isLocalUploadActive = false;
size_t localUploadProgress = 0;
size_t localUploadTotal = 0;
String localUploadStatus = "idle";

}  // namespace

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ---
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendOtaStatusJson();
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void handleFirmwareUpload();

void setupOtaRoutes()
{
    logDebug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OTA –º–∞—Ä—à—Ä—É—Ç–æ–≤");

    // API: —Å—Ç–∞—Ç—É—Å OTA
    webServer.on("/api/ota/status", HTTP_GET, sendOtaStatusJson);

    // API: —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    webServer.on("/api/ota/check", HTTP_POST,
                 []()
                 {
                     logWebRequest("POST", "/api/ota/check", webServer.client().remoteIP().toString());
                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_JSON, "{\"error\":\"unavailable\"}");
                         return;
                     }
                     triggerOtaCheck();  // —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç handleOTA()
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":true}");
                 });

    // API: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    webServer.on("/api/ota/install", HTTP_POST,
                 []()
                 {
                     logWebRequest("POST", "/api/ota/install", webServer.client().remoteIP().toString());
                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_JSON, "{\"error\":\"unavailable\"}");
                         return;
                     }

                     // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
                     triggerOtaInstall();
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":true}");
                 });

    // HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    webServer.on(
        "/updates", HTTP_GET,
        []()
        {
            logWebRequest("GET", "/updates", webServer.client().remoteIP().toString());

            if (currentWiFiMode == WiFiMode::AP)
            {
                webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, generateApModeUnavailablePage("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è", "üöÄ"));
                return;
            }

            String html = generatePageHeader("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è", "üöÄ");
            html += navHtml();
            html += "<h1>üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏</h1>";

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –±–ª–æ–∫–µ
            html +=
                "<div class='info-block' "
                "style='background:#f8f9fa;padding:15px;border-radius:8px;margin-bottom:20px;'>";
            html += "<div style='display:flex;justify-content:space-between;align-items:center;'>";
            html += "<div><b>üì± –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> " + String(JXCT_VERSION_STRING) + "</div>";
            html += "<div id='otaStatus' style='color:#666;font-style:italic;'>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</div>";
            html += "</div></div>";

            // –ï–¥–∏–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            html += "<div id='progressContainer' style='display:none;margin-bottom:20px;'>";
            html += "<div style='margin-bottom:8px;'><span id='progressText'>–ü—Ä–æ–≥—Ä–µ—Å—Å</span></div>";
            html += "<div style='width:100%;background:#e9ecef;border-radius:6px;overflow:hidden;height:24px;'>";
            html +=
                "<div id='progressFill' "
                "style='width:0%;height:100%;background:linear-gradient(90deg,#28a745,#20c997);transition:width "
                "0.3s;display:flex;align-items:center;justify-content:center;color:white;font-weight:bold;font-size:"
                "12px;'></div>";
            html += "</div></div>";

            // –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            html +=
                "<div class='section' style='background:white;padding:20px;border-radius:8px;box-shadow:0 2px 4px "
                "rgba(0,0,0,0.1);margin-bottom:20px;'>";
            html += "<h3 style='margin-top:0;color:#495057;'>üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞</h3>";

            // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            html += "<div style='display:flex;gap:10px;flex-wrap:wrap;'>";
            {
                String btnCheck = generateButton(ButtonType::OUTLINE, ButtonConfig{"üîç", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", ""});
                btnCheck.replace("<button ", "<button id='btnCheck' ");
                html += btnCheck;
            }
            html +=
                "<button id='btnInstall' style='display:none;' class='btn btn-success'>‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>";
            html += "</div></div>";

            // –ë–ª–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            html +=
                "<div class='section' style='background:white;padding:20px;border-radius:8px;box-shadow:0 2px 4px "
                "rgba(0,0,0,0.1);'>";
            html += "<h3 style='margin-top:0;color:#495057;'>üìÅ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h3>";
            html +=
                "<p style='color:#6c757d;margin-bottom:15px;'>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ (.bin) —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</p>";
            html += "<div style='margin-bottom:15px;'>";
            html +=
                "<input type='file' name='firmware' accept='.bin' required style='width:100%;padding:10px;border:2px "
                "dashed #dee2e6;border-radius:6px;background:#f8f9fa;'>";
            html += "</div>";
            html += "<form id='uploadForm' enctype='multipart/form-data'>";
            {
                const String uploadBtn = generateButton(ButtonType::SECONDARY, ButtonConfig{"‚¨ÜÔ∏è", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É", ""});
                html += uploadBtn;
            }
            html += "</form></div>";

            // JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            html += "<script>\n";
            html += "let isOtaActive = false;\n";
            html += "let updateAvailable = false;\n";
            html += "\n";
            html += "function showProgress(text, percent) {\n";
            html += "  const container = document.getElementById('progressContainer');\n";
            html += "  const fill = document.getElementById('progressFill');\n";
            html += "  const textEl = document.getElementById('progressText');\n";
            html += "  container.style.display = 'block';\n";
            html += "  textEl.textContent = text;\n";
            html += "  fill.style.width = percent + '%';\n";
            html += "  fill.textContent = percent + '%';\n";
            html += "}\n";
            html += "\n";
            html += "function hideProgress() {\n";
            html += "  document.getElementById('progressContainer').style.display = 'none';\n";
            html += "}\n";
            html += "\n";
            html += "function updateStatus() {\n";
            html += "  fetch('/api/ota/status').then(r=>r.json()).then(j=>{\n";
            html += "    const status = j.status;\n";
            html += "    const statusEl = document.getElementById('otaStatus');\n";
            html += "    statusEl.textContent = status;\n";
            html += "    // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞: –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ\n";
            html += "    statusEl.style.color = '#666';\n";
            html += "    \n";
            html += "    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n";
            html += "    if (j.localUpload) {\n";
            html += "      // –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n";
            html += "      if (j.total > 0) {\n";
            html += "        const percent = Math.round((j.progress * 100) / j.total);\n";
            html +=
                "        showProgress('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ' + Math.round(j.progress/1024) + ' –ö–ë –∏–∑ ' + "
                "Math.round(j.total/1024) + ' –ö–ë', percent);\n";
            html += "      } else {\n";
            html += "        showProgress('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ' + Math.round(j.progress/1024) + ' –ö–ë', 50);\n";
            html += "      }\n";
            html += "      isOtaActive = true;\n";
            html += "    } else if (status.includes('–ó–∞–≥—Ä—É–∂–µ–Ω–æ') && status.includes('%')) {\n";
            html += "      // –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏\n";
            html += R"(      const percent = parseInt(status.match(/\d+/)[0]);)" "\n";
            html += "      showProgress('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', percent);\n";
            html += "      isOtaActive = true;\n";
            html += "    } else if (status.includes('–ó–∞–≥—Ä—É–∂–µ–Ω–æ') && status.includes('–ö–ë')) {\n";
            html += "      // –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞\n";
            html += "      showProgress('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + status, 50);\n";
            html += "      isOtaActive = true;\n";
            html +=
                "    } else if (['–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', '–ó–∞–≥—Ä—É–∑–∫–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', "
                "'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'].includes(status)) {\n";
            html += "      // –≠—Ç–∞–ø—ã OTA\n";
            html += "      const stages = {'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': " + String(OTA_STAGE_CONNECTION) +
                    ", '–ó–∞–≥—Ä—É–∑–∫–∞': " + String(OTA_STAGE_DOWNLOAD) + ", '–ü—Ä–æ–≤–µ—Ä–∫–∞': " + String(OTA_STAGE_VERIFY) +
                    ", '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ': " + String(OTA_STAGE_FINISH) +
                    ", "
                    "'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏': " +
                    String(OTA_STAGE_INSTALL) + ", '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π': " + String(OTA_STAGE_CHECK) + "};\n";
            html += "      showProgress(status + '...', stages[status] || " + String(OTA_STAGE_DEFAULT) + ");\n";
            html += "      isOtaActive = true;\n";
            html += "    } else {\n";
            html += "      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n";
            html += "      hideProgress();\n";
            html += "      \n";
            html += "      if (isOtaActive) {\n";
            html += "        if (status.includes('–û—à–∏–±–∫–∞') || status.includes('–¢–∞–π–º–∞—É—Ç')) {\n";
            html += "          showToast('‚ùå ' + status, 'error');\n";
            html +=
                "        } else if (status.includes('–£—Å–ø–µ—à–Ω–æ') || status.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–æ') || "
                "status.includes('‚úÖ')) {\n";
            html += "          showToast('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'success');\n";
            html += "        } else if (status.includes('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞') || status.includes('üîÑ')) {\n";
            html += "          showToast('üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 'info');\n";
            html += "        }\n";
            html += "        isOtaActive = false;\n";
            html += "      }\n";
            html += "      \n";
            html += "      // –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n";
            html += "      const installBtn = document.getElementById('btnInstall');\n";
            html += "      if (status.includes('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')) {\n";
            html += "        updateAvailable = true;\n";
            html += "        installBtn.style.display = 'inline-block';\n";
            html += "        if (!installBtn.hasAttribute('data-shown')) {\n";
            html += "          showToast('üéâ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ù–∞–∂–º–∏—Ç–µ \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\"', 'info');\n";
            html += "          installBtn.setAttribute('data-shown', 'true');\n";
            html += "        }\n";
            html += "      } else {\n";
            html += "        updateAvailable = false;\n";
            html += "        installBtn.style.display = 'none';\n";
            html += "        installBtn.removeAttribute('data-shown');\n";
            html += "      }\n";
            html += "    }\n";
            html += "  }).catch(e => {\n";
            html += "    document.getElementById('otaStatus').textContent = '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏';\n";
            html += "    document.getElementById('otaStatus').style.color = '#dc3545';\n";
            html += "  });\n";
            html += "}\n";
            html += "\n";
            html += "function installUpdate() {\n";
            html += "  if (!updateAvailable) return;\n";
            html += "  const btn = document.getElementById('btnInstall');\n";
            html += "  btn.disabled = true;\n";
            html += "  btn.textContent = '‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...';\n";
            html += "  \n";
            html += "  fetch('/api/ota/install', {method: 'POST'})\n";
            html += "    .then(() => {\n";
            html += "      showToast('üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å', 'info');\n";
            html += "      isOtaActive = true;\n";
            html += "    })\n";
            html += "    .catch(e => {\n";
            html += "      showToast('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', 'error');\n";
            html += "      btn.disabled = false;\n";
            html += "      btn.textContent = '‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';\n";
            html += "    });\n";
            html += "}\n";
            html += "\n";
            html += "// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n";
            html += "document.getElementById('btnCheck').addEventListener('click', () => {\n";
            html += "  const btn = document.getElementById('btnCheck');\n";
            html += "  btn.disabled = true;\n";
            html += "  btn.textContent = '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...';\n";
            html += "  \n";
            html += "  fetch('/api/ota/check', {method: 'POST'})\n";
            html += "    .then(() => {\n";
            html += "      showToast('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞', 'info');\n";
            html += "      isOtaActive = true;\n";
            html += "    })\n";
            html += "    .catch(e => {\n";
            html += "      showToast('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', 'error');\n";
            html += "    })\n";
            html += "    .finally(() => {\n";
            html += "      setTimeout(() => {\n";
            html += "        btn.disabled = false;\n";
            html += "        btn.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è';\n";
            html += "      }, " + String(OTA_DELAY_MS) + ");\n";
            html += "    });\n";
            html += "});\n";
            html += "\n";
            html += "document.getElementById('btnInstall').addEventListener('click', installUpdate);\n";
            html += "\n";
            html += "document.getElementById('uploadForm').addEventListener('submit', e => {\n";
            html += "  e.preventDefault();\n";
            html += "  const fileInput = document.querySelector('input[name=\"firmware\"]');\n";
            html += "  const file = fileInput.files[0];\n";
            html += "  \n";
            html += "  if (!file) {\n";
            html += "    showToast('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏', 'error');\n";
            html += "    return;\n";
            html += "  }\n";
            html += "  \n";
            html += "  if (!file.name.endsWith('.bin')) {\n";
            html += "    showToast('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .bin', 'error');\n";
            html += "    return;\n";
            html += "  }\n";
            html += "  \n";
            html += "  const submitBtn = e.target.querySelector('button[type=submit]');\n";
            html += "  submitBtn.disabled = true;\n";
            html += "  submitBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...';\n";
            html += "  \n";
            html += "  const formData = new FormData();\n";
            html += "  formData.append('firmware', file);\n";
            html += "  \n";
            html += "  showToast('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—à–∏–≤–∫–∏...', 'info');\n";
            html += "  isOtaActive = true;\n";
            html += "  \n";
            html += "  fetch('/ota/upload', {\n";
            html += "    method: 'POST',\n";
            html += "    body: formData\n";
            html += "  })\n";
            html += "  .then(r => r.json())\n";
            html += "  .then(j => {\n";
            html += "    if (j.ok) {\n";
            html += "      showToast('‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');\n";
            html += "    } else {\n";
            html += "      showToast('‚ùå –û—à–∏–±–∫–∞: ' + (j.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');\n";
            html += "    }\n";
            html += "  })\n";
            html += "  .catch(e => {\n";
            html += "    showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');\n";
            html += "  })\n";
            html += "  .finally(() => {\n";
            html += "    submitBtn.disabled = false;\n";
            html += "    submitBtn.textContent = '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É';\n";
            html += "    fileInput.value = '';\n";
            html += "    isOtaActive = false;\n";
            html += "  });\n";
            html += "});\n";
            html += "\n";
            html += "// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n";
            html += "setInterval(updateStatus, " + String(OTA_UPDATE_INTERVAL_MS) + ");\n";
            html += "updateStatus();\n";
            html += "</script>";
            html += generatePageFooter();
            webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
        });

    // Upload –º–∞—Ä—à—Ä—É—Ç
    webServer.on("/ota/upload", HTTP_POST, []() { /* –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ */ }, handleFirmwareUpload);

    logSuccess("–ú–∞—Ä—à—Ä—É—Ç—ã OTA –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
}

// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendOtaStatusJson()
{
    StaticJsonDocument<OTA_JSON_DOC_SIZE> doc;

    // –ï—Å–ª–∏ –∏–¥—ë—Ç –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
    if (isLocalUploadActive)
    {
        if (localUploadTotal > 0)
        {
                            const size_t percent = (localUploadProgress * 100) / localUploadTotal;
            doc["status"] = "local " + String(percent) + "%";
        }
        else
        {
            doc["status"] = "local " + String(localUploadProgress / 1024) + "KB";
        }
        doc["localUpload"] = true;
        doc["progress"] = localUploadProgress;
        doc["total"] = localUploadTotal;
    }
    else
    {
        doc["status"] = getOtaStatus();
        doc["localUpload"] = false;
    }

    doc["version"] = JXCT_VERSION_STRING;
    String json;
    serializeJson(doc, json);
    webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, json);
}

// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void handleFirmwareUpload()
{
    HTTPUpload& upload = webServer.upload();

    if (upload.status == UPLOAD_FILE_START)
    {
        isLocalUploadActive = true;
        localUploadProgress = 0;
        localUploadTotal = upload.totalSize;
        localUploadStatus = "uploading";

        logSystemSafe("\1", upload.filename.c_str(), upload.totalSize);

        if (!Update.begin(upload.totalSize == 0 ? UPDATE_SIZE_UNKNOWN : upload.totalSize))
        {
            logError("[OTA] Update.begin() failed");
            Update.printError(Serial);
            isLocalUploadActive = false;
            localUploadStatus = "error";
            // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ–±—Ä—ã–≤—É –∑–∞–≥—Ä—É–∑–∫–∏
        }
    }
    else if (upload.status == UPLOAD_FILE_WRITE)
    {
        if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
        {
            logErrorSafe("\1", upload.currentSize);
            Update.printError(Serial);
            isLocalUploadActive = false;
            localUploadStatus = "error";
        }
        else
        {
            localUploadProgress += upload.currentSize;

            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 64KB
            static size_t lastLogged = 0;
            if (localUploadProgress - lastLogged > OTA_PROGRESS_LOG_THRESHOLD)
            {
                logSystemSafe("\1", localUploadProgress);
                lastLogged = localUploadProgress;
            }
        }
    }
    else if (upload.status == UPLOAD_FILE_END)
    {
        logSystemSafe("\1", localUploadProgress);
        localUploadStatus = "verifying";

        if (Update.end(true))  // true = —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∫ boot partition
        {
            if (Update.isFinished())
            {
                logSuccess("[OTA] –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫");
                localUploadStatus = "success";
                isLocalUploadActive = false;
                webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":true}");
                delay(OTA_DELAY_MS);
                ESP.restart();
            }
            else
            {
                logError("[OTA] Update –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω");
                Update.printError(Serial);
                isLocalUploadActive = false;
                localUploadStatus = "error";
                webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":false,\"error\":\"not_finished\"}");
            }
        }
        else
        {
            logError("[OTA] Update.end() failed");
            Update.printError(Serial);
            isLocalUploadActive = false;
            localUploadStatus = "error";
            webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":false,\"error\":\"end_failed\"}");
        }
    }
    else if (upload.status == UPLOAD_FILE_ABORTED)
    {
        logError("[OTA] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
        Update.abort();
        isLocalUploadActive = false;
        localUploadStatus = "aborted";
        webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, "{\"ok\":false,\"error\":\"aborted\"}");
    }
}
