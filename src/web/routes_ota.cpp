#include "../../include/web_routes.h"
#include "../../include/logger.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/jxct_config_vars.h"
#include "../../include/version.h"
#include "../../include/jxct_strings.h"
#include "../wifi_manager.h"
#include "../ota_manager.h"
#include <ArduinoJson.h>
#include <Update.h>
#include <Arduino.h>

extern WebServer webServer;
extern WiFiMode currentWiFiMode;
extern String navHtml();

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ---
static void sendOtaStatusJson();
static void handleFirmwareUpload();

void setupOtaRoutes()
{
    logDebug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OTA –º–∞—Ä—à—Ä—É—Ç–æ–≤");

    // API: —Å—Ç–∞—Ç—É—Å OTA
    webServer.on("/api/ota/status", HTTP_GET, sendOtaStatusJson);

    // API: —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    webServer.on("/api/ota/check", HTTP_POST, []()
                 {
                     logWebRequest("POST", "/api/ota/check", webServer.client().remoteIP().toString());
                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(403, "application/json", "{\"error\":\"unavailable\"}");
                         return;
                     }
                     triggerOtaCheck();
                     handleOTA();
                     webServer.send(200, "application/json", "{\"ok\":true}");
                 });

    // API: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ
    webServer.on("/api/ota/auto", HTTP_POST, []()
                 {
                     logWebRequest("POST", "/api/ota/auto", webServer.client().remoteIP().toString());
                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(403, "application/json", "{\"error\":\"unavailable\"}");
                         return;
                     }
                     bool enable = webServer.arg("enable") == "1";
                     config.flags.autoOtaEnabled = enable ? 1 : 0;
                     saveConfig();
                     webServer.send(200, "application/json", "{\"ok\":true}");
                 });

    // HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    webServer.on("/updates", HTTP_GET, []()
                 {
                     logWebRequest("GET", "/updates", webServer.client().remoteIP().toString());

                     if (currentWiFiMode == WiFiMode::AP)
                     {
                         webServer.send(200, "text/html; charset=utf-8", generateApModeUnavailablePage("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è", "üöÄ"));
                         return;
                     }

                     String html = generatePageHeader("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è", "üöÄ");
                     html += navHtml();
                     html += "<h1>üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏</h1>";

                     // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
                     html += "<div class='info-block'><b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> " + String(JXCT_VERSION_STRING) + "</div>";

                     // –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å
                     String checked = config.flags.autoOtaEnabled ? " checked" : "";
                     html += "<div class='section'><label><input type='checkbox' id='auto_ota'" + checked + "> –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</label></div>";

                     // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                     {
                         String btn = generateButton(ButtonType::OUTLINE, "üîç", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "");
                         btn.replace("<button ", "<button id='btnCheck' ");
                         html += "<div class='section'>" + btn + "</div>";
                     }

                     // –°—Ç–∞—Ç—É—Å
                     html += "<div class='section'><b>–°—Ç–∞—Ç—É—Å:</b> <span id='otaStatus'>" + String(getOtaStatus()) + "</span></div>";
                     html += "<div class='section'><div id='progressBar' style='display:none;width:100%;background:#f0f0f0;border-radius:4px;overflow:hidden;'>";
                     html += "<div id='progressFill' style='width:0%;height:20px;background:#4CAF50;transition:width 0.3s;'></div></div></div>";

                     // –§–æ—Ä–º–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                     html += "<div class='section'><h2>–õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h2>";
                     html += "<form id='uploadForm' enctype='multipart/form-data'>";
                     html += "<input type='file' name='firmware' accept='.bin' required style='margin-bottom:10px'>";
                     html += generateButton(ButtonType::PRIMARY, "‚¨ÜÔ∏è", "–ó–∞–≥—Ä—É–∑–∏—Ç—å", "") + "</form></div>";

                     html += "<script>\n";
                     html += "let isOtaActive = false;\n";
                     html += "function updateStatus(){\n";
                     html += "  fetch('/api/ota/status').then(r=>r.json()).then(j=>{\n";
                     html += "    const status = j.status;\n";
                     html += "    document.getElementById('otaStatus').innerText = status;\n";
                     html += "    document.getElementById('auto_ota').checked = j.auto;\n";
                     html += "    \n";
                     html += "    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n";
                     html += "    const progressBar = document.getElementById('progressBar');\n";
                     html += "    const progressFill = document.getElementById('progressFill');\n";
                     html += "    \n";
                     html += "    if (status.startsWith('dl ') && status.includes('%')) {\n";
                     html += "      const percent = parseInt(status.match(/\\d+/)[0]);\n";
                     html += "      progressBar.style.display = 'block';\n";
                     html += "      progressFill.style.width = percent + '%';\n";
                     html += "      isOtaActive = true;\n";
                     html += "    } else if (status.startsWith('dl ') && status.includes('KB')) {\n";
                     html += "      progressBar.style.display = 'block';\n";
                     html += "      progressFill.style.width = '50%'; // –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n";
                     html += "      isOtaActive = true;\n";
                     html += "    } else if (status === 'connecting' || status === 'downloading' || status === 'verifying' || status === 'finalizing') {\n";
                     html += "      progressBar.style.display = 'block';\n";
                     html += "      progressFill.style.width = '25%';\n";
                     html += "      isOtaActive = true;\n";
                     html += "    } else {\n";
                     html += "      progressBar.style.display = 'none';\n";
                     html += "      if (isOtaActive && (status.startsWith('http ') || status.includes('error') || status.includes('timeout'))) {\n";
                     html += "        showToast('OTA –æ—à–∏–±–∫–∞: ' + status, 'error');\n";
                     html += "      } else if (isOtaActive && status === 'success, rebooting') {\n";
                     html += "        showToast('OTA —É—Å–ø–µ—à–Ω–æ! –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 'success');\n";
                     html += "      }\n";
                     html += "      isOtaActive = false;\n";
                     html += "    }\n";
                     html += "  }).catch(e=>console.log('Status fetch error:', e));\n";
                     html += "}\n";
                     html += "\n";
                     html += "// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ –≤—Ä–µ–º—è OTA –æ–ø–µ—Ä–∞—Ü–∏–π\n";
                     html += "setInterval(updateStatus, 1000);\n";
                     html += "updateStatus();\n";
                     html += "\n";
                     html += "document.getElementById('btnCheck').addEventListener('click',()=>{\n";
                     html += "  document.getElementById('btnCheck').disabled = true;\n";
                     html += "  document.getElementById('btnCheck').innerText = '–ü—Ä–æ–≤–µ—Ä—è–µ–º...';\n";
                     html += "  fetch('/api/ota/check',{method:'POST'})\n";
                     html += "    .then(()=>{\n";
                     html += "      showToast('–ü—Ä–æ–≤–µ—Ä–∫–∞ OTA –∑–∞–ø—É—â–µ–Ω–∞','info');\n";
                     html += "      isOtaActive = true;\n";
                     html += "    })\n";
                     html += "    .catch(e=>{\n";
                     html += "      showToast('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏','error');\n";
                     html += "      console.error(e);\n";
                     html += "    })\n";
                     html += "    .finally(()=>{\n";
                     html += "      setTimeout(()=>{\n";
                     html += "        document.getElementById('btnCheck').disabled = false;\n";
                     html += "        document.getElementById('btnCheck').innerText = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å';\n";
                     html += "      }, 3000);\n";
                     html += "    });\n";
                     html += "});\n";
                     html += "\n";
                     html += "document.getElementById('auto_ota').addEventListener('change',e=>{\n";
                     html += "  fetch('/api/ota/auto?enable='+(e.target.checked?1:0),{method:'POST'})\n";
                     html += "    .then(()=>showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞','success'))\n";
                     html += "    .catch(e=>showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è','error'));\n";
                     html += "});\n";
                     html += "\n";
                     html += "document.getElementById('uploadForm').addEventListener('submit',e=>{\n";
                     html += "  e.preventDefault();\n";
                     html += "  const f=e.target.firmware.files[0];\n";
                     html += "  if(!f){showToast('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª','error');return;}\n";
                     html += "  const fd=new FormData();fd.append('firmware',f);\n";
                     html += "  showToast('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏...','info');\n";
                     html += "  fetch('/ota/upload',{method:'POST',body:fd})\n";
                     html += "    .then(r=>r.json())\n";
                     html += "    .then(j=>{\n";
                     html += "      if(j.ok){\n";
                     html += "        showToast('–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞','success');\n";
                     html += "      }else{\n";
                     html += "        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: '+(j.error||'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'),'error');\n";
                     html += "      }\n";
                     html += "    })\n";
                     html += "    .catch(e=>{\n";
                     html += "      showToast('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è','error');\n";
                     html += "      console.error(e);\n";
                     html += "    });\n";
                     html += "});\n";
                     html += "</script>";
                     html += generatePageFooter();
                     webServer.send(200, "text/html; charset=utf-8", html);
                 });

    // Upload –º–∞—Ä—à—Ä—É—Ç
    webServer.on("/ota/upload", HTTP_POST, []() { /* –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ */ }, handleFirmwareUpload);

    logSuccess("–ú–∞—Ä—à—Ä—É—Ç—ã OTA –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
}

static void sendOtaStatusJson()
{
    StaticJsonDocument<128> doc;
    doc["status"] = getOtaStatus();
    doc["auto"] = (bool)config.flags.autoOtaEnabled;
    doc["version"] = JXCT_VERSION_STRING;
    String json;
    serializeJson(doc, json);
    webServer.send(200, "application/json", json);
}

static void handleFirmwareUpload()
{
    HTTPUpload& upload = webServer.upload();
    static size_t totalReceived = 0; // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    
    if (upload.status == UPLOAD_FILE_START)
    {
        totalReceived = 0; // —Å–±—Ä–æ—Å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        logSystem("[OTA] –ü—Ä–∏—ë–º —Ñ–∞–π–ª–∞ %s (%u –±–∞–π—Ç)", upload.filename.c_str(), upload.totalSize);
        
        if (!Update.begin(upload.totalSize == 0 ? UPDATE_SIZE_UNKNOWN : upload.totalSize))
        {
            logError("[OTA] Update.begin() failed");
            Update.printError(Serial);
            // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ–±—Ä—ã–≤—É –∑–∞–≥—Ä—É–∑–∫–∏
        }
    }
    else if (upload.status == UPLOAD_FILE_WRITE)
    {
        if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
        {
            logError("[OTA] Write error: %d –±–∞–π—Ç", upload.currentSize);
            Update.printError(Serial);
        }
        else
        {
            totalReceived += upload.currentSize;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 64KB
            static size_t lastLogged = 0;
            if (totalReceived - lastLogged > 65536)
            {
                logSystem("[OTA] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: %u –±–∞–π—Ç", totalReceived);
                lastLogged = totalReceived;
            }
        }
    }
    else if (upload.status == UPLOAD_FILE_END)
    {
        logSystem("[OTA] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %u –±–∞–π—Ç", totalReceived);
        
        if (Update.end(true)) // true = —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∫ boot partition
        {
            if (Update.isFinished())
            {
                logSuccess("[OTA] –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫");
                webServer.send(200, "application/json", "{\"ok\":true}");
                delay(2000);
                ESP.restart();
            }
            else
            {
                logError("[OTA] Update –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω");
                Update.printError(Serial);
                webServer.send(200, "application/json", "{\"ok\":false,\"error\":\"not_finished\"}");
            }
        }
        else
        {
            logError("[OTA] Update.end() failed");
            Update.printError(Serial);
            webServer.send(200, "application/json", "{\"ok\":false,\"error\":\"end_failed\"}");
        }
    }
    else if (upload.status == UPLOAD_FILE_ABORTED)
    {
        logError("[OTA] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
        Update.abort();
        webServer.send(200, "application/json", "{\"ok\":false,\"error\":\"aborted\"}");
    }
} 