/**
 * @file routes_data.cpp
 * @brief –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞
 * @details –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞, JSON API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∞–Ω–Ω—ã—Ö
 */

#include "../../include/web_routes.h"
#include "../../include/logger.h"
#include "../../include/jxct_config_vars.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/jxct_format_utils.h"
#include "../wifi_manager.h"
#include "../modbus_sensor.h"
#include "calibration_manager.h"
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <LittleFS.h>

extern NTPClient* timeClient;

// –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
extern String navHtml();
extern String formatValue(float value, const char* unit, int precision);
extern String getApSsid();

// –ë—É—Ñ–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ /readings)
static File uploadFile;
static SoilProfile uploadProfile = SoilProfile::SAND;

static void handleReadingsUpload()
{
    HTTPUpload& upload = webServer.upload();
    if (upload.status == UPLOAD_FILE_START)
    {
        String profileStr = webServer.arg("soil_profile");
        if (profileStr == "sand") uploadProfile = SoilProfile::SAND;
        else if (profileStr == "loam") uploadProfile = SoilProfile::LOAM;
        else if (profileStr == "peat") uploadProfile = SoilProfile::PEAT;

        CalibrationManager::init();
        const char* path = CalibrationManager::profileToFilename(uploadProfile);
        uploadFile = LittleFS.open(path, "w");
        if (!uploadFile)
        {
            logError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª %s", path);
        }
    }
    else if (upload.status == UPLOAD_FILE_WRITE)
    {
        if (uploadFile)
        {
            uploadFile.write(upload.buf, upload.currentSize);
        }
    }
    else if (upload.status == UPLOAD_FILE_END)
    {
        if (uploadFile)
        {
            uploadFile.close();
            logSuccess("–§–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω (%u –±–∞–π—Ç)", upload.totalSize);
        }
        webServer.sendHeader("Location", "/readings?toast=–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞+–∑–∞–≥—Ä—É–∂–µ–Ω–∞", true);
        webServer.send(302, "text/plain", "Redirect");
    }
}

static void handleProfileSave()
{
    if (webServer.hasArg("soil_profile"))
    {
        String profileStr = webServer.arg("soil_profile");
        if (profileStr == "sand") config.soilProfile = 0;
        else if (profileStr == "loam") config.soilProfile = 1;
        else if (profileStr == "peat") config.soilProfile = 2;

        saveConfig();
        logSuccess("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ %s", profileStr.c_str());
    }
    webServer.sendHeader("Location", "/readings?toast=–ü—Ä–æ—Ñ–∏–ª—å+—Å–æ—Ö—Ä–∞–Ω–µ–Ω", true);
    webServer.send(302, "text/plain", "Redirect");
}

void setupDataRoutes()
{
    // –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω)
    webServer.on("/readings", HTTP_GET,
                 []()
                 {
                     logWebRequest("GET", "/readings", webServer.client().remoteIP().toString());

                     if (currentWiFiMode == WiFiMode::AP)
                     {
                         String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
                         html += "<title>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</title>";
                         html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                         html += "<h1>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</h1>";
                         html += "<div class='msg msg-error'>" UI_ICON_ERROR
                                 " –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞</div></div></body></html>";
                         webServer.send(200, "text/html; charset=utf-8", html);
                         return;
                     }

                     String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' "
                         "content='width=device-width, initial-scale=1.0'>";
                     html += "<title>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ JXCT</title>";
                     html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
                     html += navHtml();
                     html += "<h1>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞</h1>";
                     // –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö "–ü–æ—Å–ª–µ / –î–æ"
                     html += "<div class='section'><table class='data'><thead><tr><th></th><th>–ü–æ—Å–ª–µ</th><th>–î–æ</th></tr></thead><tbody>";
                     html += "<tr><td>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C</td><td><span id='temp'></span></td><td><span id='temp_raw'></span></td></tr>";
                     html += "<tr><td>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å, %</td><td><span id='hum'></span></td><td><span id='hum_raw'></span></td></tr>";
                     html += "<tr><td>‚ö° EC, ¬µS/cm</td><td><span id='ec'></span></td><td><span id='ec_raw'></span></td></tr>";
                     html += "<tr><td>‚öóÔ∏è pH</td><td><span id='ph'></span></td><td><span id='ph_raw'></span></td></tr>";
                     html += "<tr><td>üî¥ –ê–∑–æ—Ç (N), –º–≥/–∫–≥</td><td><span id='n'></span></td><td><span id='n_raw'></span></td></tr>";
                     html += "<tr><td>üü° –§–æ—Å—Ñ–æ—Ä (P), –º–≥/–∫–≥</td><td><span id='p'></span></td><td><span id='p_raw'></span></td></tr>";
                     html += "<tr><td>üîµ –ö–∞–ª–∏–π (K), –º–≥/–∫–≥</td><td><span id='k'></span></td><td><span id='k_raw'></span></td></tr>";
                     html += "</tbody></table></div>";
                     html +=
                         "<div style='margin-top:15px;font-size:14px;color:#555'><b>API:</b> <a href='/api/sensor' "
                         "target='_blank'>/api/sensor</a> (JSON, +timestamp)</div>";
                     html += "<script>";
                     html += "function set(id,v){if(v!==undefined&&v!==null){document.getElementById(id).textContent=v;}}";
                     html += "function updateSensor(){";
                     html += "fetch('/sensor_json').then(r=>r.json()).then(d=>{";
                     html += "set('temp',d.temperature);";
                     html += "set('hum',d.humidity);";
                     html += "set('ec',d.ec);";
                     html += "set('ph',d.ph);";
                     html += "set('n',d.nitrogen);";
                     html += "set('p',d.phosphorus);";
                     html += "set('k',d.potassium);";
                     html += "set('temp_raw',d.raw_temperature);";
                     html += "set('hum_raw',d.raw_humidity);";
                     html += "set('ec_raw',d.raw_ec);";
                     html += "set('ph_raw',d.raw_ph);";
                     html += "set('n_raw',d.raw_nitrogen);";
                     html += "set('p_raw',d.raw_phosphorus);";
                     html += "set('k_raw',d.raw_potassium);";
                     html += "});";
                     html += "}";
                     html += "setInterval(updateSensor,3000);";
                     html += "updateSensor();";
                     html += "</script>";

                     // ======= –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ =======
                     html += "<div class='section'><h2>‚öôÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞</h2>";
                     // ----- –§–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è -----
                     html += "<form action='/readings/profile' method='post'>";
                     html += "<div class='section'><h3>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á–≤—ã</h3>";
                     html += "<select name='soil_profile' id='soil_sel'>";
                     html += "<option value='sand'" + String(config.soilProfile==0?" selected":"") + ">–ü–µ—Å–æ–∫</option>";
                     html += "<option value='loam'" + String(config.soilProfile==1?" selected":"") + ">–°—É–≥–ª–∏–Ω–æ–∫</option>";
                     html += "<option value='peat'" + String(config.soilProfile==2?" selected":"") + ">–¢–æ—Ä—Ñ</option>";
                     html += "</select></div>";
                     html += generateButton(ButtonType::SECONDARY, UI_ICON_SAVE, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "");
                     html += "</form>";

                     // ----- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV -----
                     html += "<form action='/readings/upload' method='post' enctype='multipart/form-data' style='margin-top:10px'>";
                     html += "<input type='hidden' name='soil_profile' id='upload_hidden' value='sand'>";
                     html += "<div class='section'><h3>–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV</h3><input type='file' name='calibration_csv' accept='.csv' required></div>";
                     html += generateButton(ButtonType::PRIMARY, UI_ICON_UPLOAD, "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", "");
                     html += "</form>";

                     // JS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–∞ —Å hidden upload
                     html += "<script>document.getElementById('soil_sel').addEventListener('change',e=>{document.getElementById('upload_hidden').value=e.target.value;});</script>";

                     // CSS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
                     html += "<style>.data{width:100%;border-collapse:collapse}.data th,.data td{border:1px solid #ccc;padding:6px;text-align:center}.data th{background:#f5f5f5}</style>";

                     html += "</div>" + String(getToastHTML()) + "</body></html>";
                     webServer.send(200, "text/html; charset=utf-8", html);
                 });

    // AJAX —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
    webServer.on("/sensor_json", HTTP_GET,
                 []()
                 {
                     logWebRequest("GET", "/sensor_json", webServer.client().remoteIP().toString());

                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(403, "application/json", "{\"error\":\"AP mode\"}");
                         return;
                     }

                     StaticJsonDocument<384> doc;
                     doc["temperature"] = format_temperature(sensorData.temperature);
                     doc["humidity"] = format_moisture(sensorData.humidity);
                     doc["ec"] = format_ec(sensorData.ec);
                     doc["ph"] = format_ph(sensorData.ph);
                     doc["nitrogen"] = format_npk(sensorData.nitrogen);
                     doc["phosphorus"] = format_npk(sensorData.phosphorus);
                     doc["potassium"] = format_npk(sensorData.potassium);
                     doc["raw_temperature"] = format_temperature(sensorData.raw_temperature);
                     doc["raw_humidity"] = format_moisture(sensorData.raw_humidity);
                     doc["raw_ec"] = format_ec(sensorData.raw_ec);
                     doc["raw_ph"] = format_ph(sensorData.raw_ph);
                     doc["raw_nitrogen"] = format_npk(sensorData.raw_nitrogen);
                     doc["raw_phosphorus"] = format_npk(sensorData.raw_phosphorus);
                     doc["raw_potassium"] = format_npk(sensorData.raw_potassium);
                     doc["timestamp"] = (long)(timeClient ? timeClient->getEpochTime() : 0);

                     String json;
                     serializeJson(doc, json);
                     webServer.send(200, "application/json", json);
                 });

    // API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    webServer.on("/api/sensor", HTTP_GET,
                 []()
                 {
                     logWebRequest("GET", "/api/sensor", webServer.client().remoteIP().toString());

                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(403, "application/json", "{\"error\":\"AP mode\"}");
                         return;
                     }

                     StaticJsonDocument<384> doc;
                     doc["temperature"] = format_temperature(sensorData.temperature);
                     doc["humidity"] = format_moisture(sensorData.humidity);
                     doc["ec"] = format_ec(sensorData.ec);
                     doc["ph"] = format_ph(sensorData.ph);
                     doc["nitrogen"] = format_npk(sensorData.nitrogen);
                     doc["phosphorus"] = format_npk(sensorData.phosphorus);
                     doc["potassium"] = format_npk(sensorData.potassium);
                     doc["raw_temperature"] = format_temperature(sensorData.raw_temperature);
                     doc["raw_humidity"] = format_moisture(sensorData.raw_humidity);
                     doc["raw_ec"] = format_ec(sensorData.raw_ec);
                     doc["raw_ph"] = format_ph(sensorData.raw_ph);
                     doc["raw_nitrogen"] = format_npk(sensorData.raw_nitrogen);
                     doc["raw_phosphorus"] = format_npk(sensorData.raw_phosphorus);
                     doc["raw_potassium"] = format_npk(sensorData.raw_potassium);
                     doc["timestamp"] = (long)(timeClient ? timeClient->getEpochTime() : 0);

                     String json;
                     serializeJson(doc, json);
                     webServer.send(200, "application/json", json);
                 });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–≥–æ CSV —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É
    webServer.on("/readings/upload", HTTP_POST, [](){}, handleReadingsUpload);

    // –§–æ—Ä–º–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    webServer.on("/readings/profile", HTTP_POST, [](){}, handleProfileSave);

    logDebug("–ú–∞—Ä—à—Ä—É—Ç—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /readings, /sensor_json, /api/sensor");
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
extern String getApSsid();