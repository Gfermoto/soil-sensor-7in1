/**
 * @file routes_data.cpp
 * @brief –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞
 * @details –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞, JSON API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∞–Ω–Ω—ã—Ö
 */

#include "../../include/web_routes.h"
#include "../../include/logger.h"
#include "../../include/jxct_config_vars.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/jxct_format_utils.h"
#include "../wifi_manager.h"
#include "../modbus_sensor.h"
#include <ArduinoJson.h>
#include <NTPClient.h>

extern NTPClient* timeClient;

// –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
extern String navHtml();
extern String formatValue(float value, const char* unit, int precision);
extern String getApSsid();

void setupDataRoutes() {
    // –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω)
    webServer.on("/readings", HTTP_GET, []() {
        logWebRequest("GET", "/readings", webServer.client().remoteIP().toString());
        
        if (currentWiFiMode == WiFiMode::AP) {
            String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'>";
            html += "<title>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</title>";
            html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
            html += "<h1>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è</h1>";
            html += "<div class='msg msg-error'>" UI_ICON_ERROR " –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞</div></div></body></html>";
            webServer.send(200, "text/html; charset=utf-8", html);
            return;
        }
        
        String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
        html += "<title>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ JXCT</title>";
        html += "<style>" + String(getUnifiedCSS()) + "</style></head><body><div class='container'>";
        html += navHtml();
        html += "<h1>" UI_ICON_DATA " –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞</h1>";
        html += "<div class='section'><ul>";
        html += "<li>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <span id='temp'></span> ¬∞C</li>";
        html += "<li>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <span id='hum'></span> %</li>";
        html += "<li>‚ö° EC: <span id='ec'></span> ¬µS/cm</li>";
        html += "<li>‚öóÔ∏è pH: <span id='ph'></span></li>";
        html += "<li>üî¥ –ê–∑–æ—Ç (N): <span id='n'></span> –º–≥/–∫–≥</li>";
        html += "<li>üü° –§–æ—Å—Ñ–æ—Ä (P): <span id='p'></span> –º–≥/–∫–≥</li>";
        html += "<li>üîµ –ö–∞–ª–∏–π (K): <span id='k'></span> –º–≥/–∫–≥</li>";
        html += "</ul></div>";
        html += "<div style='margin-top:15px;font-size:14px;color:#555'><b>API:</b> <a href='/api/sensor' target='_blank'>/api/sensor</a> (JSON, +timestamp)</div>";
        html += "<script>";
        html += "function updateSensor(){";
        html += "fetch('/sensor_json').then(r=>r.json()).then(d=>{";
        html += "document.getElementById('temp').textContent=d.temperature;";
        html += "document.getElementById('hum').textContent=d.humidity;";
        html += "document.getElementById('ec').textContent=d.ec;";
        html += "document.getElementById('ph').textContent=d.ph;";
        html += "document.getElementById('n').textContent=d.nitrogen;";
        html += "document.getElementById('p').textContent=d.phosphorus;";
        html += "document.getElementById('k').textContent=d.potassium;";
        html += "});";
        html += "}";
        html += "setInterval(updateSensor,3000);";
        html += "updateSensor();";
        html += "</script>";
        html += "</div>" + String(getToastHTML()) + "</body></html>";
        webServer.send(200, "text/html; charset=utf-8", html);
    });

    // AJAX —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
    webServer.on("/sensor_json", HTTP_GET, []() {
        logWebRequest("GET", "/sensor_json", webServer.client().remoteIP().toString());
        
        if (currentWiFiMode != WiFiMode::STA) {
            webServer.send(403, "application/json", "{\"error\":\"AP mode\"}");
            return;
        }
        
        StaticJsonDocument<256> doc;
        doc["temperature"] = format_temperature(sensorData.temperature);
        doc["humidity"] = format_moisture(sensorData.humidity);
        doc["ec"] = format_ec(sensorData.ec);
        doc["ph"] = format_ph(sensorData.ph);
        doc["nitrogen"] = format_npk(sensorData.nitrogen);
        doc["phosphorus"] = format_npk(sensorData.phosphorus);
        doc["potassium"] = format_npk(sensorData.potassium);
        doc["timestamp"] = (long)(timeClient ? timeClient->getEpochTime() : 0);
        
        String json;
        serializeJson(doc, json);
        webServer.send(200, "application/json", json);
    });

    // API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    webServer.on("/api/sensor", HTTP_GET, []() {
        logWebRequest("GET", "/api/sensor", webServer.client().remoteIP().toString());
        
        if (currentWiFiMode != WiFiMode::STA) {
            webServer.send(403, "application/json", "{\"error\":\"AP mode\"}");
            return;
        }
        
        StaticJsonDocument<256> doc;
        doc["temperature"] = format_temperature(sensorData.temperature);
        doc["humidity"] = format_moisture(sensorData.humidity);
        doc["ec"] = format_ec(sensorData.ec);
        doc["ph"] = format_ph(sensorData.ph);
        doc["nitrogen"] = format_npk(sensorData.nitrogen);
        doc["phosphorus"] = format_npk(sensorData.phosphorus);
        doc["potassium"] = format_npk(sensorData.potassium);
        doc["timestamp"] = (long)(timeClient ? timeClient->getEpochTime() : 0);
        
        String json;
        serializeJson(doc, json);
        webServer.send(200, "application/json", json);
    });
    
    logDebug("–ú–∞—Ä—à—Ä—É—Ç—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /readings, /sensor_json, /api/sensor");
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
extern String getApSsid(); 