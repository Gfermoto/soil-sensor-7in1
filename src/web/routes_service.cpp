/**
 * @file routes_service.cpp
 * @brief –°–µ—Ä–≤–∏—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @details –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã, —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏ OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */

#include <ArduinoJson.h>
#include "../../include/jxct_config_vars.h"
#include "../../include/jxct_constants.h"
#include "../../include/jxct_device_info.h"
#include "../../include/jxct_format_utils.h"
#include "../../include/jxct_strings.h"
#include "../../include/jxct_ui_system.h"
#include "../../include/logger.h"
#include "../../include/web/csrf_protection.h"  // üîí CSRF –∑–∞—â–∏—Ç–∞
#include "../../include/web_routes.h"           // ‚úÖ CSRF –∑–∞—â–∏—Ç–∞
#include "../modbus_sensor.h"
#include "../mqtt_client.h"
#include "../thingspeak_client.h"
#include "../wifi_manager.h"

// –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö)
// extern WebServer webServer;  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ web_routes.h
// extern WiFiMode currentWiFiMode;  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ wifi_manager.h
// extern String navHtml();  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ wifi_manager.h
// extern String getApSsid();  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ wifi_manager.h
// extern String sensorLastError;  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ modbus_sensor.h
// extern const char* getThingSpeakLastPublish();  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ thingspeak_client.h
// extern const char* getThingSpeakLastError();  // –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ thingspeak_client.h

// --- API v1 helpers ---
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendHealthJson();
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendServiceStatusJson();

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static String formatUptime(unsigned long milliseconds);

void setupServiceRoutes()
{
    logDebug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤");

    // Health endpoint (legacy) and API v1
    webServer.on("/health", HTTP_GET, sendHealthJson);
    webServer.on(API_SYSTEM_HEALTH, HTTP_GET, sendHealthJson);

    // Service status endpoint legacy + API v1
    webServer.on("/service_status", HTTP_GET, sendServiceStatusJson);
    webServer.on(API_SYSTEM_STATUS, HTTP_GET, sendServiceStatusJson);

    // –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω)
    webServer.on(
        "/service", HTTP_GET,
        []()
        {
            logWebRequest("GET", "/service", webServer.client().remoteIP().toString());

            if (currentWiFiMode == WiFiMode::AP)
            {
                webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML,
                               generateApModeUnavailablePage("–°–µ—Ä–≤–∏—Å", UI_ICON_SERVICE));
                return;
            }

            String html = generatePageHeader("–°–µ—Ä–≤–∏—Å", UI_ICON_SERVICE);
            html += navHtml();
            html += "<h1>" UI_ICON_SERVICE " –°–µ—Ä–≤–∏—Å</h1>";
            html += "<div class='info-block' id='status-block'>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...</div>";
            html += "<div class='info-block'><b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</b> " + String(DEVICE_MANUFACTURER) +
                    "<br><b>–ú–æ–¥–µ–ª—å:</b> " + String(DEVICE_MODEL) + "<br><b>–í–µ—Ä—Å–∏—è:</b> " + String(FIRMWARE_VERSION) +
                    "</div>";
            html += "<div class='section' style='margin-top:20px;'>";
            html += "<form method='post' action='/reset' style='margin-bottom:10px'>";
            html += getCSRFHiddenField();
            html +=
                generateButton(ButtonType::DANGER, ButtonConfig{UI_ICON_RESET, "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", ""}) + "</form>";
            html += "<form method='post' action='/reboot' style='margin-bottom:10px'>";
            html += getCSRFHiddenField();
            html += generateButton(ButtonType::SECONDARY, ButtonConfig{"üîÑ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", ""}) + "</form>";
            html += "</div>";
            html +=
                "<div class='section' style='margin-top:15px;font-size:14px;color:#555'><b>API:</b> <a "
                "href='/service_status' target='_blank'>/service_status</a> (JSON, —Å—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤) | <a "
                "href='/health' target='_blank'>/health</a> (JSON, –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)</div>";
            html += "<script>";
            html += "function dot(status){";
            html += "if(status===true)return'<span class=\"status-dot dot-ok\"></span>';";
            html += "if(status===false)return'<span class=\"status-dot dot-err\"></span>';";
            html += "if(status==='warn')return'<span class=\"status-dot dot-warn\"></span>';";
            html += "return'<span class=\"status-dot dot-off\"></span>';";
            html += "}";
            html += "function updateStatus(){fetch('/service_status').then(r=>r.json()).then(d=>{let html='';";
            html +=
                "html+=dot(d.wifi_connected)+'<b>WiFi:</b> '+(d.wifi_connected?'–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ('+d.wifi_ip+', "
                "'+d.wifi_ssid+', RSSI '+d.wifi_rssi+' dBm)':'–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ')+'<br>';";
            html +=
                "html+=dot(d.mqtt_enabled?d.mqtt_connected:false)+'<b>MQTT:</b> "
                "'+(d.mqtt_enabled?(d.mqtt_connected?'–ü–æ–¥–∫–ª—é—á–µ–Ω–æ':'–û—à–∏–±–∫–∞'+(d.mqtt_last_error?' "
                "('+d.mqtt_last_error+')':'')):'–û—Ç–∫–ª—é—á–µ–Ω–æ')+'<br>';";
            html +=
                "html+=dot(d.thingspeak_enabled?(d.thingspeak_last_error?false:true):false)+'<b>ThingSpeak:</b> "
                "'+(d.thingspeak_enabled?(d.thingspeak_last_error?'–û—à–∏–±–∫–∞: "
                "'+d.thingspeak_last_error:((d.thingspeak_last_pub && d.thingspeak_last_pub!=='0')?'–ü–æ—Å–ª–µ–¥–Ω—è—è "
                "–ø—É–±–ª–∏–∫–∞—Ü–∏—è: '+d.thingspeak_last_pub:'–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π')):'–û—Ç–∫–ª—é—á–µ–Ω–æ')+'<br>';";
            html +=
                "if(d.thingspeak_enabled && d.thingspeak_last_error){showToast('–û—à–∏–±–∫–∞ ThingSpeak: "
                "'+d.thingspeak_last_error,'error');}";
            html +=
                "html+=dot(d.hass_enabled)+'<b>Home Assistant:</b> '+(d.hass_enabled?'–í–∫–ª—é—á–µ–Ω–æ':'–û—Ç–∫–ª—é—á–µ–Ω–æ')+'<br>';";
            html +=
                "html+=dot(d.sensor_ok)+'<b>–î–∞—Ç—á–∏–∫:</b> '+(d.sensor_ok?'–û–∫':'–û—à–∏–±–∫–∞'+(d.sensor_last_error?' "
                "('+d.sensor_last_error+')':''));";
            html += "document.getElementById('status-block').innerHTML=html;";
            html += "});}setInterval(updateStatus," + String(config.webUpdateInterval) + ");updateStatus();";
            html += "</script>";
            html += generatePageFooter();
            webServer.send(200, "text/html; charset=utf-8", html);
        });

    // POST –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    webServer.on("/reset", HTTP_POST,
                 []()
                 {
                     logWebRequest("POST", webServer.uri(), webServer.client().remoteIP().toString());

                     // ‚úÖ CSRF –∑–∞—â–∏—Ç–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞!
                     if (!checkCSRFSafety())
                     {
                         logWarnSafe("\1", webServer.client().remoteIP().toString().c_str());
                         const String html = generateErrorPage(HTTP_FORBIDDEN, "Forbidden: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω");
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_HTML, html);
                         return;
                     }

                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_PLAIN, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
                         return;
                     }

                     resetConfig();
                     const String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta http-equiv='refresh' "
                         "content='2;url=/service'><title>–°–±—Ä–æ—Å</title></head><body "
                         "style='font-family:Arial,sans-serif;text-align:center;padding-top:40px'><h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ "
                         "—Å–±—Ä–æ—à–µ–Ω—ã</h2><p>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...<br>–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "
                         "—Å–µ—Ä–≤–∏—Å–æ–≤.</p></body></html>";
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                     delay(WEB_OPERATION_DELAY_MS);
                     ESP.restart();
                 });

    webServer.on(API_SYSTEM_RESET, HTTP_POST,
                 []()
                 {
                     webServer.sendHeader("Location", "/reset", true);
                     webServer.send(HTTP_REDIRECT_PERMANENT, HTTP_CONTENT_TYPE_PLAIN, "Redirect");
                 });

    webServer.on("/reboot", HTTP_POST,
                 []()
                 {
                     logWebRequest("POST", webServer.uri(), webServer.client().remoteIP().toString());

                     // ‚úÖ CSRF –∑–∞—â–∏—Ç–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏!
                     if (!checkCSRFSafety())
                     {
                         logWarnSafe("\1", webServer.client().remoteIP().toString().c_str());
                         const String html = generateErrorPage(HTTP_FORBIDDEN, "Forbidden: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω");
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_HTML, html);
                         return;
                     }

                     if (currentWiFiMode != WiFiMode::STA)
                     {
                         webServer.send(HTTP_FORBIDDEN, HTTP_CONTENT_TYPE_PLAIN, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
                         return;
                     }

                     const String html =
                         "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta http-equiv='refresh' "
                         "content='2;url=/service'><title>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞</title></head><body "
                         "style='font-family:Arial,sans-serif;text-align:center;padding-top:40px'><h2>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</"
                         "h2><p>–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–µ—Ä–≤–∏—Å–æ–≤.</p></body></html>";
                     webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_HTML, html);
                     delay(WEB_OPERATION_DELAY_MS);
                     ESP.restart();
                 });

    webServer.on(API_SYSTEM_REBOOT, HTTP_POST,
                 []()
                 {
                     webServer.sendHeader("Location", "/reboot", true);
                     webServer.send(HTTP_REDIRECT_PERMANENT, HTTP_CONTENT_TYPE_PLAIN, "Redirect");
                 });

    // –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç /ota –±–æ–ª–µ–µ –Ω–µ –Ω—É–∂–µ–Ω ‚Äì —Å–¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    webServer.on("/ota", HTTP_ANY,
                 []()
                 {
                     webServer.sendHeader("Location", "/updates", true);
                     webServer.send(HTTP_REDIRECT_TEMPORARY, HTTP_CONTENT_TYPE_PLAIN, "Redirect");
                 });

    logSuccess("–°–µ—Ä–≤–∏—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static String formatUptime(unsigned long milliseconds)
{
    unsigned long seconds = milliseconds / MILLISECONDS_IN_SECOND;
    unsigned long minutes = seconds / SECONDS_IN_MINUTE;
    unsigned long hours = minutes / MINUTES_IN_HOUR;
    const unsigned long days = hours / HOURS_IN_DAY;

    seconds %= SECONDS_IN_MINUTE;
    minutes %= MINUTES_IN_HOUR;
    hours %= HOURS_IN_DAY;

    String uptime = "";
    if (days > 0)
    {
        uptime += String(days) + "–¥ ";
    }
    if (hours > 0)
    {
        uptime += String(hours) + "—á ";
    }
    if (minutes > 0)
    {
        uptime += String(minutes) + "–º ";
    }
    uptime += String(seconds) + "—Å";

    return uptime;
}

// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendHealthJson()
{
    logWebRequest("GET", webServer.uri(), webServer.client().remoteIP().toString());
    StaticJsonDocument<JSON_DOC_MEDIUM> doc;

    // System info
    doc["device"]["manufacturer"] = DEVICE_MANUFACTURER;
    doc["device"]["model"] = DEVICE_MODEL;
    doc["device"]["version"] = FIRMWARE_VERSION;
    doc["device"]["uptime"] = millis() / MILLISECONDS_IN_SECOND;
    doc["device"]["free_heap"] = ESP.getFreeHeap();
    doc["device"]["chip_model"] = ESP.getChipModel();
    doc["device"]["chip_revision"] = ESP.getChipRevision();
    doc["device"]["cpu_freq"] = ESP.getCpuFreqMHz();

    // Memory info
    doc["memory"]["free_heap"] = ESP.getFreeHeap();
    doc["memory"]["largest_free_block"] = ESP.getMaxAllocHeap();
    doc["memory"]["heap_size"] = ESP.getHeapSize();
    doc["memory"]["psram_size"] = ESP.getPsramSize();
    doc["memory"]["free_psram"] = ESP.getFreePsram();

    // WiFi status
    doc["wifi"]["connected"] = wifiConnected;
    if (wifiConnected)
    {
        doc["wifi"]["ssid"] = WiFi.SSID();
        doc["wifi"]["ip"] = WiFi.localIP().toString();
        doc["wifi"]["rssi"] = WiFi.RSSI();
        doc["wifi"]["mac"] = WiFi.macAddress();
        doc["wifi"]["gateway"] = WiFi.gatewayIP().toString();
        doc["wifi"]["dns"] = WiFi.dnsIP().toString();
    }

    // MQTT status
    doc["mqtt"]["enabled"] = (bool)config.flags.mqttEnabled;
    if (config.flags.mqttEnabled)
    {
        doc["mqtt"]["connected"] = mqttClient.connected();
        doc["mqtt"]["server"] = config.mqttServer;
        doc["mqtt"]["port"] = config.mqttPort;
        doc["mqtt"]["last_error"] = getMqttLastError();
    }

    // ThingSpeak status
    doc["thingspeak"]["enabled"] = (bool)config.flags.thingSpeakEnabled;
    if (config.flags.thingSpeakEnabled)
    {
        doc["thingspeak"]["last_publish"] = getThingSpeakLastPublish();
        doc["thingspeak"]["last_error"] = getThingSpeakLastError();
        doc["thingspeak"]["interval"] = config.thingSpeakInterval;
    }

    // Home Assistant status
    doc["homeassistant"]["enabled"] = (bool)config.flags.hassEnabled;

    // Sensor status
    doc["sensor"]["enabled"] = (bool)config.flags.useRealSensor;
    doc["sensor"]["valid"] = sensorData.valid;
    doc["sensor"]["last_read"] = sensorData.last_update;
    if (getSensorLastError().length() > 0)
    {
        doc["sensor"]["last_error"] = getSensorLastError();
    }

    // Current readings
    doc["readings"]["temperature"] = format_temperature(sensorData.temperature);
    doc["readings"]["humidity"] = format_moisture(sensorData.humidity);
    doc["readings"]["ec"] = format_ec(sensorData.ec);
    doc["readings"]["ph"] = format_ph(sensorData.ph);
    doc["readings"]["nitrogen"] = format_npk(sensorData.nitrogen);
    doc["readings"]["phosphorus"] = format_npk(sensorData.phosphorus);
    doc["readings"]["potassium"] = format_npk(sensorData.potassium);

    // Timestamps
    doc["timestamp"] = millis();
    doc["boot_time"] = millis();

    String json;
    serializeJson(doc, json);
    webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, json);
}

// NOLINTNEXTLINE(misc-use-anonymous-namespace)
static void sendServiceStatusJson()
{
    logWebRequest("GET", webServer.uri(), webServer.client().remoteIP().toString());
    StaticJsonDocument<JSON_DOC_SMALL> doc;
    doc["wifi_connected"] = wifiConnected;
    doc["wifi_ip"] = WiFi.localIP().toString();
    doc["wifi_ssid"] = WiFi.SSID();
    doc["wifi_rssi"] = WiFi.RSSI();
    doc["mqtt_enabled"] = (bool)config.flags.mqttEnabled;
    doc["mqtt_connected"] = (bool)config.flags.mqttEnabled && mqttClient.connected();
    doc["mqtt_last_error"] = getMqttLastError();
    doc["thingspeak_enabled"] = (bool)config.flags.thingSpeakEnabled;
    doc["thingspeak_last_pub"] = getThingSpeakLastPublish();
    doc["thingspeak_last_error"] = getThingSpeakLastError();
    doc["hass_enabled"] = (bool)config.flags.hassEnabled;
    doc["sensor_ok"] = sensorData.valid;
    doc["sensor_last_error"] = getSensorLastError();

    String json;
    serializeJson(doc, json);
    webServer.send(HTTP_OK, HTTP_CONTENT_TYPE_JSON, json);
}
