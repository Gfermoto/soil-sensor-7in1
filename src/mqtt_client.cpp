/**
 * @file mqtt_client.cpp
 * @brief –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å MQTT-–±—Ä–æ–∫–µ—Ä–æ–º –∏ Home Assistant
 * @details –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Home Assistant —á–µ—Ä–µ–∑ discovery.
 */
#include "mqtt_client.h"  // üÜï –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
#include <Arduino.h>
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <PubSubClient.h>
#include <WiFiClient.h>
#include <array>
#include "debug.h"  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å–ª–æ–≤–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
#include "jxct_config_vars.h"
#include "jxct_constants.h"  // ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
#include "jxct_device_info.h"
#include "jxct_format_utils.h"
#include "logger.h"
#include "modbus_sensor.h"
#include "ota_manager.h"
#include "wifi_manager.h"
extern NTPClient* timeClient;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω)
WiFiClient espClient;
PubSubClient mqttClient(espClient);

namespace {
// Forward declarations –¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
void publishAvailabilityInternal(bool online);
void setupMQTTInternal();
bool connectMQTTInternal();
void handleMQTTInternal();
void publishSensorDataInternal();
void publishHomeAssistantConfigInternal();
void removeHomeAssistantConfigInternal();
void handleMqttCommandInternal(const String& cmd);
void mqttCallbackInternal(const char* topic, const byte* payload, unsigned int length);
void invalidateHAConfigCacheInternal();

// –ö—ç—à –¥–ª—è Home Assistant –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
struct HomeAssistantConfigCache
{
    std::array<char, 512> tempConfig = {""};
    std::array<char, 512> humConfig = {""};
    std::array<char, 512> ecConfig = {""};
    std::array<char, 512> phConfig = {""};
    std::array<char, 512> nitrogenConfig = {""};
    std::array<char, 512> phosphorusConfig = {""};
    std::array<char, 512> potassiumConfig = {""};
    bool isValid = false;
    std::array<char, 32> cachedDeviceId = {""};
    std::array<char, 64> cachedTopicPrefix = {""};
} haConfigCache;

// –ö—ç—à –¥–ª—è DNS –∑–∞–ø—Ä–æ—Å–æ–≤
struct DNSCache
{
    std::array<char, HOSTNAME_BUFFER_SIZE> hostname = {""};
    IPAddress cachedIP;
    unsigned long cacheTime;
    bool isValid;
} dnsCacheMqtt = {{""}, IPAddress(0, 0, 0, 0), 0, false};

// –ö—ç—à –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
std::array<std::array<char, 64>, 7> pubTopicCache = {{}};
bool pubTopicCacheValid = false;

// –ë—É—Ñ–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ MQTT
std::array<char, 128> mqttLastErrorBuffer = {""};

// –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ç–æ–ø–∏–∫–æ–≤
std::array<char, 32> clientIdBuffer = {""};
std::array<char, 128> statusTopicBuffer = {""};
std::array<char, 128> commandTopicBuffer = {""};
std::array<char, 128> otaStatusTopicBuffer = {""};
std::array<char, 128> otaCommandTopicBuffer = {""};

// –ö—ç—à JSON –¥–∞—Ç—á–∏–∫–æ–≤
std::array<char, 256> cachedSensorJson = {""};
unsigned long lastCachedSensorTime = 0;
bool sensorJsonCacheValid = false;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è IP —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
IPAddress getCachedIP(const char* hostname)
{
    const unsigned long currentTime = millis();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (dnsCacheMqtt.isValid && strcmp(dnsCacheMqtt.hostname.data(), hostname) == 0 &&
        (currentTime - dnsCacheMqtt.cacheTime < DNS_CACHE_TTL))
    {
        DEBUG_PRINTF("[DNS] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP %s –¥–ª—è %s\n", dnsCacheMqtt.cachedIP.toString().c_str(),
                     hostname);
        return dnsCacheMqtt.cachedIP;
    }

    // DNS –∑–∞–ø—Ä–æ—Å
    IPAddress resolvedIP;
    if (WiFi.hostByName(hostname, resolvedIP) != 0)  // NOLINT(readability-static-accessed-through-instance)
    {
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        strlcpy(dnsCacheMqtt.hostname.data(), hostname, dnsCacheMqtt.hostname.size());
        dnsCacheMqtt.cachedIP = resolvedIP;
        dnsCacheMqtt.cacheTime = currentTime;
        dnsCacheMqtt.isValid = true;
        DEBUG_PRINTF("[DNS] –ù–æ–≤—ã–π IP %s –¥–ª—è %s –∫—ç—à–∏—Ä–æ–≤–∞–Ω\n", resolvedIP.toString().c_str(), hostname);
        return resolvedIP;
    }

    return IPAddress{0, 0, 0, 0};  // –û—à–∏–±–∫–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞
}

String getClientId()
{
    static String clientId;
    if (clientId.length() == 0)
    {
        clientId = "JXCT_" + WiFi.macAddress();
        clientId.replace(":", "");
    }
    return clientId;
}

// –£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç—å—é (getEspClient, getMqttClient)

// -----------------------------
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ OTA
// -----------------------------
const char* getOtaStatusTopic()
{
    if (otaStatusTopicBuffer[0] == '\0')
    {
        snprintf(otaStatusTopicBuffer.data(), otaStatusTopicBuffer.size(), "%s/ota/status", config.mqttTopicPrefix);
    }
    return otaStatusTopicBuffer.data();
}

const char* getOtaCommandTopic()
{
    if (otaCommandTopicBuffer[0] == '\0')
    {
        snprintf(otaCommandTopicBuffer.data(), otaCommandTopicBuffer.size(), "%s/ota/command", config.mqttTopicPrefix);
    }
    return otaCommandTopicBuffer.data();
}

// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getMqttClientName
const char* getMqttClientName()
{
    if (strlen(config.mqttDeviceName) > 0)
    {
        return config.mqttDeviceName;
    }
    return getClientId().c_str();
}

// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getStatusTopic —Å –±—É—Ñ–µ—Ä–æ–º
const char* getStatusTopic()
{
    if (statusTopicBuffer[0] == '\0')
    {  // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        snprintf(statusTopicBuffer.data(), statusTopicBuffer.size(), "%s/status", config.mqttTopicPrefix);
    }
    return statusTopicBuffer.data();
}

// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getCommandTopic —Å –±—É—Ñ–µ—Ä–æ–º
const char* getCommandTopic()
{
    if (commandTopicBuffer[0] == '\0')
    {  // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        snprintf(commandTopicBuffer.data(), commandTopicBuffer.size(), "%s/command", config.mqttTopicPrefix);
    }
    return commandTopicBuffer.data();
}

const char* getMqttLastError() {
    return mqttLastErrorBuffer.data();
}

// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å NOLINT(misc-use-internal-linkage) —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å
void publishAvailabilityInternal(bool online)
{
    const char* topic = getStatusTopic();
    const char* payload = online ? "online" : "offline";
    DEBUG_PRINTF("[publishAvailability] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞: %s –≤ —Ç–æ–ø–∏–∫ %s\n", payload, topic);
    mqttClient.publish(topic, payload, true);
}

void setupMQTTInternal()
{
    DEBUG_PRINTLN("[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT");

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WiFi
    DEBUG_PRINTLN("[WiFi Debug] –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:");
    DEBUG_PRINTF("WiFi —Å—Ç–∞—Ç—É—Å: %d\n", WiFi.status());
    DEBUG_PRINTF("IP-–∞–¥—Ä–µ—Å: %s\n", WiFi.localIP().toString().c_str());
    DEBUG_PRINTF("–ú–∞—Å–∫–∞ –ø–æ–¥—Å–µ—Ç–∏: %s\n", WiFi.subnetMask().toString().c_str());
    DEBUG_PRINTF("–®–ª—é–∑: %s\n", WiFi.gatewayIP().toString().c_str());

    DEBUG_PRINTLN("[MQTT Debug] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:");
    DEBUG_PRINTF("MQTT –≤–∫–ª—é—á–µ–Ω: %d\n", config.flags.mqttEnabled);
    DEBUG_PRINTF("–°–µ—Ä–≤–µ—Ä: %s\n", config.mqttServer);
    DEBUG_PRINTF("–ü–æ—Ä—Ç: %d\n", config.mqttPort);
    DEBUG_PRINTF("–ü—Ä–µ—Ñ–∏–∫—Å —Ç–æ–ø–∏–∫–∞: %s\n", config.mqttTopicPrefix);
    DEBUG_PRINTF("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", config.mqttUser);

    if (!config.flags.mqttEnabled || strlen(config.mqttServer) == 0)
    {
        ERROR_PRINTLN("[–û–®–ò–ë–ö–ê] MQTT –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        return;
    }

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3.3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥
    const IPAddress mqttServerIP = getCachedIP(config.mqttServer);
    if (mqttServerIP == IPAddress(0, 0, 0, 0))
    {
        ERROR_PRINTF("[DNS] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å DNS –¥–ª—è %s\n", config.mqttServer);
        strlcpy(mqttLastErrorBuffer.data(), "–û—à–∏–±–∫–∞ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞", mqttLastErrorBuffer.size() - 1);
        return;
    }

    DEBUG_PRINTF("[DNS] MQTT —Å–µ—Ä–≤–µ—Ä %s -> %s\n", config.mqttServer, mqttServerIP.toString().c_str());
    mqttClient.setServer(mqttServerIP, config.mqttPort);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –≤–º–µ—Å—Ç–æ hostname
    mqttClient.setCallback(mqttCallback);
    mqttClient.setKeepAlive(30);
    mqttClient.setSocketTimeout(30);

    INFO_PRINTLN("[MQTT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å DNS –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º");
}

bool connectMQTTInternal()
{
    DEBUG_PRINTLN("[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi
    if (WiFi.status() != WL_CONNECTED)  // NOLINT(readability-static-accessed-through-instance)
    {
        ERROR_PRINTLN("[–û–®–ò–ë–ö–ê] WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        return false;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (strlen(config.mqttServer) == 0)
    {
        ERROR_PRINTLN("[–û–®–ò–ë–ö–ê] –ù–µ —É–∫–∞–∑–∞–Ω MQTT-—Å–µ—Ä–≤–µ—Ä");
        return false;
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const char* const clientId = getMqttClientName();
    DEBUG_PRINTF("[MQTT] –°–µ—Ä–≤–µ—Ä: %s\n", config.mqttServer);
    DEBUG_PRINTF("[MQTT] –ü–æ—Ä—Ç: %d\n", config.mqttPort);
    DEBUG_PRINTF("[MQTT] ID –∫–ª–∏–µ–Ω—Ç–∞: %s\n", clientId);
    DEBUG_PRINTF("[MQTT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", config.mqttUser);
    DEBUG_PRINTF("[MQTT] –ü–∞—Ä–æ–ª—å: %s\n", config.mqttPassword);

    mqttClient.setServer(config.mqttServer, config.mqttPort);

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const bool result = mqttClient.connect(clientId,
                                           config.mqttUser,      // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
                                           config.mqttPassword,  // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
                                           getStatusTopic(),
                                           1,         // QoS
                                           true,      // retain
                                           "offline"  // will message
    );

    DEBUG_PRINTF("[MQTT] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d\n", result);

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const int state = mqttClient.state();
    DEBUG_PRINTF("[MQTT] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: %d - ", state);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±—É—Ñ–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    switch (state)
    {
        case -4:
            DEBUG_PRINTLN("–¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
            strncpy(mqttLastErrorBuffer.data(), "–¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", mqttLastErrorBuffer.size() - 1);
            break;
        case -3:
            DEBUG_PRINTLN("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ");
            strncpy(mqttLastErrorBuffer.data(), "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ", mqttLastErrorBuffer.size() - 1);
            break;
        case -2:
            DEBUG_PRINTLN("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
            strncpy(mqttLastErrorBuffer.data(), "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", mqttLastErrorBuffer.size() - 1);
            break;
        case -1:
            DEBUG_PRINTLN("–û—Ç–∫–ª—é—á–µ–Ω–æ");
            strncpy(mqttLastErrorBuffer.data(), "–û—Ç–∫–ª—é—á–µ–Ω–æ", mqttLastErrorBuffer.size() - 1);
            break;
        case 0:
            DEBUG_PRINTLN("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ");
            strncpy(mqttLastErrorBuffer.data(), "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", mqttLastErrorBuffer.size() - 1);
            break;
        case 1:
            DEBUG_PRINTLN("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª");
            strncpy(mqttLastErrorBuffer.data(), "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª", mqttLastErrorBuffer.size() - 1);
            break;
        case 2:
            DEBUG_PRINTLN("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞");
            strncpy(mqttLastErrorBuffer.data(), "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞", mqttLastErrorBuffer.size() - 1);
            break;
        case 3:
            DEBUG_PRINTLN("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            strncpy(mqttLastErrorBuffer.data(), "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", mqttLastErrorBuffer.size() - 1);
            break;
        case 4:
            DEBUG_PRINTLN("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            strncpy(mqttLastErrorBuffer.data(), "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", mqttLastErrorBuffer.size() - 1);
            break;
        case 5:
            DEBUG_PRINTLN("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            strncpy(mqttLastErrorBuffer.data(), "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", mqttLastErrorBuffer.size() - 1);
            break;
        default:
            DEBUG_PRINTLN("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            strncpy(mqttLastErrorBuffer.data(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", mqttLastErrorBuffer.size() - 1);
            break;
    }

    // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
    if (result)
    {
        INFO_PRINTLN("[MQTT] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫ –∫–æ–º–∞–Ω–¥
        const char* commandTopic = getCommandTopic();
        mqttClient.subscribe(commandTopic);
        DEBUG_PRINTF("[MQTT] –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–ø–∏–∫ –∫–æ–º–∞–Ω–¥: %s\n", commandTopic);

        const char* otaCmdTopic = getOtaCommandTopic();
        mqttClient.subscribe(otaCmdTopic);
        DEBUG_PRINTF("[MQTT] –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ OTA –∫–æ–º–∞–Ω–¥—ã: %s\n", otaCmdTopic);

        // –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—É—Å availability
        publishAvailabilityInternal(true);

        // –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Home Assistant discovery –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (config.flags.hassEnabled)
        {
            publishHomeAssistantConfigInternal();
        }
    }

    return result;
}

void handleMQTTInternal()
{
    if (!config.flags.mqttEnabled)
    {
        return;
    }

    static bool wasConnected = false;
    const bool isConnected = mqttClient.connected();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (wasConnected && !isConnected)
    {
        logWarn("MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!");
    }
    else if (!wasConnected && isConnected)
    {
        logSuccess("MQTT –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
    }
    wasConnected = isConnected;

    if (!isConnected)
    {
        static unsigned long lastReconnectAttempt = 0;
        if (millis() - lastReconnectAttempt > 5000)
        {
            lastReconnectAttempt = millis();
            logMQTT("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
            connectMQTTInternal();
        }
    }
    else
    {
        mqttClient.loop();

        // –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—É—Å OTA, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–µ —á–∞—â–µ 5 —Å–µ–∫)
        static std::array<char, 64> lastOtaStatus = {""};
        static unsigned long lastOtaPublish = 0;
        const unsigned long OTA_STATUS_INTERVAL = 5000;
        if (millis() - lastOtaPublish > OTA_STATUS_INTERVAL)
        {
            const char* cur = getOtaStatus();
            if (strcmp(cur, lastOtaStatus.data()) != 0)
            {
                mqttClient.publish(getOtaStatusTopic(), cur, true);
                strlcpy(lastOtaStatus.data(), cur, lastOtaStatus.size());
            }
            lastOtaPublish = millis();
        }
    }
}

// –î–ï–õ–¨–¢–ê-–§–ò–õ–¨–¢–† v2.2.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
bool shouldPublishMqtt()
{
    static int skipCounter = 0;

    // –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –≤—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º
    if (sensorData.last_mqtt_publish == 0)
    {
        DEBUG_PRINTLN("[MQTT DEBUG] –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ");
        return true;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ N —Ü–∏–∫–ª–æ–≤ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ v2.3.0)
    if (++skipCounter >= config.forcePublishCycles)
    {
        skipCounter = 0;
        DEBUG_PRINTLN("[DELTA] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (—Ü–∏–∫–ª)");
        return true;
    }

    DEBUG_PRINTF("[MQTT DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª—å—Ç: skipCounter=%d, forcePublishCycles=%d\n", skipCounter,
                 config.forcePublishCycles);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª—å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bool hasSignificantChange = false;

    if (abs(sensorData.temperature - sensorData.prev_temperature) >= config.deltaTemperature)
    {
        DEBUG_PRINTF("[DELTA] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: %.1f -> %.1f (–¥–µ–ª—å—Ç–∞=%.1f)\n", sensorData.prev_temperature,
                     sensorData.temperature, config.deltaTemperature);
        hasSignificantChange = true;
    }

    if (abs(sensorData.humidity - sensorData.prev_humidity) >= config.deltaHumidity)
    {
        DEBUG_PRINTF("[DELTA] –í–ª–∞–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: %.1f -> %.1f (–¥–µ–ª—å—Ç–∞=%.1f)\n", sensorData.prev_humidity,
                     sensorData.humidity, config.deltaHumidity);
        hasSignificantChange = true;
    }

    if (abs(sensorData.ph - sensorData.prev_ph) >= config.deltaPh)
    {
        DEBUG_PRINTF("[DELTA] pH –∏–∑–º–µ–Ω–∏–ª—Å—è: %.1f -> %.1f (–¥–µ–ª—å—Ç–∞=%.1f)\n", sensorData.prev_ph, sensorData.ph,
                     config.deltaPh);
        hasSignificantChange = true;
    }

    if (abs(sensorData.ec - sensorData.prev_ec) >= config.deltaEc)
    {
        DEBUG_PRINTF("[DELTA] EC –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: %.0f -> %.0f (–¥–µ–ª—å—Ç–∞=%.0f)\n", sensorData.prev_ec, sensorData.ec,
                     config.deltaEc);
        hasSignificantChange = true;
    }

    if (abs(sensorData.nitrogen - sensorData.prev_nitrogen) >= config.deltaNpk)
    {
        DEBUG_PRINTF("[DELTA] –ê–∑–æ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è: %.0f -> %.0f (–¥–µ–ª—å—Ç–∞=%.0f)\n", sensorData.prev_nitrogen,
                     sensorData.nitrogen, config.deltaNpk);
        hasSignificantChange = true;
    }

    if (abs(sensorData.phosphorus - sensorData.prev_phosphorus) >= config.deltaNpk)
    {
        DEBUG_PRINTF("[DELTA] –§–æ—Å—Ñ–æ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è: %.0f -> %.0f (–¥–µ–ª—å—Ç–∞=%.0f)\n", sensorData.prev_phosphorus,
                     sensorData.phosphorus, config.deltaNpk);
        hasSignificantChange = true;
    }

    if (abs(sensorData.potassium - sensorData.prev_potassium) >= config.deltaNpk)
    {
        DEBUG_PRINTF("[DELTA] –ö–∞–ª–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è: %.0f -> %.0f (–¥–µ–ª—å—Ç–∞=%.0f)\n", sensorData.prev_potassium,
                     sensorData.potassium, config.deltaNpk);
        hasSignificantChange = true;
    }

    if (hasSignificantChange)
    {
        skipCounter = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–Ω–∞—á–∏–º–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        DEBUG_PRINTLN("[DELTA] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
    }
    else
    {
        DEBUG_PRINTLN("[DELTA] –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é");
        DEBUG_PRINTF("[DELTA] –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: T=%.1f, H=%.1f, pH=%.1f, EC=%.0f, N=%.0f, P=%.0f, K=%.0f\n",
                     sensorData.temperature, sensorData.humidity, sensorData.ph, sensorData.ec, sensorData.nitrogen,
                     sensorData.phosphorus, sensorData.potassium);
        DEBUG_PRINTF("[DELTA] –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: T=%.1f, H=%.1f, pH=%.1f, EC=%.0f, N=%.0f, P=%.0f, K=%.0f\n",
                     sensorData.prev_temperature, sensorData.prev_humidity, sensorData.prev_ph, sensorData.prev_ec,
                     sensorData.prev_nitrogen, sensorData.prev_phosphorus, sensorData.prev_potassium);
    }

    return hasSignificantChange;
}

void publishSensorDataInternal()
{
    DEBUG_PRINTF("[MQTT DEBUG] mqttEnabled=%d, connected=%d, valid=%d\n", config.flags.mqttEnabled,
                 mqttClient.connected(), sensorData.valid);

    if (!config.flags.mqttEnabled || !mqttClient.connected() || !sensorData.valid)
    {
        DEBUG_PRINTLN("[MQTT DEBUG] –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        return;
    }

    // –î–ï–õ–¨–¢–ê-–§–ò–õ–¨–¢–† v2.2.1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if (!shouldPublishMqtt())
    {
        DEBUG_PRINTLN("[MQTT DEBUG] –î–µ–ª—å—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        return;
    }

    DEBUG_PRINTLN("[MQTT DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...");

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö—ç—à–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
    const unsigned long currentTime = millis();
    bool needToRebuildJson = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å JSON (–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∏–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª)
    if (!sensorJsonCacheValid || (currentTime - lastCachedSensorTime > 1000) ||  // –ö—ç—à –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
        (currentTime - sensorData.last_update < 100))                            // –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    {
        needToRebuildJson = true;
    }

    if (needToRebuildJson)
    {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º JSON —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        StaticJsonDocument<256> doc;  // ‚úÖ –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä —Å 512 –¥–æ 256

        // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3.1: –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        doc["t"] = round(sensorData.temperature * 10) / 10.0;                        // temperature ‚Üí t (-10 –±–∞–π—Ç)
        doc["h"] = round(sensorData.humidity * 10) / 10.0;                           // humidity ‚Üí h (-7 –±–∞–π—Ç)
        doc["e"] = (int)round(sensorData.ec);                                        // ec ‚Üí e (—Å—Ç–∞–±–∏–ª—å–Ω–æ)
        doc["p"] = round(sensorData.ph * 10) / 10.0;                                 // ph ‚Üí p (—Å—Ç–∞–±–∏–ª—å–Ω–æ)
        doc["n"] = (int)round(sensorData.nitrogen);                                  // nitrogen ‚Üí n (-7 –±–∞–π—Ç)
        doc["r"] = (int)round(sensorData.phosphorus);                                // phosphorus ‚Üí r (-9 –±–∞–π—Ç)
        doc["k"] = (int)round(sensorData.potassium);                                 // potassium ‚Üí k (-8 –±–∞–π—Ç)
        doc["ts"] = (long)(timeClient != nullptr ? timeClient->getEpochTime() : 0);  // timestamp ‚Üí ts (-7 –±–∞–π—Ç)

        // ‚úÖ –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        serializeJson(doc, cachedSensorJson.data(), cachedSensorJson.size());
        lastCachedSensorTime = currentTime;
        sensorJsonCacheValid = true;

        DEBUG_PRINTLN("[MQTT] –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON –¥–∞—Ç—á–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω");
    }

    // ‚úÖ –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    static std::array<char, 128> stateTopicBuffer = {""};
    static bool stateTopicCached = false;
    if (!stateTopicCached)
    {
        snprintf(stateTopicBuffer.data(), stateTopicBuffer.size(), "%s/state", config.mqttTopicPrefix);
        stateTopicCached = true;
    }

    // –ü—É–±–ª–∏–∫—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
    bool res = mqttClient.publish(stateTopicBuffer.data(), cachedSensorJson.data(), true);

    if (res)
    {
        mqttLastErrorBuffer.fill('\0');

        // –î–ï–õ–¨–¢–ê-–§–ò–õ–¨–¢–† v2.2.1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        sensorData.prev_temperature = sensorData.temperature;
        sensorData.prev_humidity = sensorData.humidity;
        sensorData.prev_ec = sensorData.ec;
        sensorData.prev_ph = sensorData.ph;
        sensorData.prev_nitrogen = sensorData.nitrogen;
        sensorData.prev_phosphorus = sensorData.phosphorus;
        sensorData.prev_potassium = sensorData.potassium;
        sensorData.last_mqtt_publish = millis();

        DEBUG_PRINTLN("[MQTT] –î–∞–Ω–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    }
    else
    {
        strlcpy(mqttLastErrorBuffer.data(), "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ MQTT", mqttLastErrorBuffer.size());
    }
}

void publishHomeAssistantConfigInternal()
{
    DEBUG_PRINTLN("[publishHomeAssistantConfig] –ü—É–±–ª–∏–∫–∞—Ü–∏—è discovery-–∫–æ–Ω—Ñ–∏–≥–æ–≤ Home Assistant...");
    if (!config.flags.mqttEnabled || !mqttClient.connected() || !config.flags.hassEnabled)
    {
        DEBUG_PRINTLN("[publishHomeAssistantConfig] –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        return;
    }

    const String deviceIdStr = getDeviceId();
    const char* deviceId = deviceIdStr.c_str();

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    bool needToRebuildConfigs = false;
    if (!haConfigCache.isValid || strcmp(haConfigCache.cachedDeviceId.data(), deviceId) != 0 ||
        strcmp(haConfigCache.cachedTopicPrefix.data(), config.mqttTopicPrefix) != 0)
    {
        needToRebuildConfigs = true;
        DEBUG_PRINTLN("[HA] –ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —É—Å—Ç–∞—Ä–µ–ª, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...");
    }

    if (needToRebuildConfigs)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        strlcpy(haConfigCache.cachedDeviceId.data(), deviceId, haConfigCache.cachedDeviceId.size());
        strlcpy(haConfigCache.cachedTopicPrefix.data(), config.mqttTopicPrefix, haConfigCache.cachedTopicPrefix.size());

        // ‚úÖ –°–æ–∑–¥–∞–µ–º JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ–º –∏—Ö
        StaticJsonDocument<256> deviceInfo;
        deviceInfo["identifiers"] = deviceId;
        deviceInfo["manufacturer"] = DEVICE_MANUFACTURER;
        deviceInfo["model"] = DEVICE_MODEL;
        deviceInfo["sw_version"] = DEVICE_SW_VERSION;
        deviceInfo["name"] = deviceId;

        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å—Ä–∞–∑—É —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –∫—ç—à
        StaticJsonDocument<512> tempConfig;
        tempConfig["name"] = "JXCT Temperature";
        tempConfig["device_class"] = "temperature";
        tempConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        tempConfig["unit_of_measurement"] = "¬∞C";
        tempConfig["value_template"] = "{{ value_json.t }}";  // ‚úÖ temperature ‚Üí t
        tempConfig["unique_id"] = String(deviceId) + "_temp";
        tempConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        tempConfig["device"] = deviceInfo;
        serializeJson(tempConfig, haConfigCache.tempConfig.data(), haConfigCache.tempConfig.size());

        StaticJsonDocument<512> humConfig;
        humConfig["name"] = "JXCT Humidity";
        humConfig["device_class"] = "humidity";
        humConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        humConfig["unit_of_measurement"] = "%";
        humConfig["value_template"] = "{{ value_json.h }}";  // ‚úÖ humidity ‚Üí h
        humConfig["unique_id"] = String(deviceId) + "_hum";
        humConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        humConfig["device"] = deviceInfo;
        serializeJson(humConfig, haConfigCache.humConfig.data(), haConfigCache.humConfig.size());

        StaticJsonDocument<512> ecConfig;
        ecConfig["name"] = "JXCT EC";
        ecConfig["device_class"] = "conductivity";
        ecConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        ecConfig["unit_of_measurement"] = "¬µS/cm";
        ecConfig["value_template"] = "{{ value_json.e }}";  // ‚úÖ ec ‚Üí e
        ecConfig["unique_id"] = String(deviceId) + "_ec";
        ecConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        ecConfig["device"] = deviceInfo;
        serializeJson(ecConfig, haConfigCache.ecConfig.data(), haConfigCache.ecConfig.size());

        StaticJsonDocument<512> phConfig;
        phConfig["name"] = "JXCT pH";
        phConfig["device_class"] = "ph";
        phConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        phConfig["unit_of_measurement"] = "pH";
        phConfig["value_template"] = "{{ value_json.p }}";  // ‚úÖ ph ‚Üí p
        phConfig["unique_id"] = String(deviceId) + "_ph";
        phConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        phConfig["device"] = deviceInfo;
        serializeJson(phConfig, haConfigCache.phConfig.data(), haConfigCache.phConfig.size());

        StaticJsonDocument<512> nitrogenConfig;
        nitrogenConfig["name"] = "JXCT Nitrogen";
        nitrogenConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        nitrogenConfig["unit_of_measurement"] = "mg/kg";
        nitrogenConfig["value_template"] = "{{ value_json.n }}";  // ‚úÖ nitrogen ‚Üí n
        nitrogenConfig["unique_id"] = String(deviceId) + "_nitrogen";
        nitrogenConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        nitrogenConfig["device"] = deviceInfo;
        serializeJson(nitrogenConfig, haConfigCache.nitrogenConfig.data(), haConfigCache.nitrogenConfig.size());

        StaticJsonDocument<512> phosphorusConfig;
        phosphorusConfig["name"] = "JXCT Phosphorus";
        phosphorusConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        phosphorusConfig["unit_of_measurement"] = "mg/kg";
        phosphorusConfig["value_template"] = "{{ value_json.r }}";  // ‚úÖ phosphorus ‚Üí r
        phosphorusConfig["unique_id"] = String(deviceId) + "_phosphorus";
        phosphorusConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        phosphorusConfig["device"] = deviceInfo;
        serializeJson(phosphorusConfig, haConfigCache.phosphorusConfig.data(), haConfigCache.phosphorusConfig.size());

        StaticJsonDocument<512> potassiumConfig;
        potassiumConfig["name"] = "JXCT Potassium";
        potassiumConfig["state_topic"] = String(config.mqttTopicPrefix) + "/state";
        potassiumConfig["unit_of_measurement"] = "mg/kg";
        potassiumConfig["value_template"] = "{{ value_json.k }}";  // ‚úÖ potassium ‚Üí k
        potassiumConfig["unique_id"] = String(deviceId) + "_potassium";
        potassiumConfig["availability_topic"] = String(config.mqttTopicPrefix) + "/status";
        potassiumConfig["device"] = deviceInfo;
        serializeJson(potassiumConfig, haConfigCache.potassiumConfig.data(), haConfigCache.potassiumConfig.size());

        // ‚úÖ –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        snprintf(pubTopicCache[0].data(), pubTopicCache[0].size(), "homeassistant/sensor/%s_temperature/config",
                 deviceId);
        snprintf(pubTopicCache[1].data(), pubTopicCache[1].size(), "homeassistant/sensor/%s_humidity/config", deviceId);
        snprintf(pubTopicCache[2].data(), pubTopicCache[2].size(), "homeassistant/sensor/%s_ec/config", deviceId);
        snprintf(pubTopicCache[3].data(), pubTopicCache[3].size(), "homeassistant/sensor/%s_ph/config", deviceId);
        snprintf(pubTopicCache[4].data(), pubTopicCache[4].size(), "homeassistant/sensor/%s_nitrogen/config", deviceId);
        snprintf(pubTopicCache[5].data(), pubTopicCache[5].size(), "homeassistant/sensor/%s_phosphorus/config",
                 deviceId);
        snprintf(pubTopicCache[6].data(), pubTopicCache[6].size(), "homeassistant/sensor/%s_potassium/config",
                 deviceId);
        pubTopicCacheValid = true;

        haConfigCache.isValid = true;
        INFO_PRINTLN("[HA] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã");
    }

    // ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º –∏–∑ –∫—ç—à–∞ (—Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ!)
    mqttClient.publish(pubTopicCache[0].data(), haConfigCache.tempConfig.data(), true);
    mqttClient.publish(pubTopicCache[1].data(), haConfigCache.humConfig.data(), true);
    mqttClient.publish(pubTopicCache[2].data(), haConfigCache.ecConfig.data(), true);
    mqttClient.publish(pubTopicCache[3].data(), haConfigCache.phConfig.data(), true);
    mqttClient.publish(pubTopicCache[4].data(), haConfigCache.nitrogenConfig.data(), true);
    mqttClient.publish(pubTopicCache[5].data(), haConfigCache.phosphorusConfig.data(), true);
    mqttClient.publish(pubTopicCache[6].data(), haConfigCache.potassiumConfig.data(), true);

    INFO_PRINTLN("[HA] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Home Assistant –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏–∑ –∫—ç—à–∞");
    mqttLastErrorBuffer.fill('\0');
}

void removeHomeAssistantConfigInternal()
{
    const String deviceIdStr = getDeviceId();
    const char* deviceId = deviceIdStr.c_str();
    // –ü—É–±–ª–∏–∫—É–µ–º –ø—É—Å—Ç–æ–π payload —Å retain –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏–∑ HA
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_temperature/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_humidity/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_ec/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_ph/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_nitrogen/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_phosphorus/config").c_str(), "", true);
    mqttClient.publish(("homeassistant/sensor/" + String(deviceId) + "_potassium/config").c_str(), "", true);
    INFO_PRINTLN("[MQTT] Discovery-–∫–æ–Ω—Ñ–∏–≥–∏ Home Assistant —É–¥–∞–ª–µ–Ω—ã");
    mqttLastErrorBuffer.fill('\0');
}

void handleMqttCommandInternal(const String& cmd)
{
    DEBUG_PRINT("[MQTT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ");
    DEBUG_PRINTLN(cmd);
    if (cmd == "reboot")
    {
        ESP.restart();
    }
    else if (cmd == "reset")
    {
        resetConfig();
        ESP.restart();
    }
    else if (cmd == "publish_test")
    {
        publishSensorDataInternal();
    }
    else if (cmd == "publish_discovery")
    {
        publishHomeAssistantConfigInternal();
    }
    else if (cmd == "remove_discovery")
    {
        removeHomeAssistantConfigInternal();
    }
    else if (cmd == "ota_check")
    {
        triggerOtaCheck();
        handleOTA();
    }
    else if (cmd == "ota_auto_on" || cmd == "ota_auto_off")
    {
        config.flags.autoOtaEnabled = (cmd == "ota_auto_on") ? 1 : 0;
        saveConfig();
        publishAvailabilityInternal(true);
    }
    else
    {
        DEBUG_PRINTLN("[MQTT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
}

void mqttCallbackInternal(const char* topic, const byte* payload, unsigned int length)
{
    const String topic_str = String(topic);
    const String message = String((char*)payload, length);
    
    if (topic_str == getCommandTopic())
    {
        handleMqttCommandInternal(message);
    }
}

void invalidateHAConfigCacheInternal()
{
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ Home Assistant –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    haConfigCache.isValid = false;
}

} // namespace

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
void publishAvailability(bool online)
{
    publishAvailabilityInternal(online);
}

void setupMQTT()
{
    setupMQTTInternal();
}

bool connectMQTT()
{
    return connectMQTTInternal();
}

void handleMQTT()
{
    handleMQTTInternal();
}

void publishSensorData()
{
    publishSensorDataInternal();
}

void publishHomeAssistantConfig()
{
    publishHomeAssistantConfigInternal();
}

void removeHomeAssistantConfig()
{
    removeHomeAssistantConfigInternal();
}

void handleMqttCommand(const String& cmd)
{
    handleMqttCommandInternal(cmd);
}

void mqttCallback(const char* topic, const byte* payload, unsigned int length)
{
    mqttCallbackInternal(topic, payload, length);
}

void invalidateHAConfigCache()
{
    invalidateHAConfigCacheInternal();
}

const char* getMqttLastError()
{
    return mqttLastErrorBuffer.data();
}


