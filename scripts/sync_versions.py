#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π JXCT
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: EYERA Development Team
–î–∞—Ç–∞: 2025-07-03

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import re
import sys
from pathlib import Path
from datetime import datetime, UTC


class VersionSynchronizer:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.version_file = project_root / "VERSION"
        self.current_version = self._read_version()

        # –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        self.version_files = [
            "VERSION",
            "include/version.h",
            "platformio.ini",
            "mkdocs.yml",
            "README.md",
            "docs/index.md",
            "docs/CURRENT_TEST_RESULTS.md",
            "docs/TESTING_GUIDE.md",
            "docs/STAGE_2_COMPLETION_REPORT.md",
            "docs/NAVIGATION.md",
            "docs/dev/TECH_DEBT_REPORT_2025-06.md",
            "docs/dev/ARCH_OVERALL.md",
            "docs/manuals/API.md",
            "docs/manuals/USER_GUIDE.md",
            "docs/manuals/TECHNICAL_DOCS.md",
            "docs/manuals/CONFIG_MANAGEMENT.md",
            "docs/manuals/COMPENSATION_GUIDE.md",
            "docs/manuals/AGRO_RECOMMENDATIONS.md",
            "docs/manuals/MODBUS_PROTOCOL.md",
            "docs/manuals/VERSION_MANAGEMENT.md",
            "docs/manuals/WIRING_DIAGRAM.md",
            "src/web/routes_reports.cpp",
            "test/esp/test_simple.cpp",
            "test/esp/test_all_combined.cpp",
            ".github/workflows/comprehensive-testing.yml",
            "scripts/run_comprehensive_tests.py"
        ]

        # JSON —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.json_files = [
            "test_reports/simple-test-report.json",
            "test_reports/comprehensive-report.json",
            "test_reports/combined-test-report.json",
            "test_reports/technical-debt.json",
            "docs/test_reports/simple-test-report.json",
            "docs/test_reports/comprehensive-report.json",
            "docs/test_reports/combined-test-report.json",
            "docs/test_reports/technical-debt.json",
            "site/test_reports/simple-test-report.json",
            "site/test_reports/comprehensive-report.json",
            "site/test_reports/combined-test-report.json",
            "site/test_reports/technical-debt.json"
        ]

    def _read_version(self) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            for encoding in ['utf-8', 'cp1251', 'latin-1', 'iso-8859-1']:
                try:
                    with open(self.version_file, 'r', encoding=encoding) as f:
                        version = f.read().strip()
                        print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}")
                        return version
                except UnicodeDecodeError:
                    continue
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
            with open(self.version_file, 'rb') as f:
                content = f.read()
                # –£–±–∏—Ä–∞–µ–º BOM –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                if content.startswith(b'\xef\xbb\xbf'):
                    content = content[3:]
                version = content.decode('utf-8', errors='ignore').strip()
                print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è (–±–∏–Ω–∞—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ): {version}")
                return version
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è VERSION: {e}")
            sys.exit(1)

    def sync_all_versions(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"""
        print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ {self.current_version}...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path in self.version_files:
            self._update_file_version(file_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª—ã
        for file_path in self.json_files:
            self._update_json_version(file_path)

        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def _update_file_version(self, file_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ"""
        full_path = self.project_root / file_path
        if not full_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
            patterns = [
                r'version["\s]*[:=]["\s]*3\.6\.\d+["\s]*',
                r'Version["\s]*[:=]["\s]*3\.6\.\d+["\s]*',
                r'–í–µ—Ä—Å–∏—è["\s]*[:=]["\s]*3\.6\.\d+["\s]*',
                r'v3\.6\.\d+',
                r'3\.6\.\d+',
                r'PROJECT_VERSION["\s]*[:=]["\s]*3\.6\.\d+["\s]*'
            ]

            updated = False
            for pattern in patterns:
                if re.search(pattern, content):
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –Ω–æ–≤—É—é
                    new_content = re.sub(pattern, lambda m: self._replace_version(m.group(), self.current_version), content)
                    if new_content != content:
                        content = new_content
                        updated = True

            if updated:
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            else:
                print(f"‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")

    def _update_json_version(self, file_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ JSON —Ñ–∞–π–ª–µ"""
        full_path = self.project_root / file_path
        if not full_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –≤ JSON
            pattern = r'"version"\s*:\s*"3\.6\.\d+"'
            if re.search(pattern, content):
                new_content = re.sub(pattern, f'"version": "{self.current_version}"', content)
                if new_content != content:
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω JSON: {file_path}")
                else:
                    print(f"‚ÑπÔ∏è JSON –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            else:
                print(f"‚ÑπÔ∏è –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON: {file_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON {file_path}: {e}")

    def _replace_version(self, match: str, new_version: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –ª—é–±—É—é –≤–µ—Ä—Å–∏—é 3.6.x –Ω–∞ –Ω–æ–≤—É—é
        return re.sub(r'3\.6\.\d+', new_version, match)

    def verify_sync(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–µ—Ä—Å–∏–π"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π...")

        mismatches = []

        for file_path in self.version_files + self.json_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                continue

            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –ò—â–µ–º –≤–µ—Ä—Å–∏–∏ 3.6.x
                versions = re.findall(r'3\.6\.\d+', content)
                for version in versions:
                    if version != self.current_version:
                        mismatches.append(f"{file_path}: {version} != {self.current_version}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {file_path}: {e}")

        if mismatches:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–µ—Ä—Å–∏–π:")
            for mismatch in mismatches:
                print(f"  - {mismatch}")
        else:
            print("‚úÖ –í—Å–µ –≤–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path.cwd()

    print("üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π JXCT")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")

    synchronizer = VersionSynchronizer(project_root)

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏–∏
    synchronizer.sync_all_versions()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    synchronizer.verify_sync()

    print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now(UTC).strftime('%Y-%m-%d %H:%M:%S UTC')}")


if __name__ == "__main__":
    main()
