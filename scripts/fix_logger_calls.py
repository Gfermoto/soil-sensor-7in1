#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—ã–∑–æ–≤–æ–≤ C-style variadic functions –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ template –≤–µ—Ä—Å–∏–∏
"""

import os
import re
import glob

def fix_logger_calls():
    """–ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—ã–∑–æ–≤—ã C-style variadic functions –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ template –≤–µ—Ä—Å–∏–∏"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    replacements = [
        (r'logError\s*\(\s*"([^"]*)"\s*,', r'logErrorSafe("\\1",'),
        (r'logWarn\s*\(\s*"([^"]*)"\s*,', r'logWarnSafe("\\1",'),
        (r'logInfo\s*\(\s*"([^"]*)"\s*,', r'logInfoSafe("\\1",'),
        (r'logDebug\s*\(\s*"([^"]*)"\s*,', r'logDebugSafe("\\1",'),
        (r'logSuccess\s*\(\s*"([^"]*)"\s*,', r'logSuccessSafe("\\1",'),
        (r'logSensor\s*\(\s*"([^"]*)"\s*,', r'logSensorSafe("\\1",'),
        (r'logWiFi\s*\(\s*"([^"]*)"\s*,', r'logWiFiSafe("\\1",'),
        (r'logMQTT\s*\(\s*"([^"]*)"\s*,', r'logMQTTSafe("\\1",'),
        (r'logHTTP\s*\(\s*"([^"]*)"\s*,', r'logHTTPSafe("\\1",'),
        (r'logSystem\s*\(\s*"([^"]*)"\s*,', r'logSystemSafe("\\1",'),
        (r'logData\s*\(\s*"([^"]*)"\s*,', r'logDataSafe("\\1",'),
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    cpp_files = glob.glob('src/**/*.cpp', recursive=True)
    
    total_fixes = 0
    
    for file_path in cpp_files:
        if 'logger.cpp' in file_path:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º logger.cpp
            continue
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
            for pattern, replacement in replacements:
                content = re.sub(pattern, replacement, content)
            
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                changes = 0
                for pattern, replacement in replacements:
                    matches = len(re.findall(pattern, original_content))
                    changes += matches
                
                total_fixes += changes
                print(f"‚úÖ {file_path}: {changes} –∑–∞–º–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
    
    print(f"\nüéØ –í—Å–µ–≥–æ –∑–∞–º–µ–Ω–µ–Ω–æ: {total_fixes} –≤—ã–∑–æ–≤–æ–≤")
    return total_fixes

if __name__ == "__main__":
    print("üîß –ó–∞–º–µ–Ω–∞ –≤—ã–∑–æ–≤–æ–≤ C-style variadic functions –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ template –≤–µ—Ä—Å–∏–∏...")
    fix_logger_calls()
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!") 