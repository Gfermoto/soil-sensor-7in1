#!/usr/bin/env python3
"""
üîç JXCT Dependency Analyzer v1.0
–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import re
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple
from dataclasses import dataclass
from collections import defaultdict

@dataclass
class ModuleInfo:
    name: str
    path: str
    dependencies: Set[str]
    dependents: Set[str]
    critical_level: int  # 0-5, –≥–¥–µ 5 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    category: str

class DependencyAnalyzer:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.modules: Dict[str, ModuleInfo] = {}
        self.critical_modules = {
            "main.cpp": 5,
            "validation_utils.cpp": 4,
            "sensor_compensation_service.cpp": 4,
            "calibration_manager.cpp": 4,
            "advanced_filters.cpp": 3,
            "mqtt_client.cpp": 3,
            "wifi_manager.cpp": 3,
            "web_routes.cpp": 3
        }
        
    def analyze_project(self) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π JXCT –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ C++ —Ñ–∞–π–ª—ã
        cpp_files = list(self.project_root.rglob("*.cpp"))
        h_files = list(self.project_root.rglob("*.h"))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for file_path in cpp_files + h_files:
            if "test/" in str(file_path) or "docs/" in str(file_path):
                continue
            self._analyze_file(file_path)
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dependency_graph = self._build_dependency_graph()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
        critical_paths = self._find_critical_paths()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = {
            "modules": {name: {
                "path": info.path,
                "dependencies": list(info.dependencies),
                "dependents": list(info.dependents),
                "critical_level": info.critical_level,
                "category": info.category
            } for name, info in self.modules.items()},
            "dependency_graph": dependency_graph,
            "critical_paths": critical_paths,
            "recommendations": self._generate_recommendations()
        }
        
        return report
    
    def _analyze_file(self, file_path: Path):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            content = file_path.read_text(encoding='utf-8', errors='ignore')
            module_name = file_path.name
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._determine_category(file_path)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dependencies = self._extract_dependencies(content, file_path)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
            critical_level = self.critical_modules.get(module_name, 1)
            
            self.modules[module_name] = ModuleInfo(
                name=module_name,
                path=str(file_path),
                dependencies=dependencies,
                dependents=set(),
                critical_level=critical_level,
                category=category
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
    
    def _determine_category(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥—É–ª—è"""
        path_str = str(file_path)
        
        if "business/" in path_str:
            return "business_logic"
        elif "web/" in path_str:
            return "web_interface"
        elif "include/" in path_str:
            return "headers"
        elif file_path.name == "main.cpp":
            return "core"
        elif "validation" in file_path.name:
            return "validation"
        elif "sensor" in file_path.name:
            return "sensors"
        elif "mqtt" in file_path.name or "wifi" in file_path.name:
            return "communication"
        else:
            return "utilities"
    
    def _extract_dependencies(self, content: str, file_path: Path) -> Set[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        dependencies = set()
        
        # –ò—â–µ–º #include
        include_pattern = r'#include\s*["<]([^">]+)[">]'
        includes = re.findall(include_pattern, content)
        
        for include in includes:
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—É—Ç–∏
            module_name = Path(include).stem
            if module_name and not module_name.startswith(('Arduino', 'WiFi', 'ESP32')):
                dependencies.add(module_name)
        
        return dependencies
    
    def _build_dependency_graph(self) -> Dict:
        """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –û–±–Ω–æ–≤–ª—è–µ–º dependents
        for module_name, module_info in self.modules.items():
            for dep in module_info.dependencies:
                if dep in self.modules:
                    self.modules[dep].dependents.add(module_name)
        
        return {
            "nodes": len(self.modules),
            "edges": sum(len(m.dependencies) for m in self.modules.values()),
            "critical_modules": [name for name, info in self.modules.items() 
                               if info.critical_level >= 4]
        }
    
    def _find_critical_paths(self) -> List[List[str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        critical_paths = []
        
        # –ò—â–µ–º –ø—É—Ç–∏ –∫ main.cpp
        main_deps = self.modules.get("main.cpp", ModuleInfo("", "", set(), set(), 0, ""))
        if main_deps.dependencies:
            for dep in main_deps.dependencies:
                if dep in self.modules:
                    path = self._find_path_to_module(dep, set())
                    if path:
                        critical_paths.append(path)
        
        return critical_paths
    
    def _find_path_to_module(self, target: str, visited: Set[str]) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é"""
        if target in visited:
            return []
        
        visited.add(target)
        module = self.modules.get(target)
        if not module:
            return []
        
        if module.critical_level >= 4:
            return [target]
        
        for dep in module.dependencies:
            if dep in self.modules:
                path = self._find_path_to_module(dep, visited)
                if path:
                    return [target] + path
        
        return []
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cycles = self._find_cycles()
        if cycles:
            recommendations.append(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {cycles}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
        critical_count = sum(1 for m in self.modules.values() if m.critical_level >= 4)
        if critical_count > 5:
            recommendations.append(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π ({critical_count}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
        large_modules = [name for name, info in self.modules.items() 
                        if len(info.dependencies) > 10]
        if large_modules:
            recommendations.append(f"‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –º–æ–¥—É–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {large_modules}")
        
        return recommendations
    
    def _find_cycles(self) -> List[List[str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω DFS
        return []

def main():
    analyzer = DependencyAnalyzer()
    report = analyzer.analyze_project()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    output_file = "test_reports/dependency_analysis.json"
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {len(report['modules'])}")
    print(f"üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π: {len(report['critical_paths'])}")
    
    if report['recommendations']:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in report['recommendations']:
            print(f"  {rec}")

if __name__ == "__main__":
    main() 