#!/usr/bin/env python3
"""
üîç Clang-tidy –∞–Ω–∞–ª–∏–∑ –¥–ª—è JXCT
–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""

import sys
import subprocess
import argparse
from pathlib import Path

def run_clang_tidy_quick():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ clang-tidy"""
    print("[INFO] üîç –ë—ã—Å—Ç—Ä—ã–π clang-tidy –∞–Ω–∞–ª–∏–∑...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    main_files = [
        "src/validation_utils.cpp",
        "src/sensor_compensation.cpp", 
        "src/main.cpp"
    ]
    
    total_warnings = 0
    checked_files = 0
    
    for file_path in main_files:
        if Path(file_path).exists():
            try:
                result = subprocess.run([
                    "clang-tidy", file_path, "--", "-std=c++17"
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    warnings = result.stdout.count("warning:")
                    total_warnings += warnings
                    checked_files += 1
                    print(f"   ‚úÖ {file_path}: {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                else:
                    print(f"   ‚ö†Ô∏è {file_path}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
                    
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ {file_path}: —Ç–∞–π–º–∞—É—Ç")
            except Exception as e:
                print(f"   ‚ùå {file_path}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {checked_files}")
    print(f"   ‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
    
    return total_warnings <= 50  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –±–æ–ª—å—à–µ 50

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Clang-tidy –∞–Ω–∞–ª–∏–∑")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º")
    args = parser.parse_args()
    
    if args.quick:
        success = run_clang_tidy_quick()
        return 0 if success else 1
    
    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    print("[INFO] üîç –ü–æ–ª–Ω—ã–π clang-tidy –∞–Ω–∞–ª–∏–∑...")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .cpp —Ñ–∞–π–ª—ã
    cpp_files = []
    for root, dirs, files in os.walk('src'):
        for file in files:
            if file.endswith('.cpp'):
                cpp_files.append(os.path.join(root, file).replace('\\', '/'))

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(cpp_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    results = []
    for i, file_path in enumerate(cpp_files, 1):
        print(f"‚è≥ –ê–Ω–∞–ª–∏–∑ {i}/{len(cpp_files)}: {file_path}")
        result = run_clang_tidy(file_path)
        results.append(result)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    report = generate_report(results)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = 'test_reports/clang_tidy_analysis_report.md'
    os.makedirs(os.path.dirname(report_path), exist_ok=True)

    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    json_path = 'test_reports/clang_tidy_analysis_data.json'
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    print(f"üîß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_path}")

    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_warnings = 0
    for result in results:
        if result['returncode'] in [0, 1]:
            warnings = parse_warnings(result['stdout'])
            total_warnings += len(warnings)

    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")

if __name__ == "__main__":
    sys.exit(main())
