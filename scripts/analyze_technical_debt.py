#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –¥–ª—è JXCT –ø—Ä–æ–µ–∫—Ç–∞
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç—ã –¥–ª—è CI/CD –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import os
import json
import subprocess
import sys
import shutil
from datetime import datetime
from pathlib import Path

def run_command(cmd, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=cwd)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def analyze_clang_tidy():
    """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é clang-tidy"""
    print("üîç –ê–Ω–∞–ª–∏–∑ clang-tidy...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ clang-tidy
    if shutil.which("clang-tidy") is None:
        print("‚ö†Ô∏è  clang-tidy –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑")
        return {"skipped": True}

    # –ù–∞—Ö–æ–¥–∏–º C/C++ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –æ—Ç—á—ë—Ç–∞–º–∏)
    cpp_files: list[str] = []
    for root, dirs, files in os.walk("src"):
        for file in files:
            if file.endswith(('.cpp', '.c', '.cc', '.cxx', '.c++', '.h', '.hpp')):
                cpp_files.append(os.path.join(root, file))

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º include-–¥–µ—Ä–µ–≤–æ
    for root, dirs, files in os.walk("include"):
        for file in files:
            if file.endswith(('.h', '.hpp')):
                cpp_files.append(os.path.join(root, file))

    if not cpp_files:
        return {"error": "C/C++ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

    checks = "modernize-*,performance-*,readability-*,bugprone-*"

    warnings = {
        "high": 0,
        "medium": 0,
        "low": 0,
        "details": []
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º clang-tidy –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)
    for file in cpp_files:
        cmd = ["clang-tidy", file, f"-checks={checks}", "--", "-I", "include", "-I", "src", "-std=c++17"]
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())
            output = result.stdout + "\n" + result.stderr

            for line in output.split('\n'):
                if "warning:" in line and ".pio/libdeps" not in line:
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–∞–≤–∏–ª–∞
                    if any(key in line for key in ["performance-", "bugprone-"]):
                        warnings["high"] += 1
                    elif "modernize-" in line:
                        warnings["medium"] += 1
                    else:
                        warnings["low"] += 1
                    warnings["details"].append(line.strip())
        except Exception as e:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
            warnings["details"].append(f"clang-tidy error for {file}: {e}")

    return warnings

def analyze_include_dependencies():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π include"""
    print("üì¶ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π include...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    include_files = []
    for root, dirs, files in os.walk("include"):
        for file in files:
            if file.endswith('.h'):
                include_files.append(os.path.join(root, file))
    
    cycles_found = 0
    unused_includes = 0
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
    # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö include —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    # –ü–æ–∫–∞ —á—Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ include –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
    
    return {
        "cycles": cycles_found,
        "unused_includes": 0,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ include –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        "total_files_checked": len(include_files)
    }

def analyze_code_duplication():
    """–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
    print("üîÑ –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    duplication_score = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    src_files = []
    for root, dirs, files in os.walk("src"):
        for file in files:
            if file.endswith('.cpp'):
                src_files.append(os.path.join(root, file))
    
    # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–∞ (–±–ª–æ–∫–∏ –∫–æ–¥–∞, –∞ –Ω–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π)
    code_blocks = []
    for file in src_files[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        try:
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
                # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–ª–æ–∫–∏ –∫–æ–¥–∞ (3+ —Å—Ç—Ä–æ–∫–∏)
                for i in range(len(lines) - 2):
                    block = '\n'.join(lines[i:i+3])
                    if len(block.strip()) > 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
                        code_blocks.append(block.strip())
        except:
            continue
    
    # –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    seen_blocks = set()
    for block in code_blocks:
        if block in seen_blocks:
            duplication_score += 1
        seen_blocks.add(block)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º score —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    duplication_score = min(duplication_score, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    return {
        "duplication_score": duplication_score,
        "unique_functions": len(seen_blocks),
        "files_checked": len(src_files[:10])
    }

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞...")
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "version": "3.5.0",
        "analysis": {}
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
    report["analysis"]["clang_tidy"] = analyze_clang_tidy()
    report["analysis"]["include_deps"] = analyze_include_dependencies()
    report["analysis"]["duplication"] = analyze_code_duplication()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π score
    total_score = 0
    if "clang_tidy" in report["analysis"]:
        clang = report["analysis"]["clang_tidy"]
        if isinstance(clang, dict):
            total_score += clang.get("high", 0) * 3
            total_score += clang.get("medium", 0) * 0
            total_score += clang.get("low", 0) * 0
    
    if "include_deps" in report["analysis"]:
        deps = report["analysis"]["include_deps"]
        total_score += deps.get("cycles", 0) * 20
        total_score += deps.get("unused_includes", 0) * 2
    
    if "duplication" in report["analysis"]:
        dup = report["analysis"]["duplication"]
        total_score += dup.get("duplication_score", 0) * 3
    
    report["total_tech_debt_score"] = total_score
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if total_score < 75:
        report["status"] = "üü¢ Low"
    elif total_score < 150:
        report["status"] = "üü° Medium"
    elif total_score < 300:
        report["status"] = "üü† High"
    else:
        report["status"] = "üî¥ Critical"
    
    return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ JXCT...")
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("test_reports", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = generate_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    report_file = "test_reports/technical-debt-ci.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {report_file}")
    print(f"üìà –û–±—â–∏–π score —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞: {report['total_tech_debt_score']}")
    print(f"üìä –°—Ç–∞—Ç—É—Å: {report['status']}")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    if "clang_tidy" in report["analysis"]:
        clang = report["analysis"]["clang_tidy"]
        if isinstance(clang, dict):
            print(f"üîç Clang-tidy: {clang.get('high', 0)} high, {clang.get('medium', 0)} medium, {clang.get('low', 0)} low")
    
    if "include_deps" in report["analysis"]:
        deps = report["analysis"]["include_deps"]
        print(f"üì¶ Include deps: {deps.get('cycles', 0)} cycles, {deps.get('unused_includes', 0)} unused")
    
    if "duplication" in report["analysis"]:
        dup = report["analysis"]["duplication"]
        print(f"üîÑ Duplication: {dup.get('duplication_score', 0)} duplicates found")
    
    # –í CI —Ä–µ–∂–∏–º–µ –Ω–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ (—ç—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    ci_mode = os.environ.get('CI') == 'true' or os.environ.get('GITHUB_ACTIONS') == 'true'
    
    if report["total_tech_debt_score"] >= 500 and not ci_mode:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞!")
        sys.exit(1)
    elif report["total_tech_debt_score"] >= 200:
        if ci_mode:
            print("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ (CI: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)")
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞!")
            sys.exit(1)
    elif report["total_tech_debt_score"] >= 100:
        print("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞")
    else:
        print("‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –ø—Ä–∏–µ–º–ª–µ–º—ã–π")
    
    # –í CI –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (—É—Å–ø–µ—Ö) –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if ci_mode:
        print("üîÑ CI —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
    sys.exit(0)

if __name__ == "__main__":
    main() 