#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ JXCT
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: EYERA Development Team
–î–∞—Ç–∞: 2025-01-22

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import os
import sys
import json
import subprocess
import argparse
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
import tempfile
import re


@dataclass
class TechnicalDebtMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞"""
    code_smells: int = 0
    duplicated_lines: int = 0
    complexity_issues: int = 0
    security_hotspots: int = 0
    maintainability_rating: str = "A"
    reliability_rating: str = "A"
    security_rating: str = "A"
    coverage: float = 0.0
    debt_ratio: float = 0.0
    total_lines: int = 0
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    high_complexity_functions: List[str] = None
    duplicate_blocks: List[Dict] = None
    security_issues: List[Dict] = None
    
    def __post_init__(self):
        if self.high_complexity_functions is None:
            self.high_complexity_functions = []
        if self.duplicate_blocks is None:
            self.duplicate_blocks = []
        if self.security_issues is None:
            self.security_issues = []


class TechnicalDebtAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dirs = [
            project_root / "src",
            project_root / "include",
            project_root / "test"
        ]
        self.metrics = TechnicalDebtMetrics()
        
    def analyze(self) -> TechnicalDebtMetrics:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ JXCT...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        self._analyze_code_complexity()
        self._analyze_duplicates()
        self._analyze_security()
        self._analyze_code_smells()
        self._calculate_ratings()
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {self._total_issues()}")
        return self.metrics
    
    def _analyze_code_complexity(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        print("  üìä –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞...")
        
        complexity_issues = 0
        high_complexity_functions = []
        
        for src_dir in self.src_dirs:
            if not src_dir.exists():
                continue
                
            for file_path in src_dir.rglob("*.cpp"):
                issues, functions = self._analyze_file_complexity(file_path)
                complexity_issues += issues
                high_complexity_functions.extend(functions)
        
        self.metrics.complexity_issues = complexity_issues
        self.metrics.high_complexity_functions = high_complexity_functions
        
    def _analyze_file_complexity(self, file_path: Path) -> Tuple[int, List[str]]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except:
            return 0, []
        
        issues = 0
        high_complexity_functions = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
        function_pattern = r'(\w+\s+\w+\s*\([^)]*\)\s*\{[^}]*\})'
        functions = re.findall(function_pattern, content, re.DOTALL)
        
        for func in functions:
            complexity = self._calculate_cyclomatic_complexity(func)
            if complexity > 10:  # –ü–æ—Ä–æ–≥ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                issues += 1
                func_name = self._extract_function_name(func)
                high_complexity_functions.append(f"{file_path.name}::{func_name} (CC={complexity})")
        
        return issues, high_complexity_functions
    
    def _calculate_cyclomatic_complexity(self, function_code: str) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç: –±–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π
        complexity = 1
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        decision_keywords = ['if', 'else', 'while', 'for', 'switch', 'case', 'catch', '&&', '||', '?']
        
        for keyword in decision_keywords:
            if keyword in ['&&', '||', '?']:
                complexity += function_code.count(keyword)
            else:
                complexity += len(re.findall(r'\b' + keyword + r'\b', function_code))
        
        return complexity
    
    def _extract_function_name(self, function_code: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        match = re.search(r'(\w+)\s*\(', function_code)
        return match.group(1) if match else "unknown"
    
    def _analyze_duplicates(self):
        """–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        print("  üìã –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicate_lines = 0
        duplicate_blocks = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
        all_lines = {}
        
        for src_dir in self.src_dirs:
            if not src_dir.exists():
                continue
                
            for file_path in src_dir.rglob("*.cpp"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    for i, line in enumerate(lines):
                        clean_line = line.strip()
                        if len(clean_line) > 10 and not clean_line.startswith('//'):
                            if clean_line in all_lines:
                                all_lines[clean_line].append((file_path, i + 1))
                            else:
                                all_lines[clean_line] = [(file_path, i + 1)]
                except:
                    continue
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for line, occurrences in all_lines.items():
            if len(occurrences) > 1:
                duplicate_lines += len(occurrences) - 1
                duplicate_blocks.append({
                    "code": line[:100] + "..." if len(line) > 100 else line,
                    "occurrences": len(occurrences),
                    "files": [str(f[0].name) for f in occurrences]
                })
        
        self.metrics.duplicated_lines = duplicate_lines
        self.metrics.duplicate_blocks = duplicate_blocks[:10]  # –¢–æ–ø 10
        
    def _analyze_security(self):
        """–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("  üîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        security_hotspots = 0
        security_issues = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        security_patterns = {
            r'strcpy\s*\(': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ strcpy",
            r'strcat\s*\(': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ strcat",
            r'sprintf\s*\(': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ sprintf",
            r'gets\s*\(': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ gets",
            r'system\s*\(': "–í—ã–∑–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
            r'eval\s*\(': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval",
            r'exec\s*\(': "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥",
            r'password\s*=\s*["\'][^"\']+["\']': "–•–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª—è",
            r'key\s*=\s*["\'][^"\']+["\']': "–•–∞—Ä–¥–∫–æ–¥ –∫–ª—é—á–∞",
        }
        
        for src_dir in self.src_dirs:
            if not src_dir.exists():
                continue
                
            for file_path in src_dir.rglob("*.cpp"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    for pattern, description in security_patterns.items():
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        if matches:
                            security_hotspots += len(matches)
                            security_issues.append({
                                "file": str(file_path.name),
                                "issue": description,
                                "count": len(matches)
                            })
                except:
                    continue
        
        self.metrics.security_hotspots = security_hotspots
        self.metrics.security_issues = security_issues
        
    def _analyze_code_smells(self):
        """–ê–Ω–∞–ª–∏–∑ code smells"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ code smells...")
        
        code_smells = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ code smells
        for src_dir in self.src_dirs:
            if not src_dir.exists():
                continue
                
            for file_path in src_dir.rglob("*.cpp"):
                code_smells += self._analyze_file_smells(file_path)
        
        self.metrics.code_smells = code_smells
        
    def _analyze_file_smells(self, file_path: Path) -> int:
        """–ê–Ω–∞–ª–∏–∑ code smells –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.splitlines()
        except:
            return 0
        
        smells = 0
        
        # –î–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (>50 —Å—Ç—Ä–æ–∫)
        function_starts = []
        brace_count = 0
        in_function = False
        
        for i, line in enumerate(lines):
            if '{' in line and not line.strip().startswith('//'):
                if not in_function:
                    function_starts.append(i)
                    in_function = True
                brace_count += line.count('{')
            
            if '}' in line and not line.strip().startswith('//'):
                brace_count -= line.count('}')
                if brace_count == 0 and in_function:
                    function_length = i - function_starts[-1]
                    if function_length > 50:
                        smells += 1
                    in_function = False
        
        # –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (>120 —Å–∏–º–≤–æ–ª–æ–≤)
        for line in lines:
            if len(line) > 120:
                smells += 1
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–∏
        function_pattern = r'\w+\s+\w+\s*\(([^)]+)\)'
        functions = re.findall(function_pattern, content)
        for params in functions:
            param_count = len([p.strip() for p in params.split(',') if p.strip()])
            if param_count > 5:
                smells += 1
        
        # TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        todo_count = len(re.findall(r'//\s*TODO', content, re.IGNORECASE))
        smells += todo_count
        
        return smells
    
    def _calculate_ratings(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        total_issues = self._total_issues()
        total_lines = self._count_total_lines()
        
        self.metrics.total_lines = total_lines
        
        if total_lines > 0:
            self.metrics.debt_ratio = (total_issues / total_lines) * 100
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º
            if self.metrics.debt_ratio <= 0.1:
                self.metrics.maintainability_rating = "A"
            elif self.metrics.debt_ratio <= 0.5:
                self.metrics.maintainability_rating = "B"
            elif self.metrics.debt_ratio <= 1.0:
                self.metrics.maintainability_rating = "C"
            elif self.metrics.debt_ratio <= 2.0:
                self.metrics.maintainability_rating = "D"
            else:
                self.metrics.maintainability_rating = "E"
        
        # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        if self.metrics.complexity_issues == 0:
            self.metrics.reliability_rating = "A"
        elif self.metrics.complexity_issues <= 3:
            self.metrics.reliability_rating = "B"
        elif self.metrics.complexity_issues <= 10:
            self.metrics.reliability_rating = "C"
        else:
            self.metrics.reliability_rating = "D"
        
        # –†–µ–π—Ç–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if self.metrics.security_hotspots == 0:
            self.metrics.security_rating = "A"
        elif self.metrics.security_hotspots <= 2:
            self.metrics.security_rating = "B"
        elif self.metrics.security_hotspots <= 5:
            self.metrics.security_rating = "C"
        else:
            self.metrics.security_rating = "D"
    
    def _total_issues(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º"""
        return (self.metrics.code_smells + 
                self.metrics.complexity_issues + 
                self.metrics.security_hotspots)
    
    def _count_total_lines(self) -> int:
        """–ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞"""
        total_lines = 0
        
        for src_dir in self.src_dirs:
            if not src_dir.exists():
                continue
                
            for file_path in src_dir.rglob("*.cpp"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        total_lines += len(f.readlines())
                except:
                    continue
                    
            for file_path in src_dir.rglob("*.h"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        total_lines += len(f.readlines())
                except:
                    continue
        
        return total_lines
    
    def generate_report(self, output_file: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –¥–æ–ª–≥–µ"""
        report = {
            "timestamp": "2025-01-22T12:00:00Z",
            "project": "JXCT Soil Sensor",
            "version": "3.6.0",
            "metrics": asdict(self.metrics),
            "summary": {
                "total_issues": self._total_issues(),
                "debt_ratio": f"{self.metrics.debt_ratio:.2f}%",
                "maintainability": self.metrics.maintainability_rating,
                "reliability": self.metrics.reliability_rating,
                "security": self.metrics.security_rating
            },
            "recommendations": self._generate_recommendations()
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []
        
        if self.metrics.code_smells > 20:
            recommendations.append("–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ code smells - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
        
        if self.metrics.duplicated_lines > 100:
            recommendations.append("–ú–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ - –≤—ã–¥–µ–ª–∏—Ç—å –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        if self.metrics.complexity_issues > 5:
            recommendations.append("–ï—Å—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É –∏ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏")
        
        if self.metrics.security_hotspots > 0:
            recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        if self.metrics.debt_ratio > 2.0:
            recommendations.append("–í—ã—Å–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
        
        if not recommendations:
            recommendations.append("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ")
        
        return recommendations


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ JXCT")
    parser.add_argument("--project-root", type=Path, default=Path.cwd(),
                       help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--output", type=Path, default=Path("test_reports/technical-debt.json"),
                       help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
    parser.add_argument("--verbose", "-v", action="store_true",
                       help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    args.output.parent.mkdir(parents=True, exist_ok=True)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    analyzer = TechnicalDebtAnalyzer(args.project_root)
    metrics = analyzer.analyze()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    analyzer.generate_report(args.output)
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    print("\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
    print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {metrics.total_lines}")
    print(f"  Code smells: {metrics.code_smells}")
    print(f"  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {metrics.duplicated_lines}")
    print(f"  –ü—Ä–æ–±–ª–µ–º—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {metrics.complexity_issues}")
    print(f"  –£—è–∑–≤–∏–º–æ—Å—Ç–∏: {metrics.security_hotspots}")
    print(f"  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: {metrics.debt_ratio:.2f}%")
    print(f"  –†–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏: {metrics.maintainability_rating}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
    if metrics.debt_ratio > 5.0 or metrics.security_hotspots > 5:
        return 1  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    elif metrics.debt_ratio > 2.0:
        return 2  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    else:
        return 0  # –í—Å—ë —Ö–æ—Ä–æ—à–æ


if __name__ == "__main__":
    sys.exit(main()) 