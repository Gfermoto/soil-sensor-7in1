#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ JXCT
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Python, native –∏ ESP32 —Ç–µ—Å—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import os
import json
from datetime import datetime

class TestRunner:
    def __init__(self):
        self.results = {
            'python': {'status': 'not_run', 'output': '', 'error': ''},
            'native': {'status': 'not_run', 'output': '', 'error': ''},
            'esp32': {'status': 'not_run', 'output': '', 'error': ''},
            'e2e': {'status': 'not_run', 'output': '', 'error': ''},
            'timestamp': datetime.now().isoformat()
        }

    def run_command(self, command, test_type):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        print(f"\nüîç –ó–∞–ø—É—Å–∫ {test_type} —Ç–µ—Å—Ç–æ–≤...")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")

        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )

            if result.returncode == 0:
                self.results[test_type]['status'] = 'passed'
                self.results[test_type]['output'] = result.stdout
                print(f"‚úÖ {test_type} —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.results[test_type]['status'] = 'failed'
                self.results[test_type]['output'] = result.stdout
                self.results[test_type]['error'] = result.stderr
                print(f"‚ùå {test_type} —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")

        except subprocess.TimeoutExpired:
            self.results[test_type]['status'] = 'timeout'
            self.results[test_type]['error'] = '–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)'
            print(f"‚è∞ {test_type} —Ç–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        except Exception as e:
            self.results[test_type]['status'] = 'error'
            self.results[test_type]['error'] = str(e)
            print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {test_type} —Ç–µ—Å—Ç–æ–≤: {e}")

    def run_python_tests(self):
        """–ó–∞–ø—É—Å–∫ Python —Ç–µ—Å—Ç–æ–≤"""
        command = [sys.executable, '-m', 'pytest', 'test/', '-v']
        self.run_command(command, 'python')

    def run_native_tests(self):
        """–ó–∞–ø—É—Å–∫ native C++ —Ç–µ—Å—Ç–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è native —Ç–µ—Å—Ç–æ–≤
        if os.name == 'nt':  # Windows
            command = ['pio', 'test', '-e', 'native-windows']
        else:  # Linux/Mac
            command = ['pio', 'test', '-e', 'native']
        self.run_command(command, 'native')

    def run_esp32_tests(self):
        """–ó–∞–ø—É—Å–∫ ESP32 —Ç–µ—Å—Ç–æ–≤"""
        command = ['pio', 'test', '-e', 'esp32dev-test', '--without-uploading']
        self.run_command(command, 'esp32')

    def run_e2e_tests(self):
        """–ó–∞–ø—É—Å–∫ end-to-end —Ç–µ—Å—Ç–æ–≤"""
        command = [sys.executable, '-m', 'pytest', 'test/e2e/', '-v']
        self.run_command(command, 'e2e')

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò JXCT")
        print("="*60)

        total_tests = len(self.results) - 2  # –ò—Å–∫–ª—é—á–∞–µ–º timestamp –∏ e2e
        passed_tests = sum(1 for k, v in self.results.items()
                          if k not in ['timestamp', 'e2e'] and v['status'] == 'passed')

        for test_type, result in self.results.items():
            if test_type == 'timestamp':
                continue

            status_emoji = {
                'passed': '‚úÖ',
                'failed': '‚ùå',
                'timeout': '‚è∞',
                'error': 'üí•',
                'not_run': '‚è∏Ô∏è'
            }.get(result['status'], '‚ùì')

            print(f"{status_emoji} {test_type.upper()}: {result['status']}")

            if result['error']:
                print(f"   –û—à–∏–±–∫–∞: {result['error']}")

        print(f"\nüìà –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report_file = f"test_reports/comprehensive-test-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
        os.makedirs('test_reports', exist_ok=True)

        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        return passed_tests == total_tests

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø JXCT")
        print("="*60)

        # 1. Python —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ, –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ª–æ–≥–∏–∫—É)
        self.run_python_tests()

        # 2. Native —Ç–µ—Å—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è—é—Ç C++ –∫–æ–¥ –Ω–∞ —Ö–æ—Å—Ç–µ)
        self.run_native_tests()

        # 3. ESP32 —Ç–µ—Å—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è—é—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ)
        self.run_esp32_tests()

        # 4. E2E —Ç–µ—Å—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
        self.run_e2e_tests()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        success = self.generate_report()

        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            return 0
        else:
            print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
            return 1

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = TestRunner()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
