#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è JXCT
–ó–∞–ø—É—Å–∫–∞–µ—Ç –í–°–ï —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import subprocess
import time
import signal
from pathlib import Path
from datetime import datetime
import threading

class TestRunner:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.results = {
            "total": 0,
            "passed": 0,
            "failed": 0,
            "timeout": 0,
            "errors": 0
        }
        self.start_time = time.time()

    def print_header(self):
        print("=" * 80)
        print("üß™ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –†–ê–ù–ù–ï–† JXCT")
        print("=" * 80)
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.project_root}")
        print("=" * 80)

    def run_test_with_timeout(self, test_name, command, timeout=30, description=""):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        print(f"\nüîç [{test_name}] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...")
        if description:
            print(f"   üìù {description}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding='utf-8',
                errors='ignore',
                cwd=self.project_root
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                stdout, stderr = process.communicate(timeout=timeout)
                return_code = process.returncode
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if return_code == 0:
                    print(f"   ‚úÖ [{test_name}] –£–°–ü–ï–®–ù–û (–∫–æ–¥: {return_code})")
                    if stdout.strip():
                        print(f"   üì§ –í—ã–≤–æ–¥:\n{stdout}")
                    self.results["passed"] += 1
                    return True
                else:
                    print(f"   ‚ùå [{test_name}] –ü–†–û–í–ê–õ–ï–ù (–∫–æ–¥: {return_code})")
                    if stdout.strip():
                        print(f"   üì§ stdout:\n{stdout}")
                    if stderr.strip():
                        print(f"   üì§ stderr:\n{stderr}")
                    self.results["failed"] += 1
                    return False
                    
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ [{test_name}] –¢–ê–ô–ú–ê–£–¢ ({timeout}—Å)")
                process.kill()
                process.wait()
                self.results["timeout"] += 1
                return False
                
        except Exception as e:
            print(f"   üí• [{test_name}] –û–®–ò–ë–ö–ê: {e}")
            self.results["errors"] += 1
            return False
        finally:
            self.results["total"] += 1

    def run_python_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ Python —Ç–µ—Å—Ç—ã"""
        print("\nüêç PYTHON –¢–ï–°–¢–´")
        print("-" * 40)
        
        python_tests = [
            ("test_format.py", [sys.executable, "test/test_format.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
            ("test_validation.py", [sys.executable, "test/test_validation.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
            ("test_critical_functions.py", [sys.executable, "test/test_critical_functions.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"),
            ("test_modbus_mqtt.py", [sys.executable, "test/test_modbus_mqtt.py"], 60, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ModBus –∏ MQTT"),
            ("test_system_functions.py", [sys.executable, "test/test_system_functions.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"),
            ("test_routes.py", [sys.executable, "test/test_routes.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤"),
            ("test_fake_sensor_values.py", [sys.executable, "test/test_fake_sensor_values.py"], 30, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤"),
            ("test_compensation_formulas.py", [sys.executable, "test/test_compensation_formulas.py"], 60, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"),
            ("test_scientific_recommendations.py", [sys.executable, "test/test_scientific_recommendations.py"], 120, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"),
        ]
        
        for test_name, command, timeout, description in python_tests:
            self.run_test_with_timeout(test_name, command, timeout, description)

    def run_e2e_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç E2E —Ç–µ—Å—Ç—ã"""
        print("\nüåê E2E –¢–ï–°–¢–´")
        print("-" * 40)
        
        e2e_tests = [
            ("test_web_ui.py", [sys.executable, "test/e2e/test_web_ui.py"], 60, "E2E —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
        ]
        
        for test_name, command, timeout, description in e2e_tests:
            self.run_test_with_timeout(test_name, command, timeout, description)

    def run_integration_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("\nüîó –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        integration_dir = self.project_root / "test" / "integration"
        if integration_dir.exists():
            for test_file in integration_dir.glob("*.cpp"):
                test_name = test_file.name
                print(f"   üìã [{test_name}] C++ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
                
                # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º C++ —Ç–µ—Å—Ç
                try:
                    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é w64devkit
                    compile_cmd = [
                        "C:\\Program Files\\w64devkit\\bin\\g++.exe",
                        "-std=c++17",
                        "-I", str(self.project_root / "include"),
                        "-I", str(self.project_root / "src"),
                        "-I", str(self.project_root / "test" / "stubs"),
                        "-I", str(self.project_root / "test" / "stubs" / "Unity" / "src"),
                        str(test_file),
                        str(self.project_root / "test" / "stubs" / "Unity" / "src" / "unity.c"),
                        "-o", str(test_file.with_suffix(".exe"))
                    ]
                    
                    print(f"   üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è {test_name}...")
                    result = subprocess.run(
                        compile_cmd,
                        cwd=self.project_root,
                        capture_output=True,
                        text=True,
                        timeout=60
                    )
                    
                    if result.returncode == 0:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
                        exe_path = test_file.with_suffix(".exe")
                        print(f"   üöÄ –ó–∞–ø—É—Å–∫ {test_name}...")
                        
                        test_result = subprocess.run(
                            [str(exe_path)],
                            cwd=self.project_root,
                            capture_output=True,
                            text=True,
                            timeout=30
                        )
                        
                        if test_result.returncode == 0:
                            print(f"   ‚úÖ [{test_name}] –£–°–ü–ï–®–ù–û")
                            if test_result.stdout.strip():
                                print(f"   üì§ –í—ã–≤–æ–¥:\n{test_result.stdout}")
                            self.results["passed"] += 1
                        else:
                            print(f"   ‚ùå [{test_name}] –ü–†–û–í–ê–õ–ï–ù (–∫–æ–¥: {test_result.returncode})")
                            if test_result.stdout.strip():
                                print(f"   üì§ stdout:\n{test_result.stdout}")
                            if test_result.stderr.strip():
                                print(f"   üì§ stderr:\n{test_result.stderr}")
                            self.results["failed"] += 1
                    else:
                        print(f"   ‚ùå [{test_name}] –û–®–ò–ë–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò")
                        if result.stderr.strip():
                            print(f"   üì§ stderr:\n{result.stderr}")
                        self.results["failed"] += 1
                        
                except subprocess.TimeoutExpired:
                    print(f"   ‚è∞ [{test_name}] –¢–ê–ô–ú–ê–£–¢")
                    self.results["timeout"] += 1
                except Exception as e:
                    print(f"   üí• [{test_name}] –û–®–ò–ë–ö–ê: {e}")
                    self.results["errors"] += 1
                finally:
                    self.results["total"] += 1
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π exe —Ñ–∞–π–ª
                    try:
                        exe_path = test_file.with_suffix(".exe")
                        if exe_path.exists():
                            exe_path.unlink()
                    except:
                        pass

    def run_performance_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 40)
        
        perf_tests = [
            ("test_performance.py", [sys.executable, "test/performance/test_performance.py"], 120, "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ]
        
        for test_name, command, timeout, description in perf_tests:
            self.run_test_with_timeout(test_name, command, timeout, description)

    def run_esp32_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã ESP32"""
        print("\nüîß ESP32 –¢–ï–°–¢–´")
        print("-" * 40)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É ESP32
            print("   üî® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32...")
            result = subprocess.run(
                ["pio", "run", "-e", "esp32dev"],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=180
            )
            
            if result.returncode == 0:
                print("   ‚úÖ –°–±–æ—Ä–∫–∞ ESP32 —É—Å–ø–µ—à–Ω–∞")
                self.results["passed"] += 1
            else:
                print("   ‚ùå –°–±–æ—Ä–∫–∞ ESP32 –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                print(f"   üì§ stderr:\n{result.stderr}")
                self.results["failed"] += 1
                
        except subprocess.TimeoutExpired:
            print("   ‚è∞ –°–±–æ—Ä–∫–∞ ESP32 –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç")
            self.results["timeout"] += 1
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32: {e}")
            self.results["errors"] += 1
        finally:
            self.results["total"] += 1

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        duration = time.time() - self.start_time
        
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.results['total']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.results['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['failed']}")
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç: {self.results['timeout']}")
        print(f"üí• –û—à–∏–±–∫–∏: {self.results['errors']}")
        
        if self.results['total'] > 0:
            success_rate = (self.results['passed'] / self.results['total']) * 100
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            if success_rate >= 90:
                print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            elif success_rate >= 80:
                print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            elif success_rate >= 70:
                print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
            else:
                print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å")
        else:
            print("üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: N/A (–Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤)")
        
        print("=" * 80)

    def run_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        self.print_header()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
        self.run_python_tests()
        self.run_e2e_tests()
        self.run_integration_tests()
        self.run_performance_tests()
        self.run_esp32_tests()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
        self.print_summary()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if self.results['failed'] > 0 or self.results['errors'] > 0:
            return 1
        return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = TestRunner()
    return runner.run_all()

if __name__ == "__main__":
    sys.exit(main())
