#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JXCT Simple Test Runner v1.4.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
import sys
import os
import subprocess
import platform
from pathlib import Path
from datetime import datetime

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print(f"[INFO] {message}")

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞"""
    print(f"[SUCCESS] ‚úÖ {message}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    print(f"[ERROR] ‚ùå {message}")

def log_warning(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print(f"[WARNING] ‚ö†Ô∏è {message}")

def run_python_tests():
    """–ó–∞–ø—É—Å–∫ Python —Ç–µ—Å—Ç–æ–≤"""
    log_info("–ó–∞–ø—É—Å–∫ Python —Ç–µ—Å—Ç–æ–≤...")

    test_files = [
        "test/test_format.py",
        "test/test_validation.py"
    ]

    results = {}
    total_tests = 0
    passed_tests = 0

    for test_file in test_files:
        if Path(test_file).exists():
            try:
                log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {test_file}...")
                result = subprocess.run([
                    sys.executable, str(test_file)
                ], capture_output=True, text=True, timeout=30, encoding='utf-8', errors='ignore')

                success = result.returncode == 0

                if success:
                    log_success(f"{test_file}: PASS")
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞
                    output = result.stdout or ""
                    test_count = output.count("PASS") + output.count("OK")
                    if test_count == 0:
                        test_count = 1  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ç–µ—Å—Ç
                    passed_tests += test_count
                    total_tests += test_count
                else:
                    log_error(f"{test_file}: FAIL")
                    if result.stderr:
                        log_error(f"–û—à–∏–±–∫–∞: {result.stderr}")
                    total_tests += 1

                results[test_file] = {
                    "status": "PASS" if success else "FAIL",
                    "output": result.stdout or "",
                    "error": result.stderr if not success else None,
                    "test_count": test_count if success else 1
                }

            except subprocess.TimeoutExpired:
                log_error(f"{test_file}: TIMEOUT")
                results[test_file] = {"status": "TIMEOUT", "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"}
                total_tests += 1
            except Exception as e:
                log_error(f"{test_file}: ERROR - {e}")
                results[test_file] = {"status": "ERROR", "error": str(e)}
                total_tests += 1
        else:
            log_warning(f"{test_file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return results, total_tests, passed_tests

def check_esp32_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ESP32"""
    log_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ESP32...")

    try:
        result = subprocess.run([
            "pio", "device", "list"
        ], capture_output=True, text=True, timeout=10, encoding='utf-8', errors='ignore')

        if result.returncode == 0:
            # –ò—â–µ–º ESP32 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            output = result.stdout or ""
            if "Silicon Labs CP210x" in output or "USB" in output:
                for line in output.split('\n'):
                    if "COM" in line and ("Silicon Labs" in line or "USB" in line):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
                        parts = line.split()
                        for part in parts:
                            if part.startswith("COM"):
                                port = part
                                log_success(f"ESP32 –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                                return port

        log_warning("ESP32 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return None

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ESP32: {e}")
        return None

def run_esp32_build():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32"""
    log_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32...")

    try:
        result = subprocess.run([
            "pio", "run", "-e", "esp32dev"
        ], capture_output=True, text=True, timeout=120, encoding='utf-8', errors='ignore')

        if result.returncode == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏
            firmware_path = Path(".pio/build/esp32dev/firmware.bin")
            if firmware_path.exists():
                size = firmware_path.stat().st_size
                log_success(f"–°–±–æ—Ä–∫–∞ ESP32 —É—Å–ø–µ—à–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç)")
                return {"status": "PASS", "firmware_size": size}
            else:
                log_error("–°–±–æ—Ä–∫–∞ ESP32: firmware.bin –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"status": "FAIL", "error": "firmware.bin –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        else:
            log_error("–°–±–æ—Ä–∫–∞ ESP32 –Ω–µ —É–¥–∞–ª–∞—Å—å")
            if result.stderr:
                log_error(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return {"status": "FAIL", "error": result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32: {e}")
        return {"status": "ERROR", "error": str(e)}

def run_esp32_tests(port=None):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ESP32"""
    if not port:
        port = check_esp32_connection()
        if not port:
            return {"status": "SKIPPED", "reason": "ESP32 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if not port or not port.startswith("COM"):
        log_warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç ESP32, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã")
        return {"status": "SKIPPED", "reason": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç ESP32"}

    log_info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ESP32 –Ω–∞ –ø–æ—Ä—Ç—É {port}...")

    try:
        result = subprocess.run([
            "pio", "test", "-e", "esp32dev", "--upload-port", port, "--test-port", port
        ], capture_output=True, text=True, timeout=120, encoding='utf-8', errors='ignore')

        if result.returncode == 0:
            log_success("–¢–µ—Å—Ç—ã ESP32 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return {"status": "PASS", "output": result.stdout or ""}
        else:
            log_error("–¢–µ—Å—Ç—ã ESP32 –Ω–µ –ø—Ä–æ—à–ª–∏")
            if result.stderr:
                log_error(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return {"status": "FAIL", "error": result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ ESP32: {e}")
        return {"status": "ERROR", "error": str(e)}

def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    log_info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = Path("test_reports")
    reports_dir.mkdir(exist_ok=True)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "version": "3.7.0",
        "platform": platform.system(),
        "test_results": results,
        "summary": {
            "total_categories": len(results),
            "passed_categories": sum(1 for r in results.values() if r.get("status") == "PASS"),
            "overall_status": "PASS" if all(r.get("status") == "PASS" for r in results.values() if r.get("status") != "SKIPPED") else "FAIL"
        }
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
    json_path = reports_dir / "simple-test-report.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)

    log_success(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_path}")
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log_info("üß™ JXCT Simple Test Runner v1.4.1 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    log_info("=" * 60)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    os.chdir(project_root)

    results = {}

    # 1. Python —Ç–µ—Å—Ç—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
    python_results, total_tests, passed_tests = run_python_tests()
    results["python_tests"] = {
        "status": "PASS" if passed_tests == total_tests else "FAIL",
        "total_tests": total_tests,
        "passed_tests": passed_tests,
        "details": python_results
    }

    # 2. –°–±–æ—Ä–∫–∞ ESP32
    build_result = run_esp32_build()
    results["esp32_build"] = build_result

    # 3. ESP32 —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    esp32_result = run_esp32_tests()
    results["esp32_tests"] = esp32_result

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_report(results)

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    log_info("=" * 60)
    log_info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

    for category, result in results.items():
        status = result.get("status", "UNKNOWN")
        if status == "PASS":
            log_success(f"{category}: {status}")
        elif status == "SKIPPED":
            log_warning(f"{category}: {status} - {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
        else:
            log_error(f"{category}: {status}")

    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    overall_status = report["summary"]["overall_status"]
    if overall_status == "PASS":
        log_success("üéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        log_error("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        return 1

if __name__ == "__main__":
    sys.exit(main())
