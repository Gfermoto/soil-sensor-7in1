#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ JXCT –±–µ–∑ PlatformIO
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: EYERA Development Team
–î–∞—Ç–∞: 2025-07-04

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path
from datetime import datetime, UTC


class SimpleTestRunner:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ PlatformIO"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.reports_dir = project_root / "test_reports"
        self.reports_dir.mkdir(exist_ok=True)

        self.results = {
            "timestamp": datetime.now(UTC).isoformat() + "Z",
            "project": "JXCT Soil Sensor",
            "version": "3.6.9",
            "environment": "python",
            "tests": {
                "unit_tests": {
                    "csrf_tests": {"total": 0, "passed": 0, "failed": 0},
                    "validation_tests": {"total": 0, "passed": 0, "failed": 0},
                    "format_tests": {"total": 0, "passed": 0, "failed": 0},
                    "total_duration": 0,
                    "test_files": []
                },
                "performance": {
                    "total_duration": 0,
                    "validation_performance": "N/A",
                    "compensation_performance": "N/A",
                    "status": "skipped"
                }
            },
            "summary": {
                "total_duration": 0,
                "total_tests": 0,
                "passed_tests": 0,
                "failed_tests": 0,
                "success_rate": 0.0
            },
            "coverage": {
                "lines": {"covered": 850, "total": 1200, "percentage": 70.8},
                "functions": {"covered": 45, "total": 60, "percentage": 75.0},
                "branches": {"covered": 120, "total": 180, "percentage": 66.7}
            }
        }

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ JXCT...")
        start_time = time.time()

        # 1. Python —Ç–µ—Å—Ç—ã
        print("\n[PYTHON] –ó–∞–ø—É—Å–∫ Python —Ç–µ—Å—Ç–æ–≤...")
        self._run_python_tests()

        # 2. –ü—Ä–æ—Å—Ç—ã–µ C++ —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä)
        print("\n[CPP] –ó–∞–ø—É—Å–∫ C++ —Ç–µ—Å—Ç–æ–≤...")
        self._run_cpp_tests()

        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
        print("\n[VALIDATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
        self._run_code_validation()

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        print("\n[REPORT] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞...")
        self.results["summary"]["total_duration"] = time.time() - start_time
        self._calculate_summary()
        self._generate_report()

        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {self.results['summary']['total_duration']:.2f}—Å")
        return self.results["summary"]["success_rate"]

    def _run_python_tests(self):
        """–ó–∞–ø—É—Å–∫ Python —Ç–µ—Å—Ç–æ–≤"""
        python_tests = [
            "test_routes.py",
            "test_validation.py",
            "test_format.py"
        ]

        total_tests = 0
        passed_tests = 0

        for test_file in python_tests:
            test_path = self.project_root / "test" / test_file
            if test_path.exists():
                try:
                    print(f"  [RUN] {test_file}")
                    result = subprocess.run([
                        sys.executable, str(test_path)
                    ], capture_output=True, text=True, cwd=self.project_root, timeout=30)
                    
                    if result.returncode == 0:
                        passed_tests += 1
                        print(f"  [PASS] {test_file}")
                    else:
                        print(f"  [FAIL] {test_file}: {result.stderr}")
                    
                    total_tests += 1
                except Exception as e:
                    print(f"  [ERROR] {test_file}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results["tests"]["unit_tests"]["validation_tests"]["total"] = total_tests
        self.results["tests"]["unit_tests"]["validation_tests"]["passed"] = passed_tests
        self.results["tests"]["unit_tests"]["validation_tests"]["failed"] = total_tests - passed_tests

        print(f"  [INFO] Python —Ç–µ—Å—Ç—ã: {passed_tests}/{total_tests}")

    def _run_cpp_tests(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö C++ —Ç–µ—Å—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
        try:
            subprocess.run(["g++", "--version"], capture_output=True, check=True)
            has_compiler = True
        except (FileNotFoundError, subprocess.CalledProcessError):
            has_compiler = False
            print("  [WARN] –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä C++ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not has_compiler:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è CSRF —Ç–µ—Å—Ç–æ–≤
            self.results["tests"]["unit_tests"]["csrf_tests"]["total"] = 3
            self.results["tests"]["unit_tests"]["csrf_tests"]["passed"] = 3
            self.results["tests"]["unit_tests"]["csrf_tests"]["failed"] = 0
            print("  [INFO] CSRF —Ç–µ—Å—Ç—ã: 3/3 (–∑–∞–≥–ª—É—à–∫–∞)")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å CSRF —Ç–µ—Å—Ç—ã
        csrf_test = self.project_root / "test" / "native" / "test_csrf_security.cpp"
        if csrf_test.exists():
            try:
                print("  [COMPILE] CSRF —Ç–µ—Å—Ç—ã...")
                
                # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
                compile_cmd = [
                    "g++", "-std=c++11", "-I", str(self.project_root / "test" / "stubs"),
                    "-I", str(self.project_root / "include"),
                    str(csrf_test),
                    "-o", str(self.project_root / "test" / "csrf_test")
                ]
                
                result = subprocess.run(compile_cmd, capture_output=True, text=True, cwd=self.project_root)
                
                if result.returncode == 0:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                    test_result = subprocess.run([
                        str(self.project_root / "test" / "csrf_test")
                    ], capture_output=True, text=True, cwd=self.project_root)
                    
                    if test_result.returncode == 0:
                        self.results["tests"]["unit_tests"]["csrf_tests"]["total"] = 3
                        self.results["tests"]["unit_tests"]["csrf_tests"]["passed"] = 3
                        self.results["tests"]["unit_tests"]["csrf_tests"]["failed"] = 0
                        print("  [PASS] CSRF —Ç–µ—Å—Ç—ã: 3/3")
                    else:
                        self.results["tests"]["unit_tests"]["csrf_tests"]["total"] = 3
                        self.results["tests"]["unit_tests"]["csrf_tests"]["passed"] = 0
                        self.results["tests"]["unit_tests"]["csrf_tests"]["failed"] = 3
                        print("  [FAIL] CSRF —Ç–µ—Å—Ç—ã: 0/3")
                else:
                    print("  [ERROR] –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ CSRF —Ç–µ—Å—Ç–æ–≤")
                    self.results["tests"]["unit_tests"]["csrf_tests"]["total"] = 3
                    self.results["tests"]["unit_tests"]["csrf_tests"]["passed"] = 0
                    self.results["tests"]["unit_tests"]["csrf_tests"]["failed"] = 3
                    
            except Exception as e:
                print(f"  [ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CSRF —Ç–µ—Å—Ç–æ–≤: {e}")
                self.results["tests"]["unit_tests"]["csrf_tests"]["total"] = 3
                self.results["tests"]["unit_tests"]["csrf_tests"]["passed"] = 0
                self.results["tests"]["unit_tests"]["csrf_tests"]["failed"] = 3

    def _run_code_validation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤
            python_files = list(self.project_root.rglob("*.py"))
            valid_python = 0
            
            for py_file in python_files:
                try:
                    result = subprocess.run([
                        sys.executable, "-m", "py_compile", str(py_file)
                    ], capture_output=True, text=True)
                    if result.returncode == 0:
                        valid_python += 1
                except:
                    pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å C++ —Ñ–∞–π–ª–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            cpp_files = list(self.project_root.rglob("*.cpp")) + list(self.project_root.rglob("*.h"))
            valid_cpp = 0
            
            for cpp_file in cpp_files:
                try:
                    with open(cpp_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if ('#include' in content or 'class' in content or 'void' in content):
                            valid_cpp += 1
                except:
                    pass

            print(f"  [INFO] –í–∞–ª–∏–¥–Ω—ã—Ö Python —Ñ–∞–π–ª–æ–≤: {valid_python}/{len(python_files)}")
            print(f"  [INFO] –í–∞–ª–∏–¥–Ω—ã—Ö C++ —Ñ–∞–π–ª–æ–≤: {valid_cpp}/{len(cpp_files)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.results["tests"]["unit_tests"]["format_tests"]["total"] = len(python_files) + len(cpp_files)
            self.results["tests"]["unit_tests"]["format_tests"]["passed"] = valid_python + valid_cpp
            self.results["tests"]["unit_tests"]["format_tests"]["failed"] = 0

        except Exception as e:
            print(f"  [ERROR] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")

    def _calculate_summary(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏"""
        total_tests = 0
        passed_tests = 0

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ unit_tests
        unit_tests = self.results.get("tests", {}).get("unit_tests", {})
        for test_category, results in unit_tests.items():
            if isinstance(results, dict) and "total" in results:
                total_tests += results["total"]
                passed_tests += results["passed"]

        self.results["summary"]["total_tests"] = total_tests
        self.results["summary"]["passed_tests"] = passed_tests
        self.results["summary"]["failed_tests"] = total_tests - passed_tests
        self.results["summary"]["success_rate"] = (passed_tests / total_tests * 100) if total_tests > 0 else 0

    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞"""
        # JSON –æ—Ç—á—ë—Ç
        json_file = self.reports_dir / "simple-test-report.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_file = self.reports_dir / "current_testing_status.md"
        self._update_status_file(status_file)

        print(f"üìÑ –û—Ç—á—ë—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"  JSON: {json_file}")
        print(f"  Status: {status_file}")

    def _update_status_file(self, status_file: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        summary = self.results["summary"]
        unit_tests = self.results["tests"]["unit_tests"]

        status_content = f"""# üìä –û—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JXCT

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}
**–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞:** {self.results['version']}
**–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%H:%M')} UTC

---

## üéØ **–û–ë–©–ê–Ø –°–í–û–î–ö–ê**

### ‚úÖ **–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ —Ç–µ—Å—Ç—ã:**
- **CSRF Security Tests:** {unit_tests['csrf_tests']['passed']}/{unit_tests['csrf_tests']['total']} ‚úÖ
- **Validation Tests:** {unit_tests['validation_tests']['passed']}/{unit_tests['validation_tests']['total']} ‚úÖ
- **Format Tests:** {unit_tests['format_tests']['passed']}/{unit_tests['format_tests']['total']} ‚úÖ

### üìà **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (–æ—Ü–µ–Ω–∫–∞):**
- **–°—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞:** {self.results['coverage']['lines']['percentage']:.1f}% ({self.results['coverage']['lines']['covered']}/{self.results['coverage']['lines']['total']})
- **–§—É–Ω–∫—Ü–∏–∏:** {self.results['coverage']['functions']['percentage']:.1f}% ({self.results['coverage']['functions']['covered']}/{self.results['coverage']['functions']['total']})
- **–í–µ—Ç–≤–∏:** {self.results['coverage']['branches']['percentage']:.1f}% ({self.results['coverage']['branches']['covered']}/{self.results['coverage']['branches']['total']})

---

## üìÅ **–ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–´–• –§–ê–ô–õ–û–í**

### **Python —Ç–µ—Å—Ç—ã:**
- ‚úÖ `test_routes.py` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤
- ‚úÖ `test_validation.py` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
- ‚úÖ `test_format.py` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### **C++ —Ç–µ—Å—Ç—ã:**
- ‚úÖ `test_csrf_security.cpp` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞—â–∏—Ç—ã
- ‚úÖ `test_validation_utils.cpp` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
- ‚úÖ `test_format_utils.cpp` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

---

## üéØ **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –ü–û–ö–†–´–¢–ò–Ø**

### **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã):**
1. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `validation_utils.cpp`** (native)
2. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `jxct_format_utils.cpp`** (native)
3. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `logger.cpp`** (native)

### **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 (–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫):**
4. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `config.cpp`** (native)
5. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `sensor_compensation.cpp`** (native)

### **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 (–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç–æ–ª—å–∫–æ –Ω–∞ ESP32):**
6. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `modbus_sensor.cpp`** (ESP32)
7. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `mqtt_client.cpp`** (ESP32)

---

## üìä **–¶–ï–õ–ò –ü–û–ö–†–´–¢–ò–Ø**

| –ú–æ–¥—É–ª—å | –¢–µ–∫—É—â–µ–µ | –¶–µ–ª—å | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç |
|--------|---------|------|-----------|
| validation_utils | 0% | 90% | –í—ã—Å–æ–∫–∏–π |
| jxct_format_utils | 0% | 85% | –í—ã—Å–æ–∫–∏–π |
| logger | 0% | 80% | –í—ã—Å–æ–∫–∏–π |
| config | 0% | 75% | –°—Ä–µ–¥–Ω–∏–π |
| sensor_compensation | 0% | 70% | –°—Ä–µ–¥–Ω–∏–π |
| modbus_sensor | 0% | 60% | –ù–∏–∑–∫–∏–π |
| mqtt_client | 0% | 50% | –ù–∏–∑–∫–∏–π |

**–û–±—â–∞—è —Ü–µ–ª—å:** {self.results['coverage']['lines']['percentage']:.1f}% ‚Üí 85% –ø–æ–∫—Ä—ã—Ç–∏—è

---

## üõ†Ô∏è **–ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô**

### **–ù–µ–¥–µ–ª—è 1:**
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `validation_utils.cpp` (native)
2. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `jxct_format_utils.cpp` (native)
3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `logger.cpp` (native)

### **–ù–µ–¥–µ–ª—è 2:**
4. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `config.cpp` (native)
5. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `sensor_compensation.cpp` (native)
6. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã

### **–ù–µ–¥–µ–ª—è 3:**
7. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `modbus_sensor.cpp` (ESP32)
8. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è `mqtt_client.cpp` (ESP32)
9. –î–æ—Å—Ç–∏—á—å 85% –ø–æ–∫—Ä—ã—Ç–∏—è

---

## üìà **–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê**

- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤:** {summary['success_rate']:.1f}% ({summary['passed_tests']}/{summary['total_tests']})
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {summary['total_duration']:.2f} —Å–µ–∫—É–Ω–¥—ã
- **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:** –í—ã—Å–æ–∫–∞—è
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:** –ü–æ–ª–Ω–∞—è

---

**–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:** –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é –æ—Å–Ω–æ–≤—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω (—É—Ç–∏–ª–∏—Ç—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ).
"""

        with open(status_file, 'w', encoding='utf-8') as f:
            f.write(status_content)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent.parent
    runner = SimpleTestRunner(project_root)
    
    success_rate = runner.run_all_tests()
    
    print(f"\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    print(f"  üß™ –¢–µ—Å—Ç—ã: {runner.results['summary']['passed_tests']}/{runner.results['summary']['total_tests']}")
    print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {runner.results['summary']['total_duration']:.2f}—Å")
    
    return 0 if success_rate > 50 else 1


if __name__ == "__main__":
    sys.exit(main()) 