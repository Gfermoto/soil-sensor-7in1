#!/usr/bin/env python3
"""
üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ JXCT
–ë–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π –∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
"""

import sys
import subprocess
import time
from pathlib import Path

def run_command_safe(command, timeout=60, description=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print(f"[INFO] {description}...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=timeout,
            cwd=Path.cwd()
        )
        
        if result.returncode == 0:
            print(f"[SUCCESS] ‚úÖ {description}: –£–°–ü–ï–®–ù–û")
            return True, result.stdout
        else:
            print(f"[ERROR] ‚ùå {description}: –û–®–ò–ë–ö–ê")
            print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
            return False, result.stderr
            
    except subprocess.TimeoutExpired:
        print(f"[ERROR] ‚ùå {description}: –¢–ê–ô–ú–ê–£–¢ ({timeout}—Å)")
        return False, "Timeout"
    except Exception as e:
        print(f"[ERROR] ‚ùå {description}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        return False, str(e)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ JXCT –£–õ–£–ß–®–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    results = {}
    
    # 1. Python —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä–æ)
    print("\nüìã –≠–¢–ê–ü 1: Python —Ç–µ—Å—Ç—ã")
    success, output = run_command_safe(
        "python -m pytest test/test_validation.py test/test_compensation_formulas.py -q",
        timeout=30,
        description="Python —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"
    )
    results["python_tests"] = success
    
    # 2. –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ (–±—ã—Å—Ç—Ä–æ)
    print("\nüìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏")
    success, output = run_command_safe(
        "python test/test_mock_coverage.py",
        timeout=30,
        description="–¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Å –º–æ–∫–∞–º–∏"
    )
    results["mock_tests"] = success
    
    # 3. REST API —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä–æ)
    print("\nüìã –≠–¢–ê–ü 3: REST API —Ç–µ—Å—Ç—ã")
    success, output = run_command_safe(
        "python test/test_rest_api_integration.py",
        timeout=30,
        description="REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    )
    results["rest_api_tests"] = success
    
    # 4. –°–±–æ—Ä–∫–∞ ESP32 (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
    print("\nüìã –≠–¢–ê–ü 4: –°–±–æ—Ä–∫–∞ ESP32")
    success, output = run_command_safe(
        "pio run -e esp32dev --silent",
        timeout=120,  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–±–æ—Ä–∫—É
        description="–°–±–æ—Ä–∫–∞ ESP32"
    )
    results["esp32_build"] = success
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏
        firmware_path = Path(".pio/build/esp32dev/firmware.bin")
        if firmware_path.exists():
            size = firmware_path.stat().st_size
            print(f"   üì¶ –†–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏: {size:,} –±–∞–π—Ç")
    
    # 5. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä–æ)
    print("\nüìã –≠–¢–ê–ü 5: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    success, output = run_command_safe(
        "python scripts/run_clang_tidy_analysis.py --quick",
        timeout=60,
        description="Clang-tidy –∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)"
    )
    results["static_analysis"] = success
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    failed_tests = total_tests - passed_tests
    
    for test_name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"[{status}] {test_name}")
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   üìä –í—Å–µ–≥–æ: {total_tests}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
    
    if failed_tests == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {failed_tests} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
