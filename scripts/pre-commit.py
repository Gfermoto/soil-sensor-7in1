#!/usr/bin/env python3
"""
Pre-commit hook –¥–ª—è JXCT –ø—Ä–æ–µ–∫—Ç–∞ v3.7.0
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import os
import sys
import subprocess
import time
from pathlib import Path
from typing import List, Tuple

class PreCommitHook:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.errors = []
        self.warnings = []

    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")

    def run_command(self, command: List[str], cwd: Path = None) -> Tuple[int, str, str]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                capture_output=True,
                text=True,
                timeout=60,  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç
                encoding='utf-8',
                errors='ignore'
            )
            return result.returncode, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return -1, "", f"Command timed out: {' '.join(command)}"
        except Exception as e:
            return -1, "", str(e)

    def check_python_syntax(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")

        python_files = [
            "test/test_format.py",
            "test/test_validation.py", 
            "test/test_routes.py",
            "scripts/run_simple_tests.py",
            "scripts/run_comprehensive_tests.py",
            "scripts/pre-commit.py"
        ]

        success = True
        for py_file in python_files:
            file_path = self.project_root / py_file
            if file_path.exists():
                returncode, stdout, stderr = self.run_command([sys.executable, "-m", "py_compile", str(file_path)])
                if returncode != 0:
                    self.log(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ {py_file}: {stderr}", "ERROR")
                    self.errors.append(f"Python syntax error in {py_file}")
                    success = False

        if success:
            self.log(f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return success

    def run_critical_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = [
            ("test/test_format.py", "–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
            ("test/test_validation.py", "–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        ]
        
        success = True
        for test_file, description in tests:
            self.log(f"–ó–∞–ø—É—Å–∫ {description}...")
            returncode, stdout, stderr = self.run_command([sys.executable, test_file])
            if returncode != 0:
                self.log(f"{description} –ø—Ä–æ–≤–∞–ª–µ–Ω: {stderr}", "ERROR")
                self.errors.append(f"{description} failed")
                success = False
            else:
                self.log(f"{description} –ø—Ä–æ–π–¥–µ–Ω")
        
        return success

    def check_esp32_build(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ESP32...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PlatformIO
        returncode, stdout, stderr = self.run_command(["pio", "--version"])
        if returncode != 0:
            self.log("PlatformIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–±–æ—Ä–∫–∏", "WARNING")
            self.warnings.append("PlatformIO not available")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é platformio.ini
        platformio_ini = self.project_root / "platformio.ini"
        if not platformio_ini.exists():
            self.log("platformio.ini –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            self.errors.append("platformio.ini not found")
            return False
        
        self.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ESP32 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

    def check_critical_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        
        critical_files = [
            "src/main.cpp",
            "platformio.ini",
            "include/version.h",
            "src/validation_utils.cpp",
            "src/jxct_format_utils.cpp"
        ]
        
        missing_files = []
        for file_path in critical_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            self.log(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {missing_files}", "ERROR")
            self.errors.append(f"Missing critical files: {missing_files}")
            return False
        
        self.log("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

    def run_all_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.log("üîç –ó–∞–ø—É—Å–∫ pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫ JXCT v3.7.0...")
        start_time = time.time()
        
        checks = [
            ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", self.check_python_syntax),
            ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã", self.check_critical_files),
            ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã", self.run_critical_tests),
            ("–°–±–æ—Ä–∫–∞ ESP32", self.check_esp32_build),
        ]
        
        success = True
        for check_name, check_func in checks:
            try:
                if not check_func():
                    success = False
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}", "ERROR")
                self.errors.append(f"Check '{check_name}' failed: {e}")
                success = False
        
        duration = time.time() - start_time
        self.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {duration:.1f}—Å")
        
        # –û—Ç—á–µ—Ç
        if self.errors:
            self.log("‚ùå –û–®–ò–ë–ö–ò:", "ERROR")
            for error in self.errors:
                self.log(f"  - {error}", "ERROR")
        
        if self.warnings:
            self.log("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:", "WARNING")
            for warning in self.warnings:
                self.log(f"  - {warning}", "WARNING")
        
        if success:
            self.log("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            self.log("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –∫–æ–º–º–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    hook = PreCommitHook()
    success = hook.run_all_checks()
    
    if success:
        print("\nüöÄ Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∫–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        sys.exit(0)
    else:
        print("\nüõë Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, –∫–æ–º–º–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        sys.exit(1)

if __name__ == "__main__":
    main()
