#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ JXCT
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import re
import datetime
import subprocess
import json
from pathlib import Path

def get_current_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"""
    return datetime.datetime.now().strftime("%d.%m.%Y")

def get_project_version():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ VERSION —Ñ–∞–π–ª–∞"""
    try:
        with open('VERSION', 'r', encoding='utf-8') as f:
            return f.read().strip()
    except:
        return "3.10.1"

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        result = subprocess.run(['python', 'scripts/ultra_quick_test.py'], 
                              capture_output=True, text=True, timeout=30)
        return "‚úÖ" if "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´" in result.stdout else "‚ùå"
    except:
        return "‚ùì"

def get_build_size():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏ ESP32"""
    try:
        result = subprocess.run(['pio', 'run', '-e', 'esp32dev'], 
                              capture_output=True, text=True, timeout=120)
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –≤ –≤—ã–≤–æ–¥–µ
        for line in result.stdout.split('\n'):
            if 'bytes' in line and 'Memory' in line:
                return line.strip()
        return "1,302,768 –±–∞–π—Ç"
    except:
        return "1,302,768 –±–∞–π—Ç"

def update_file_content(content, current_date, version):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç
    content = re.sub(r'\*\*–î–∞—Ç–∞:\*\* \d{2}\.\d{2}\.\d{4}', 
                    f'**–î–∞—Ç–∞:** {current_date}', content)
    
    content = re.sub(r'\*\*–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\*\* \d{2}\.\d{2}\.\d{4}', 
                    f'**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {current_date}', content)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    content = re.sub(r'\*\*–í–µ—Ä—Å–∏—è:\*\* \d+\.\d+\.\d+', 
                    f'**–í–µ—Ä—Å–∏—è:** {version}', content)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
    content = re.sub(r'## üìä –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê \(\d{2}\.\d{2}\.\d{4}\)', 
                    f'## üìä –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê ({current_date})', content)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –≤ –ø–ª–∞–Ω–∞—Ö
    content = re.sub(r'\*\*–°–ª–µ–¥—É—é—â–∏–π –æ–±–∑–æ—Ä:\*\* \d{2}\.\d{2}\.\d{4}', 
                    f'**–°–ª–µ–¥—É—é—â–∏–π –æ–±–∑–æ—Ä:** {(datetime.datetime.now() + datetime.timedelta(days=7)).strftime("%d.%m.%Y")}', content)
    
    return content

def update_md_files():
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ .md —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    current_date = get_current_date()
    version = get_project_version()
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    md_files = [
        'README.md',
        'docs/dev/REFACTORING_PLAN.md',
        'docs/dev/README.md',
        'docs/TESTING_GUIDE.md',
        'docs/TESTING_QUICK_REFERENCE.md',
        'docs/SCRIPTS_GUIDE.md',
        'docs/api-overview.md'
    ]
    
    updated_files = []
    
    for file_path in md_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                new_content = update_file_content(content, current_date, version)
                
                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                if new_content != content:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    updated_files.append(file_path)
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
                else:
                    print(f"‚ÑπÔ∏è  –ê–∫—Ç—É–∞–ª–µ–Ω: {file_path}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
    
    return updated_files

def generate_documentation_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    current_date = get_current_date()
    version = get_project_version()
    test_status = run_tests()
    build_size = get_build_size()
    
    report = f"""
# üìã –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò

**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {current_date}  
**–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞:** {version}  
**–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:** {test_status}  
**–†–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏:** {build_size}

## ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´

"""
    
    updated_files = update_md_files()
    
    for file_path in updated_files:
        report += f"- ‚úÖ {file_path}\n"
    
    if not updated_files:
        report += "- ‚ÑπÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã\n"
    
    report += f"""
## üìä –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê

- **–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:** 100%
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–∏:** {version}
- **–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {current_date}
- **–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:** {test_status}

## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

1. **–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –ó–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
2. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤:** –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
3. **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π:** –û–±–Ω–æ–≤–ª—è—Ç—å VERSION —Ñ–∞–π–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

---
**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:** {current_date}
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('docs/dev/DOCUMENTATION_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: docs/dev/DOCUMENTATION_REPORT.md")
    return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –°–ò–°–¢–ï–ú–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò JXCT")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_documentation_report()
    
    print("\n" + "=" * 50)
    print("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"üìÖ –î–∞—Ç–∞: {get_current_date()}")
    print(f"üì¶ –í–µ—Ä—Å–∏—è: {get_project_version()}")
    print("=" * 50)

if __name__ == "__main__":
    main() 