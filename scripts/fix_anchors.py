#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è–∫–æ—Ä–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ MkDocs.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö.
"""

import os
import re
import glob
from pathlib import Path

def extract_anchors_from_file(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö —è–∫–æ—Ä—è –∏–∑ —Ñ–∞–π–ª–∞."""
    anchors = {}
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (## –∏ ###)
    header_pattern = r'^(#{2,3})\s+(.+)$'
    matches = re.findall(header_pattern, content, re.MULTILINE)
    
    for level, title in matches:
        # –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º MkDocs
        anchor = re.sub(r'[^\w\s-]', '', title.lower())
        anchor = re.sub(r'[-\s]+', '-', anchor)
        anchor = anchor.strip('-')
        
        anchors[title] = anchor
    
    return anchors

def fix_anchors_in_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —è–∫–æ—Ä—è –≤ —Ñ–∞–π–ª–µ."""
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —è–∫–æ—Ä—è
    anchors = extract_anchors_from_file(file_path)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —è–∫–æ—Ä—è
    link_pattern = r'\[([^\]]+)\]\(#([^)]+)\)'
    
    def replace_link(match):
        link_text = match.group(1)
        old_anchor = match.group(2)
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for title, anchor in anchors.items():
            if anchor == old_anchor or title.lower().replace(' ', '-').replace('Ô∏è', '') == old_anchor:
                return f'[{link_text}](#{anchor})'
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return match.group(0)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
    new_content = re.sub(link_pattern, replace_link, content)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    if new_content != content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"  ‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    docs_dir = Path("docs")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ MD —Ñ–∞–π–ª—ã
    md_files = []
    md_files.extend(docs_dir.glob("*.md"))
    md_files.extend(docs_dir.glob("manuals/*.md"))
    md_files.extend(docs_dir.glob("dev/*.md"))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(md_files)} MD —Ñ–∞–π–ª–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in md_files:
        fix_anchors_in_file(file_path)
    
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 