# Auto-generate include/version.h from VERSION file before build.
# Используется только как PlatformIO extra_script (pre).

import os, re, sys
from datetime import datetime, timezone

try:
    # Работает как в standalone, так и в PlatformIO
    if '__file__' in globals():
        PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
        PROJECT_DIR = os.path.abspath(os.path.join(PROJECT_DIR, '..'))
    else:
        # В PlatformIO контексте найдем проект по наличию VERSION файла
        PROJECT_DIR = os.getcwd()
        while not os.path.exists(os.path.join(PROJECT_DIR, 'VERSION')) and PROJECT_DIR != os.path.dirname(PROJECT_DIR):
            PROJECT_DIR = os.path.dirname(PROJECT_DIR)
    VERSION_FILE = os.path.join(PROJECT_DIR, "VERSION")
    HEADER_PATH = os.path.join(PROJECT_DIR, "include", "version.h")

    if not os.path.exists(VERSION_FILE):
        version_str = "0.0.0"
    else:
        version_str = open(VERSION_FILE).read().strip()

    match = re.match(r"(\d+)\.(\d+)\.(\d+)", version_str)
    if not match:
        sys.stderr.write(f"Invalid version format: {version_str}\n")
        sys.exit(1)

    major, minor, patch = match.groups()

    header = f"""#pragma once

// Auto-generated. DO NOT EDIT MANUALLY.
// Generated by scripts/auto_version.py at {datetime.now(timezone.utc).isoformat()}Z

#define JXCT_VERSION_MAJOR {major}
#define JXCT_VERSION_MINOR {minor}
#define JXCT_VERSION_PATCH {patch}

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define JXCT_VERSION_STRING TOSTRING(JXCT_VERSION_MAJOR) "." TOSTRING(JXCT_VERSION_MINOR) "." TOSTRING(JXCT_VERSION_PATCH)

static const char DEVICE_MANUFACTURER[] = "Eyera";
static const char DEVICE_MODEL[] = "JXCT-7in1";
static const char DEVICE_SW_VERSION[] = JXCT_VERSION_STRING;
static const char* FIRMWARE_VERSION = JXCT_VERSION_STRING;

#define JXCT_VERSION_CODE (JXCT_VERSION_MAJOR * 10000 + JXCT_VERSION_MINOR * 100 + JXCT_VERSION_PATCH)
#define JXCT_VERSION_AT_LEAST(major, minor, patch)     (JXCT_VERSION_CODE >= ((major) * 10000 + (minor) * 100 + (patch)))

#ifndef JXCT_BUILD_DATE
#define JXCT_BUILD_DATE __DATE__
#endif
#ifndef JXCT_BUILD_TIME
#define JXCT_BUILD_TIME __TIME__
#endif
#define JXCT_FULL_VERSION_STRING JXCT_VERSION_STRING " (built " JXCT_BUILD_DATE " " JXCT_BUILD_TIME ")"
"""

    os.makedirs(os.path.dirname(HEADER_PATH), exist_ok=True)
    with open(HEADER_PATH, "w", encoding="utf-8") as f:
        f.write(header)
    print(f"[auto_version] version.h regenerated to {version_str}")
except Exception as e:
    print(f"[auto_version] error: {e}")
    sys.exit(1)
