#!/usr/bin/env python3
"""
JXCT Release Manager - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Ä–µ–ª–∏–∑–∞–º–∏
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Ä–µ–ª–∏–∑–∞–º–∏.
"""

import os
import re
import sys
import subprocess
import argparse
from datetime import datetime, timezone
from pathlib import Path

class ReleaseManager:
    def __init__(self, project_dir=None):
        self.project_dir = Path(project_dir) if project_dir else Path.cwd()
        self.version_file = self.project_dir / "VERSION"
        self.version_header = self.project_dir / "include" / "version.h"
        self.platformio_ini = self.project_dir / "platformio.ini"

    def get_current_version(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
        if not self.version_file.exists():
            return "0.0.0"
        return self.version_file.read_text(encoding='utf-8').strip()

    def get_latest_git_tag(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π git —Ç–µ–≥"""
        try:
            result = subprocess.run(
                ["git", "describe", "--tags", "--abbrev=0"],
                cwd=self.project_dir,
                capture_output=True,
                text=True,
                check=True
            )
            tag = result.stdout.strip()
            return tag.lstrip("v") if tag.startswith("v") else tag
        except subprocess.CalledProcessError:
            return ""

    def validate_version_format(self, version: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (major.minor.patch)"""
        return bool(re.match(r"^\d+\.\d+\.\d+$", version))

    def parse_version(self, version: str) -> tuple:
        """–†–∞–∑–æ–±—Ä–∞—Ç—å –≤–µ—Ä—Å–∏—é –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        match = re.match(r"(\d+)\.(\d+)\.(\d+)", version)
        if not match:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version}")
        return tuple(map(int, match.groups()))

    def update_version_file(self, version: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª VERSION"""
        self.version_file.write_text(f"{version}\n", encoding='utf-8')
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª VERSION: {version}")

    def update_version_header(self, version: str):
        """–û–±–Ω–æ–≤–∏—Ç—å include/version.h"""
        major, minor, patch = self.parse_version(version)

        header_content = f"""#pragma once

// Auto-generated. DO NOT EDIT MANUALLY.
// Generated by scripts/release_manager.py at {datetime.now(timezone.utc).isoformat()}Z

#define JXCT_VERSION_MAJOR {major}
#define JXCT_VERSION_MINOR {minor}
#define JXCT_VERSION_PATCH {patch}

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define JXCT_VERSION_STRING TOSTRING(JXCT_VERSION_MAJOR) "." TOSTRING(JXCT_VERSION_MINOR) "." TOSTRING(JXCT_VERSION_PATCH)

static const char DEVICE_MANUFACTURER[] = "Eyera";
static const char DEVICE_MODEL[] = "JXCT-7in1";
static const char DEVICE_SW_VERSION[] = JXCT_VERSION_STRING;
static const char* FIRMWARE_VERSION = JXCT_VERSION_STRING;

#define JXCT_VERSION_CODE (JXCT_VERSION_MAJOR * 10000 + JXCT_VERSION_MINOR * 100 + JXCT_VERSION_PATCH)
#define JXCT_VERSION_AT_LEAST(major, minor, patch)     (JXCT_VERSION_CODE >= ((major) * 10000 + (minor) * 100 + (patch)))

#ifndef JXCT_BUILD_DATE
#define JXCT_BUILD_DATE __DATE__
#endif
#ifndef JXCT_BUILD_TIME
#define JXCT_BUILD_TIME __TIME__
#endif
#define JXCT_FULL_VERSION_STRING JXCT_VERSION_STRING " (built " JXCT_BUILD_DATE " " JXCT_BUILD_TIME ")"
"""

        self.version_header.parent.mkdir(parents=True, exist_ok=True)
        self.version_header.write_text(header_content, encoding='utf-8')
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω include/version.h: {version}")

    def update_platformio_ini(self, version: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ platformio.ini"""
        if not self.platformio_ini.exists():
            print("‚ö†Ô∏è  platformio.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        try:
            content = self.platformio_ini.read_text(encoding='utf-8')
        except UnicodeDecodeError:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            for encoding in ['cp1251', 'latin-1', 'iso-8859-1']:
                try:
                    content = self.platformio_ini.read_text(encoding=encoding)
                    break
                except UnicodeDecodeError:
                    continue
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å platformio.ini")
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–µ—Ä—Å–∏–µ–π
        content = re.sub(
            r"; Version: \d+\.\d+\.\d+",
            f"; Version: {version}",
            content
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_date = datetime.now().strftime("%B %Y")
        content = re.sub(
            r"; Last Updated: [A-Za-z]+ \d{4}",
            f"; Last Updated: {current_date}",
            content
        )

        self.platformio_ini.write_text(content, encoding='utf-8')
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω platformio.ini: {version}")

    def bump_version(self, bump_type: str):
        """–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é (major, minor, patch)"""
        current = self.get_current_version()
        major, minor, patch = self.parse_version(current)

        if bump_type == "major":
            major += 1
            minor = 0
            patch = 0
        elif bump_type == "minor":
            minor += 1
            patch = 0
        elif bump_type == "patch":
            patch += 1
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø bump: {bump_type}")

        new_version = f"{major}.{minor}.{patch}"
        return new_version

    def update_all_version_files(self, version: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"""
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ {version}...")
        self.update_version_file(version)
        self.update_version_header(version)
        self.update_platformio_ini(version)
        print(f"‚úÖ –í–µ—Ä—Å–∏—è {version} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö")

    def delete_git_tag(self, version: str):
        """–£–¥–∞–ª–∏—Ç—å git —Ç–µ–≥ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ origin"""
        tag_name = f"v{version}"
        try:
            subprocess.run(["git", "tag", "-d", tag_name], cwd=self.project_dir, check=True)
            subprocess.run(["git", "push", "origin", f":refs/tags/{tag_name}"], cwd=self.project_dir, check=True)
            print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ç–µ–≥: {tag_name}")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ {tag_name} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")

    def create_git_tag(self, version: str, message: str = None, force: bool = False):
        """–°–æ–∑–¥–∞—Ç—å git —Ç–µ–≥, –ø—Ä–∏ force —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π"""
        tag_name = f"v{version}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
        exists = False
        try:
            subprocess.run(["git", "rev-parse", tag_name], cwd=self.project_dir, check=True, capture_output=True)
            exists = True
        except subprocess.CalledProcessError:
            pass
        if exists:
            if force:
                self.delete_git_tag(version)
            else:
                print(f"‚ö†Ô∏è  –¢–µ–≥ {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
        tag_message = message or f"JXCT Soil Sensor v{version}: —Ä–µ–ª–∏–∑"
        subprocess.run(["git", "tag", "-a", tag_name, "-m", tag_message], cwd=self.project_dir, check=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω git —Ç–µ–≥: {tag_name}")
        return True

    def commit_changes(self, version: str, message: str = None):
        """–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"""
        try:
            subprocess.run(
                ["git", "add", "VERSION", "include/version.h", "platformio.ini"],
                cwd=self.project_dir,
                check=True
            )

            commit_msg = message or f"version: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {version}"
            subprocess.run(
                ["git", "commit", "-m", commit_msg],
                cwd=self.project_dir,
                check=True
            )
            print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã: {version}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {e}")
            return False

    def push_changes(self, push_tag: bool = True):
        """–ó–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥"""
        try:
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(
                ["git", "push", "origin", "main"],
                cwd=self.project_dir,
                check=True
            )
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ main")

            # –ü—É—à–∏–º —Ç–µ–≥
            if push_tag:
                subprocess.run(
                    ["git", "push", "origin", "--tags"],
                    cwd=self.project_dir,
                    check=True
                )
                print("‚úÖ –¢–µ–≥–∏ –∑–∞–ø—É—à–µ–Ω—ã")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ: {e}")
            return False

    def create_release(self, version: str, message: str = None, auto_push: bool = True, force_tag: bool = False, no_bump: bool = False):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–ª–∏–∑, —Å –æ–ø—Ü–∏—è–º–∏ force_tag –∏ no_bump"""
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ {version}... (force_tag={force_tag}, no_bump={no_bump})")
        if not self.validate_version_format(version):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version}")
            return False
        if not no_bump:
            self.update_all_version_files(version)
            if not self.commit_changes(version, f"release: –≤–µ—Ä—Å–∏—è {version} ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"):
                return False
        # –°–æ–∑–¥–∞—ë–º —Ç–µ–≥ (force_tag)
        if not self.create_git_tag(version, message, force=force_tag):
            return False
        if auto_push:
            if not self.push_changes():
                return False
        print(f"üéâ –†–µ–ª–∏–∑ {version} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return True

    def sync_versions(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ VERSION
        git_version = self.get_latest_git_tag()
        file_version = self.get_current_version()

        if git_version and file_version != git_version:
            print(f"üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é: {file_version} ‚Üí {git_version}")
            self.update_all_version_files(git_version)
            return True
        elif not git_version:
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {file_version}")
            self.update_version_header(file_version)
            self.update_platformio_ini(file_version)
            return True

        print("‚úÖ –í–µ—Ä—Å–∏–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return False

def main():
    parser = argparse.ArgumentParser(description="JXCT Release Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Ä–µ–ª–∏–∑–∞–º–∏")
    parser.add_argument("command", choices=["version", "release", "bump", "sync"], help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--version", "-v", help="–í–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.6.2)")
    parser.add_argument("--type", "-t", choices=["major", "minor", "patch"], help="–¢–∏–ø —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –¥–ª—è bump/version")
    parser.add_argument("--message", "-m", help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞/—Ç–µ–≥–∞")
    parser.add_argument("--no-push", action="store_true", help="–ù–µ –ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    parser.add_argument("--no-commit", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–º–∏—Ç (—Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã)")
    parser.add_argument("--project-dir", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--force-tag", action="store_true", help="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    parser.add_argument("--no-bump", action="store_true", help="–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤–µ—Ä—Å–∏–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–≥ –∏ –ø—É—à")
    args = parser.parse_args()
    manager = ReleaseManager(args.project_dir)
    try:
        if args.command == "version":
            if not args.type:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã version —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --type")
                sys.exit(1)
            new_version = manager.bump_version(args.type)
            print(f"üìà –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
            manager.update_all_version_files(new_version)
            if not args.no_commit:
                if not manager.commit_changes(new_version, args.message):
                    sys.exit(1)
                if not args.no_push:
                    if not manager.push_changes(push_tag=False):
                        sys.exit(1)
            print(f"‚úÖ –í–µ—Ä—Å–∏—è {new_version} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        elif args.command == "release":
            if not args.version:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã release —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --version")
                sys.exit(1)
            success = manager.create_release(args.version, args.message, not args.no_push, force_tag=args.force_tag, no_bump=args.no_bump)
            sys.exit(0 if success else 1)
        elif args.command == "bump":
            if not args.type:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã bump —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --type")
                sys.exit(1)
            new_version = manager.bump_version(args.type)
            print(f"üìà –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
            success = manager.create_release(new_version, args.message, not args.no_push)
            sys.exit(0 if success else 1)
        elif args.command == "sync":
            changed = manager.sync_versions()
            if changed:
                print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ git add –∏ git commit –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
