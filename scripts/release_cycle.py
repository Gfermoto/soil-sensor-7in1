#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ü–∏–∫–ª–∞ —Ä–µ–ª–∏–∑–∞ JXCT
–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞:
1. –ü–æ–≤—ã—à–∞–µ—Ç –≤–µ—Ä—Å–∏—é
2. –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç  
3. –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç, —Ç–µ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ GitHub
"""

import os
import sys
import subprocess
import json
import re
from datetime import datetime

def run_command(cmd, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=check, encoding='utf-8', errors='ignore')
        if result and result.stdout and result.stdout.strip():
            print(f"‚úÖ {result.stdout.strip()}")
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stderr:
            print(f"‚ùå {e.stderr}")
        return None

def get_current_version():
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
    try:
        with open('VERSION', 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def increment_version(version, increment_type='patch'):
    """–ü–æ–≤—ã—à–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é"""
    parts = version.split('.')
    if len(parts) != 3:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version}")
        return None
    
    major, minor, patch = map(int, parts)
    
    if increment_type == 'major':
        major += 1
        minor = 0
        patch = 0
    elif increment_type == 'minor':
        minor += 1
        patch = 0
    else:  # patch
        patch += 1
    
    return f"{major}.{minor}.{patch}"

def update_version_files(new_version):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤–æ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    print(f"üìù –û–±–Ω–æ–≤–ª—è—é –≤–µ—Ä—Å–∏—é –¥–æ {new_version}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º VERSION
    with open('VERSION', 'w') as f:
        f.write(new_version)
    print("‚úÖ VERSION –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º manifest.json
    try:
        with open('manifest.json', 'r') as f:
            manifest = json.load(f)
        
        manifest['version'] = new_version
        manifest['url'] = f"https://github.com/Gfermoto/soil-sensor-7in1/releases/download/v{new_version}/firmware.bin"
        
        with open('manifest.json', 'w') as f:
            json.dump(manifest, f, indent=2)
        print("‚úÖ manifest.json –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è manifest.json: {e}")
        return False
    
    return True

def build_project():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —Å PlatformIO"""
    print("üî® –°–æ–±–∏—Ä–∞—é –ø—Ä–æ–µ–∫—Ç...")
    result = run_command("pio run")
    if result and result.returncode == 0:
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False

def create_git_release(version):
    """–°–æ–∑–¥–∞–µ—Ç Git –∫–æ–º–º–∏—Ç, —Ç–µ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ GitHub"""
    print(f"üì¶ –°–æ–∑–¥–∞—é Git —Ä–µ–ª–∏–∑ v{version}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    result = run_command("git add .")
    if not result:
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    commit_msg = f"""RELEASE v{version}: Automatic version bump

- VERSION: Updated to {version}
- BUILD: Project built successfully  
- FILES: VERSION and manifest.json updated
- AUTO: Created by release_cycle.py script

Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Version: {version}"""
    
    result = run_command(f'git commit -m "{commit_msg}"')
    if not result:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    result = run_command(f"git tag v{version}")
    if not result:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub
    result = run_command("git push origin main --tags")
    if not result:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ GitHub")
        return False
    
    print(f"‚úÖ –†–µ–ª–∏–∑ v{version} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¶–ò–ö–õ –†–ï–õ–ò–ó–ê JXCT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    increment_type = 'patch'
    if len(sys.argv) > 1:
        if sys.argv[1] in ['--help', '-h']:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python release_cycle.py [major|minor|patch] [--auto]")
            print("")
            print("–ê—Ä–≥—É–º–µ–Ω—Ç—ã:")
            print("  major    - –ø–æ–≤—ã—à–µ–Ω–∏–µ major –≤–µ—Ä—Å–∏–∏ (3.2.7 -> 4.0.0)")
            print("  minor    - –ø–æ–≤—ã—à–µ–Ω–∏–µ minor –≤–µ—Ä—Å–∏–∏ (3.2.7 -> 3.3.0)")
            print("  patch    - –ø–æ–≤—ã—à–µ–Ω–∏–µ patch –≤–µ—Ä—Å–∏–∏ (3.2.7 -> 3.2.8) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é]")
            print("  --auto   - –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            sys.exit(0)
        
        increment_type = sys.argv[1].lower()
        if increment_type not in ['major', 'minor', 'patch']:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: major, minor, patch")
            print("üí° –î–ª—è —Å–ø—Ä–∞–≤–∫–∏: python release_cycle.py --help")
            sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    current_version = get_current_version()
    if not current_version:
        sys.exit(1)
    
    print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
    
    # –ü–æ–≤—ã—à–∞–µ–º –≤–µ—Ä—Å–∏—é
    new_version = increment_version(current_version, increment_type)
    if not new_version:
        sys.exit(1)
    
    print(f"üìà –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(sys.argv) <= 2 or sys.argv[-1] != '--auto':
        response = input(f"ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ v{new_version}? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)
    
    print("üéØ –ù–ê–ß–ò–ù–ê–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¶–ò–ö–õ –†–ï–õ–ò–ó–ê")
    print("-" * 40)
    
    # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö
    if not update_version_files(new_version):
        sys.exit(1)
    
    # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    if not build_project():
        sys.exit(1)
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º Git —Ä–µ–ª–∏–∑
    if not create_git_release(new_version):
        sys.exit(1)
    
    print("=" * 50)
    print(f"üéâ –†–ï–õ–ò–ó v{new_version} –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
    print(f"üîó GitHub: https://github.com/Gfermoto/soil-sensor-7in1/releases/tag/v{new_version}")
    print("=" * 50)

if __name__ == "__main__":
    main() 