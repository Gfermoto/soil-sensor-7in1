#!/usr/bin/env python3
"""
‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JXCT
–ë–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π, —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
"""

import sys
import subprocess
import time
from pathlib import Path

def run_quick_test():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("‚ö° –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JXCT")
    print("=" * 50)
    
    tests = [
        {
            "name": "Python —Ç–µ—Å—Ç—ã",
            "command": "python -m pytest test/test_validation.py test/test_compensation_formulas.py -q",
            "timeout": 20
        },
        {
            "name": "–ú–æ–∫–∏ —Ç–µ—Å—Ç—ã", 
            "command": "python test/test_mock_coverage.py",
            "timeout": 15
        },
        {
            "name": "REST API —Ç–µ—Å—Ç—ã",
            "command": "python test/test_rest_api_integration.py", 
            "timeout": 10
        }
    ]
    
    results = []
    
    for test in tests:
        print(f"\nüîç {test['name']}...")
        
        try:
            result = subprocess.run(
                test["command"],
                shell=True,
                capture_output=True,
                text=True,
                timeout=test["timeout"]
            )
            
            success = result.returncode == 0
            results.append(success)
            
            if success:
                print(f"   ‚úÖ {test['name']}: –£–°–ü–ï–®–ù–û")
            else:
                print(f"   ‚ùå {test['name']}: –û–®–ò–ë–ö–ê")
                if result.stderr:
                    print(f"      {result.stderr[:100]}...")
                    
        except subprocess.TimeoutExpired:
            print(f"   ‚è∞ {test['name']}: –¢–ê–ô–ú–ê–£–¢")
            results.append(False)
        except Exception as e:
            print(f"   ‚ùå {test['name']}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total*100):.1f}%")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total-passed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return 1

if __name__ == "__main__":
    sys.exit(run_quick_test()) 