#!/usr/bin/env python3
"""
üîç JXCT Full Refactoring Analysis v1.0
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os
import sys
import subprocess
import time
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

class FullRefactoringAnalyzer:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.results = {}
        self.start_time = time.time()
    
    def run_all_analyses(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã"""
        print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê JXCT –î–õ–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
        print("=" * 60)
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô...")
        self.results["dependencies"] = self._run_dependency_analysis()
        
        # 2. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        print("\n2Ô∏è‚É£ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó...")
        self.results["static_analysis"] = self._run_static_analysis()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...")
        self.results["testing"] = self._run_testing()
        
        # 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n4Ô∏è‚É£ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò...")
        self.results["performance"] = self._run_performance_monitoring()
        
        # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–≥—Ä–µ—Å—Å–∏–π
        print("\n5Ô∏è‚É£ –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ì–†–ï–°–°–ò–ô...")
        self.results["regression"] = self._run_regression_monitoring()
        
        # 6. –°–±–æ—Ä–∫–∞
        print("\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–ë–û–†–ö–ò...")
        self.results["build"] = self._run_build_check()
        
        return self.results
    
    def _run_dependency_analysis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            result = subprocess.run(
                [sys.executable, "scripts/dependency_analyzer.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_static_analysis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        try:
            # Clang-tidy
            clang_result = subprocess.run(
                [sys.executable, "scripts/run_clang_tidy_analysis.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            # Cppcheck
            cppcheck_result = subprocess.run(
                ["pio", "check", "-e", "static-analysis"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "clang_tidy": {
                    "success": clang_result.returncode == 0,
                    "output": clang_result.stdout,
                    "error": clang_result.stderr if clang_result.returncode != 0 else None
                },
                "cppcheck": {
                    "success": cppcheck_result.returncode == 0,
                    "output": cppcheck_result.stdout,
                    "error": cppcheck_result.stderr if cppcheck_result.returncode != 0 else None
                }
            }
        except Exception as e:
            return {"error": str(e)}
    
    def _run_testing(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            # Python —Ç–µ—Å—Ç—ã
            pytest_result = subprocess.run(
                [sys.executable, "-m", "pytest", "test/test_validation.py", "test/test_compensation_formulas.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            integration_result = subprocess.run(
                [sys.executable, "test/test_business_logic_integration.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            # Native —Ç–µ—Å—Ç—ã
            native_result = subprocess.run(
                ["pio", "test", "-e", "native"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "pytest": {
                    "success": pytest_result.returncode == 0,
                    "output": pytest_result.stdout,
                    "error": pytest_result.stderr if pytest_result.returncode != 0 else None
                },
                "integration": {
                    "success": integration_result.returncode == 0,
                    "output": integration_result.stdout,
                    "error": integration_result.stderr if integration_result.returncode != 0 else None
                },
                "native": {
                    "success": native_result.returncode == 0,
                    "output": native_result.stdout,
                    "error": native_result.stderr if native_result.returncode != 0 else None
                }
            }
        except Exception as e:
            return {"error": str(e)}
    
    def _run_performance_monitoring(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            result = subprocess.run(
                [sys.executable, "scripts/performance_monitor.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_regression_monitoring(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–≥—Ä–µ—Å—Å–∏–π"""
        try:
            result = subprocess.run(
                [sys.executable, "scripts/regression_monitor.py"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_build_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–±–æ—Ä–∫—É"""
        try:
            result = subprocess.run(
                ["pio", "run", "-e", "esp32dev"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
        total_time = time.time() - self.start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_checks = 0
        passed_checks = 0
        failed_checks = 0
        warnings = []
        
        for category, result in self.results.items():
            if isinstance(result, dict):
                if "success" in result:
                    total_checks += 1
                    if result["success"]:
                        passed_checks += 1
                    else:
                        failed_checks += 1
                        if "error" in result:
                            warnings.append(f"{category}: {result['error']}")
                elif "error" in result:
                    warnings.append(f"{category}: {result['error']}")
        
        success_rate = (passed_checks/total_checks*100) if total_checks > 0 else 0
        summary = f"""
üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê
=====================================
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫
–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}
–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}
–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_checks}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

"""
        
        if warnings:
            summary += "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n"
            for warning in warnings:
                summary += f"  {warning}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        summary += "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:\n"
        
        if failed_checks > 0:
            summary += "  ‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
        elif passed_checks == total_checks:
            summary += "  ‚úÖ –ú–û–ñ–ù–û –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã\n"
        else:
            summary += "  ‚ö†Ô∏è –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –° –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨–Æ - –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        
        summary += """
üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
2. –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –æ—Ç–∫–∞—Ç–∞: git tag before-refactoring
3. –í—ã–ø–æ–ª–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
4. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã
5. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏
"""
        
        return summary
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        import json
        
        results_file = "test_reports/full_refactoring_analysis.json"
        os.makedirs(os.path.dirname(results_file), exist_ok=True)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            "timestamp": datetime.now().isoformat(),
            "execution_time": time.time() - self.start_time,
            "results": self.results
        }
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")

def main():
    analyzer = FullRefactoringAnalyzer()
    results = analyzer.run_all_analyses()
    
    summary = analyzer.generate_summary()
    print(summary)
    
    analyzer.save_results()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_file = "test_reports/refactoring_analysis_summary.txt"
    os.makedirs(os.path.dirname(summary_file), exist_ok=True)
    
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(summary)
    
    print(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_file}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    total_checks = sum(1 for r in results.values() if isinstance(r, dict) and "success" in r)
    failed_checks = sum(1 for r in results.values() if isinstance(r, dict) and "success" in r and not r["success"])
    
    return 1 if failed_checks > 0 else 0

if __name__ == "__main__":
    exit(main()) 