#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —è–∫–æ—Ä–µ–π –≤ MD —Ñ–∞–π–ª–∞—Ö
–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π
"""

import os
import re
import glob
from pathlib import Path

def transliterate_anchor(text):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è —è–∫–æ—Ä–µ–π"""
    cyrillic_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
        ' ': '-', '(': '', ')': '', '[': '', ']': '', '{': '', '}': '',
        '!': '', '?': '', '.': '', ',': '', ':': '', ';': '', '"': '',
        "'": '', '`': '', '‚Ññ': 'no', '¬´': '', '¬ª': '', '‚Äî': '-', '‚Äì': '-'
    }

    result = ''
    for char in text:
        if char in cyrillic_map:
            result += cyrillic_map[char]
        elif char.isalnum() or char in '-_':
            result += char.lower()
        else:
            result += '-'

    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –∏ –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    result = re.sub(r'-+', '-', result)
    result = result.strip('-')

    return result

def create_toc_from_headers(content):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    headers = re.findall(r'^(#{2,6})\s+(.+?)(?:\s+\{#(.+?)\})?$', content, re.MULTILINE)

    if not headers:
        return None

    toc_lines = ["## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"]

    for level_str, title, existing_anchor in headers:
        level = len(level_str)
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        clean_title = re.sub(r'[^\w\s\-().,!?]', '', title).strip()

        # –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä—å
        if existing_anchor:
            anchor = existing_anchor
        else:
            anchor = transliterate_anchor(clean_title)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø
        indent = "  " * (level - 2)

        toc_lines.append(f"{indent}- [{clean_title}](#{anchor})")

    toc_lines.append("\n---\n")
    return "\n".join(toc_lines)

def fix_file_anchors(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —è–∫–æ—Ä—è
        def fix_anchor(match):
            level = match.group(1)
            title = match.group(2)
            old_anchor = match.group(3)

            if old_anchor and re.search(r'[–∞-—è—ë]', old_anchor, re.IGNORECASE):
                new_anchor = transliterate_anchor(old_anchor)
                return f"{level} {title} {{#{new_anchor}}}"
            elif not old_anchor and level in ['##', '###', '####']:
                # –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                clean_title = re.sub(r'[^\w\s\-().,!?]', '', title).strip()
                new_anchor = transliterate_anchor(clean_title)
                return f"{level} {title} {{#{new_anchor}}}"
            else:
                return match.group(0)

        content = re.sub(r'^(#{2,6})\s+(.+?)(?:\s+\{#(.+?)\})?$', fix_anchor, content, flags=re.MULTILINE)

        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –¥—É–±–ª–∏
        # –¢–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è–∫–æ—Ä—è

        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True

        return False

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 50)

    # –ù–∞–π—Ç–∏ –≤—Å–µ MD —Ñ–∞–π–ª—ã
    md_files = []
    for pattern in ['docs/**/*.md', 'docs/*.md']:
        md_files.extend(glob.glob(pattern, recursive=True))

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(md_files)} MD —Ñ–∞–π–ª–æ–≤")

    fixed_count = 0

    for file_path in md_files:
        rel_path = os.path.relpath(file_path)
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {rel_path}")

        if fix_file_anchors(file_path):
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
            fixed_count += 1
        else:
            print(f"  ‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")

if __name__ == "__main__":
    main()
