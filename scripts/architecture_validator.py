#!/usr/bin/env python3
"""
Architecture Validator for JXCT Soil Sensor Project
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è IoT —Å–∏—Å—Ç–µ–º—ã –Ω–∞ ESP32

Author: JXCT Development Team
Version: 3.11.0
License: MIT
"""

import json
import re
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional, Set, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
MAX_FILE_SIZE_LINES = 500
MAX_MAIN_SIZE_LINES = 200
MIN_INTERFACE_COUNT = 3
MAX_CYCLIC_DEPENDENCIES = 0
MAX_DUPLICATE_CODE_RATIO = 0.1  # 10%

@dataclass
class ArchitectureViolation:
    """–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞"""
    principle: str
    severity: str  # HIGH, MEDIUM, LOW
    file: str
    line: Optional[int]
    message: str
    details: Dict[str, Any]
    
    def __post_init__(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        if not hasattr(self, 'principle'):
            self.principle = "Unknown"
        if not hasattr(self, 'details'):
            self.details = {}

@dataclass
class ArchitectureReport:
    """–û—Ç—á—ë—Ç –æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    version: str
    timestamp: str
    total_violations: int
    high_violations: int
    medium_violations: int
    low_violations: int
    violations: List[ArchitectureViolation]
    metrics: Dict[str, Any]
    summary: Dict[str, Any]

class JXCTArchitectureValidator:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è JXCT"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.violations: List[ArchitectureViolation] = []
        self.start_time = datetime.now()
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] {level}: {message}")
    
    def validate_single_responsibility(self) -> List[ArchitectureViolation]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏...")
        violations = []
        
        src_dir = self.project_root / "src"
        if not src_dir.exists():
            return [ArchitectureViolation(
                principle="Single Responsibility",
                severity="HIGH",
                file="src/",
                line=0,
                message="Source directory not found",
                details={"error": "src directory not found"}
            )]
        
        try:
            for cpp_file in src_dir.rglob("*.cpp"):
                try:
                    with open(cpp_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ
                    function_count = len(re.findall(r'\w+\s+\w+\s*\([^)]*\)\s*\{', content))
                    
                    if function_count > 20:  # –ü–æ—Ä–æ–≥ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                        violations.append(ArchitectureViolation(
                            principle="Single Responsibility",
                            severity="MEDIUM",
                            file=str(cpp_file.relative_to(self.project_root)),
                            line=0,
                            message=f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {function_count} —Ñ—É–Ω–∫—Ü–∏–π (–ø–æ—Ä–æ–≥: 20)",
                            details={
                                "function_count": function_count,
                                "threshold": 20,
                                "recommendation": "–†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –º–æ–¥—É–ª–∏"
                            }
                        ))
                        
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                    continue
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SRP: {e}", "ERROR")
            
        self.log(f"‚úÖ validate_single_responsibility: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        return violations
    
    def validate_dependency_inversion(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –ò–Ω–≤–µ—Ä—Å–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        violations = []
        include_dir = self.project_root / "include"
        
        if not include_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Dependency Inversion",
                severity="HIGH",
                file="include/",
                line=None,
                message="Include directory not found",
                details={"error": "include directory not found"}
            ))
            return violations
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        interface_files = list(include_dir.rglob("I*.h"))
        if len(interface_files) < MIN_INTERFACE_COUNT:
            violations.append(ArchitectureViolation(
                principle="Dependency Inversion",
                severity="HIGH",
                file="include/",
                line=None,
                message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {len(interface_files)} (–º–∏–Ω–∏–º—É–º {MIN_INTERFACE_COUNT})",
                details={
                    "interface_count": len(interface_files),
                    "min_count": MIN_INTERFACE_COUNT,
                    "found_interfaces": [f.name for f in interface_files]
                }
            ))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        src_dir = self.project_root / "src"
        interface_usage = {}
        
        if src_dir.exists():
            for interface_file in interface_files:
                interface_name = interface_file.stem
                usage_count = 0
                
                for cpp_file in src_dir.rglob("*.cpp"):
                    try:
                        with open(cpp_file, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if interface_name in content:
                                usage_count += 1
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                        continue
                
                interface_usage[interface_name] = usage_count
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            for interface_name, usage_count in interface_usage.items():
                if usage_count == 0:
                    violations.append(ArchitectureViolation(
                        principle="Dependency Inversion",
                        severity="MEDIUM",
                        file=f"include/{interface_name}.h",
                        line=None,
                        message=f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {interface_name} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
                        details={
                            "interface_name": interface_name,
                            "usage_count": usage_count,
                            "recommendation": "–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                        }
                    ))
        
        return violations
    
    def validate_interface_segregation(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
        
        violations = []
        include_dir = self.project_root / "include"
        
        if not include_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Interface Segregation",
                severity="HIGH",
                file="include/",
                line=None,
                message="Include directory not found",
                details={"error": "include directory not found"}
            ))
            return violations
        
        for interface_file in include_dir.rglob("I*.h"):
            try:
                with open(interface_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–¥—Å—á—ë—Ç –º–µ—Ç–æ–¥–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    method_count = len(re.findall(r'virtual\s+\w+\s+\w+\s*\([^)]*\)\s*=\s*0', content))
                    
                    if method_count > 10:
                        violations.append(ArchitectureViolation(
                            principle="Interface Segregation",
                            severity="MEDIUM",
                            file=str(interface_file),
                            line=None,
                            message=f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {method_count} –º–µ—Ç–æ–¥–æ–≤",
                            details={
                                "interface_name": interface_file.stem,
                                "method_count": method_count,
                                "recommendation": "–†–∞–∑–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ"
                            }
                        ))
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {interface_file}: {e}", "WARN")
                continue
        
        return violations
    
    def validate_open_closed_principle(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏...")
        
        violations = []
        src_dir = self.project_root / "src"
        
        if not src_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Open/Closed Principle",
                severity="HIGH",
                file="src/",
                line=None,
                message="Source directory not found",
                details={"error": "src directory not found"}
            ))
            return violations
        
        for cpp_file in src_dir.rglob("*.cpp"):
            try:
                with open(cpp_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ switch/case –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è OCP)
                    switch_matches = re.finditer(r'switch\s*\([^)]+\)\s*\{', content)
                    for match in switch_matches:
                        line_number = content[:match.start()].count('\n') + 1
                        violations.append(ArchitectureViolation(
                            principle="Open/Closed Principle",
                            severity="LOW",
                            file=str(cpp_file),
                            line=line_number,
                            message="Switch/case –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å OCP",
                            details={
                                "switch_statement": match.group(),
                                "recommendation": "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞"
                            }
                        ))
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                continue
        
        return violations
    
    def validate_liskov_substitution(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –ü—Ä–∏–Ω—Ü–∏–ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤...")
        
        violations = []
        include_dir = self.project_root / "include"
        
        if not include_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Liskov Substitution",
                severity="HIGH",
                file="include/",
                line=None,
                message="Include directory not found",
                details={"error": "include directory not found"}
            ))
            return violations
        
        # –ü–æ–∏—Å–∫ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        for header_file in include_dir.rglob("*.h"):
            try:
                with open(header_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ public –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                    inheritance_matches = re.findall(r'class\s+(\w+)\s*:\s*public\s+(\w+)', content)
                    
                    for derived, base in inheritance_matches:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
                        if f"class {base}" in content:
                            if f"virtual ~{base}" not in content:
                                violations.append(ArchitectureViolation(
                                    principle="Liskov Substitution",
                                    severity="MEDIUM",
                                    file=str(header_file),
                                    line=None,
                                    message=f"–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å {base} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä",
                                    details={
                                        "base_class": base,
                                        "derived_class": derived,
                                        "recommendation": "–î–æ–±–∞–≤–∏—Ç—å virtual ~BaseClass() = default;"
                                    }
                                ))
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {header_file}: {e}", "WARN")
                continue
        
        return violations
    
    def validate_cyclic_dependencies(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        violations = []
        include_dir = self.project_root / "include"
        
        if not include_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Cyclic Dependencies",
                severity="HIGH",
                file="include/",
                line=None,
                message="Include directory not found",
                details={"error": "include directory not found"}
            ))
            return violations
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ include
        dependencies = {}
        
        for header_file in include_dir.rglob("*.h"):
            try:
                with open(header_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ #include –¥–∏—Ä–µ–∫—Ç–∏–≤
                    includes = re.findall(r'#include\s*["<]([^">]+)[">]', content)
                    dependencies[header_file.name] = [inc for inc in includes if inc.endswith('.h')]
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {header_file}: {e}", "WARN")
                continue
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for file_name, deps in dependencies.items():
            for dep in deps:
                if dep in dependencies and file_name in dependencies.get(dep, []):
                    violations.append(ArchitectureViolation(
                        principle="Cyclic Dependencies",
                        severity="HIGH",
                        file=f"include/{file_name}",
                        line=None,
                        message=f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {file_name} –∏ {dep}",
                        details={
                            "file1": file_name,
                            "file2": dep,
                            "recommendation": "–†–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"
                        }
                    ))
        
        return violations
    
    def validate_main_file_size(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ main.cpp"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –†–∞–∑–º–µ—Ä main.cpp...")
        
        violations = []
        main_file = self.project_root / "src" / "main.cpp"
        
        if not main_file.exists():
            violations.append(ArchitectureViolation(
                principle="Main File Size",
                severity="HIGH",
                file=str(main_file),
                line=None,
                message="Main file not found",
                details={"error": "main.cpp not found"}
            ))
            return violations
        
        try:
            with open(main_file, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
                if len(lines) > MAX_MAIN_SIZE_LINES:
                    violations.append(ArchitectureViolation(
                        principle="Main File Size",
                        severity="HIGH",
                        file=str(main_file),
                        line=None,
                        message=f"main.cpp —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(lines)} —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º {MAX_MAIN_SIZE_LINES})",
                        details={
                            "file_size": len(lines),
                            "max_size": MAX_MAIN_SIZE_LINES,
                            "recommendation": "–í—ã–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏"
                        }
                    ))
        except Exception as e:
            violations.append(ArchitectureViolation(
                principle="Main File Size",
                severity="HIGH",
                file=str(main_file),
                line=None,
                message="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.cpp",
                details={"error": str(e)}
            ))
        
        return violations
    
    def validate_duplicate_code(self) -> List[ArchitectureViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...")
        
        violations = []
        src_dir = self.project_root / "src"
        
        if not src_dir.exists():
            violations.append(ArchitectureViolation(
                principle="Duplicate Code",
                severity="HIGH",
                file="src/",
                line=None,
                message="Source directory not found",
                details={"error": "src directory not found"}
            ))
            return violations
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        function_signatures = {}
        
        for cpp_file in src_dir.rglob("*.cpp"):
            try:
                with open(cpp_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
                    function_matches = re.findall(r'(\w+\s+\w+\s*\([^)]*\))\s*\{', content)
                    
                    for signature in function_matches:
                        if signature in function_signatures:
                            function_signatures[signature].append(str(cpp_file))
                        else:
                            function_signatures[signature] = [str(cpp_file)]
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        duplicate_functions = {sig: files for sig, files in function_signatures.items() if len(files) > 1}
        
        if duplicate_functions:
            violations.append(ArchitectureViolation(
                principle="Duplicate Code",
                severity="MEDIUM",
                file="src/",
                line=None,
                message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(duplicate_functions)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                details={
                    "duplicate_count": len(duplicate_functions),
                    "duplicates": list(duplicate_functions.keys())[:5],  # –ü–µ—Ä–≤—ã–µ 5
                    "recommendation": "–í—ã–Ω–µ—Å—Ç–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
                }
            ))
        
        return violations
    
    def calculate_metrics(self) -> Dict[str, Any]:
        """–†–∞—Å—á—ë—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        self.log("üìä –†–∞—Å—á—ë—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")
        
        src_dir = self.project_root / "src"
        include_dir = self.project_root / "include"
        
        # –ü–æ–¥—Å—á—ë—Ç —Ñ–∞–π–ª–æ–≤
        cpp_files = list(src_dir.rglob("*.cpp")) if src_dir.exists() else []
        header_files = list(include_dir.rglob("*.h")) if include_dir.exists() else []
        
        # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
        total_lines = 0
        file_sizes = {}
        
        for cpp_file in cpp_files:
            try:
                with open(cpp_file, 'r', encoding='utf-8') as f:
                    lines = len(f.readlines())
                    total_lines += lines
                    file_sizes[cpp_file.name] = lines
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cpp_file}: {e}", "WARN")
                continue
        
        # –ü–æ–¥—Å—á—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        interface_files = list(include_dir.rglob("I*.h")) if include_dir.exists() else []
        
        # –ü–æ–¥—Å—á—ë—Ç –∫–ª–∞—Å—Å–æ–≤
        total_classes = 0
        for header_file in header_files:
            try:
                with open(header_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    total_classes += len(re.findall(r'class\s+\w+', content))
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {header_file}: {e}", "WARN")
                continue
        
        return {
            "total_files": len(cpp_files) + len(header_files),
            "cpp_files": len(cpp_files),
            "header_files": len(header_files),
            "total_lines": total_lines,
            "interface_count": len(interface_files),
            "class_count": total_classes,
            "average_file_size": total_lines / len(cpp_files) if cpp_files else 0,
            "largest_file": max(file_sizes.values()) if file_sizes else 0,
            "largest_file_name": max(file_sizes, key=file_sizes.get) if file_sizes else "N/A"
        }
    
    def generate_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        total_violations = len(self.violations)
        high_violations = sum(1 for v in self.violations if v.severity == "HIGH")
        medium_violations = sum(1 for v in self.violations if v.severity == "MEDIUM")
        low_violations = sum(1 for v in self.violations if v.severity == "LOW")
        
        execution_time = (datetime.now() - self.start_time).total_seconds()
        
        return {
            "total_violations": total_violations,
            "high_violations": high_violations,
            "medium_violations": medium_violations,
            "low_violations": low_violations,
            "execution_time_seconds": execution_time,
            "timestamp": datetime.now().isoformat()
        }
    
    def save_report(self, report: ArchitectureReport):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ JSON"""
        report_path = self.project_root / "test_reports" / "architecture_validation.json"
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(report), f, indent=2, ensure_ascii=False)
        
        self.log(f"üìä –û—Ç—á—ë—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    
    def print_report(self, report: ArchitectureReport):
        """–í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üèóÔ∏è –û–¢–ß–Å–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´ JXCT")
        print("="*60)
        print(f"üìÖ –î–∞—Ç–∞: {report.timestamp}")
        print(f"üî¢ –í–µ—Ä—Å–∏—è: {report.version}")
        
        print("\nüìä –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print("-" * 60)
        metrics = report.metrics
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {metrics['total_files']}")
        print(f"üìÑ C++ —Ñ–∞–π–ª–æ–≤: {metrics['cpp_files']}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {metrics['header_files']}")
        print(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {metrics['total_lines']:,}")
        print(f"üîó –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {metrics['interface_count']}")
        print(f"üèóÔ∏è –ö–ª–∞—Å—Å–æ–≤: {metrics['class_count']}")
        print(f"üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {metrics['average_file_size']:.1f} —Å—Ç—Ä–æ–∫")
        print(f"üìè –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {metrics['largest_file_name']} ({metrics['largest_file']} —Å—Ç—Ä–æ–∫)")
        
        print("\nüö® –ù–ê–†–£–®–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –ü–†–ò–ù–¶–ò–ü–û–í:")
        print("-" * 60)
        
        for violation in report.violations:
            severity_icon = {
                "HIGH": "üî¥",
                "MEDIUM": "üü°", 
                "LOW": "üü¢"
            }.get(violation.severity, "‚ùì")
            
            print(f"{severity_icon} {violation.principle}: {violation.severity}")
            print(f"   üìÅ {violation.file}")
            if violation.line:
                print(f"   üìç –°—Ç—Ä–æ–∫–∞: {violation.line}")
            print(f"   üí¨ {violation.message}")
        
        print("\nüìà –°–í–û–î–ö–ê –ù–ê–†–£–®–ï–ù–ò–ô:")
        print("-" * 60)
        summary = report.summary
        print(f"üö® –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {summary['total_violations']}")
        print(f"üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary['high_violations']}")
        print(f"üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary['medium_violations']}")
        print(f"üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary['low_violations']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['execution_time_seconds']:.2f} —Å–µ–∫")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if summary['high_violations'] > 0:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("   - –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä main.cpp")
        elif summary['medium_violations'] > 0:
            print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            print("   - –£–ª—É—á—à–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
            print("   - –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        else:
            print("\n‚úÖ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –í –ü–û–†–Ø–î–ö–ï:")
            print("   - –í—Å–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–±–ª—é–¥–µ–Ω—ã")
            print("   - –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
        
        print("\n" + "="*60)
    
    def run_all_validations(self) -> ArchitectureReport:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        self.log("üèóÔ∏è –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã JXCT...")
        
        # –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–π
        validations = [
            self.validate_single_responsibility,
            self.validate_dependency_inversion,
            self.validate_interface_segregation,
            self.validate_open_closed_principle,
            self.validate_liskov_substitution,
            self.validate_cyclic_dependencies,
            self.validate_main_file_size,
            self.validate_duplicate_code
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–π
        for validation_func in validations:
            try:
                violations = validation_func()
                self.violations.extend(violations)
                self.log(f"‚úÖ {validation_func.__name__}: {len(violations)} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ {validation_func.__name__}: {e}", "ERROR")
        
        # –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –∏ —Å–≤–æ–¥–∫–∏
        metrics = self.calculate_metrics()
        summary = self.generate_summary()
        
        report = ArchitectureReport(
            version="3.11.0",
            timestamp=datetime.now().isoformat(),
            total_violations=summary["total_violations"],
            high_violations=summary["high_violations"],
            medium_violations=summary["medium_violations"],
            low_violations=summary["low_violations"],
            violations=self.violations,
            metrics=metrics,
            summary=summary
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
        self.save_report(report)
        self.print_report(report)
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = JXCTArchitectureValidator()
    
    try:
        report = validator.run_all_validations()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if report.summary["total_violations"] > 10:  # –ú–Ω–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            print("‚ùå Architecture Validation: FAIL")
            sys.exit(1)
        elif report.summary["total_violations"] > 0:  # –ï—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è
            print("‚ö†Ô∏è Architecture Validation: WARN")
            sys.exit(2)
        else:
            print("‚úÖ Architecture Validation: PASS")
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 