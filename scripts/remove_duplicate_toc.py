#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π
"""

import os
import re
import glob

def remove_auto_toc(file_path):
    """–£–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è —Å —è–∫–æ—Ä–µ–º {#Soderzhanie}"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content

        # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        # –ò—â–µ–º –±–ª–æ–∫ –æ—Ç "## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ {#Soderzhanie}" –¥–æ "---"
        pattern = r'## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ \{#Soderzhanie\}.*?^---\s*$'
        content = re.sub(pattern, '', content, flags=re.MULTILINE | re.DOTALL)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        content = re.sub(r'\n{3,}', '\n\n', content)

        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True

        return False

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 40)

    # –ù–∞–π—Ç–∏ –≤—Å–µ MD —Ñ–∞–π–ª—ã
    md_files = []
    for pattern in ['docs/**/*.md', 'docs/*.md']:
        md_files.extend(glob.glob(pattern, recursive=True))

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(md_files)} MD —Ñ–∞–π–ª–æ–≤")

    cleaned_count = 0

    for file_path in md_files:
        rel_path = os.path.relpath(file_path)
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {rel_path}")

        if remove_auto_toc(file_path):
            print(f"  ‚úÖ –û—á–∏—â–µ–Ω–æ")
            cleaned_count += 1
        else:
            print(f"  ‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")

if __name__ == "__main__":
    main()
