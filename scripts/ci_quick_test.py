#!/usr/bin/env python3
"""
‚ö° CI-–ë–ï–ó–û–ü–ê–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JXCT
–í–µ—Ä—Å–∏—è –¥–ª—è GitHub Actions –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏
"""

import sys
import subprocess
from pathlib import Path

def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        result = subprocess.run(
            "python -c \"import sys; sys.path.append('test'); import test_validation; print('OK')\"",
            shell=True, capture_output=True, text=True, timeout=10
        )
        return result.returncode == 0
    except:
        return False

def test_compensation():
    """–¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"""
    try:
        result = subprocess.run(
            "python -c \"import sys; sys.path.append('test'); import test_compensation_formulas; print('OK')\"",
            shell=True, capture_output=True, text=True, timeout=10
        )
        return result.returncode == 0
    except:
        return False

def test_critical():
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"""
    try:
        result = subprocess.run(
            "python -c \"import sys; sys.path.append('test'); import test_critical_validation; print('OK')\"",
            shell=True, capture_output=True, text=True, timeout=10
        )
        return result.returncode == 0
    except:
        return False

def test_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        result = subprocess.run(
            "python -c \"import sys; sys.path.append('test'); import test_format; print('OK')\"",
            shell=True, capture_output=True, text=True, timeout=10
        )
        return result.returncode == 0
    except:
        return False

def main():
    print("‚ö° CI-–ë–ï–ó–û–ü–ê–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 40)
    
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è", test_validation),
        ("–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è", test_compensation),
        ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ", test_critical),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_format)
    ]
    
    results = []
    
    for name, test_func in tests:
        print(f"üîç {name}...", end=" ")
        try:
            success = test_func()
            results.append(success)
            print("‚úÖ" if success else "‚ùå")
        except Exception as e:
            results.append(False)
            print("‚ùå")
    
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –ò–¢–û–ì–ò: {passed}/{total} ‚úÖ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print(f"‚ö†Ô∏è {total-passed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 