#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SonarCloud –≤ –ø—Ä–æ–µ–∫—Ç–µ JXCT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import sys
import subprocess
import yaml
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_yaml_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            yaml.safe_load(f)
        print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å YAML –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {file_path}")
        return True
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ YAML –≤ {file_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False

def check_sonar_project_properties():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é sonar-project.properties"""
    file_path = "sonar-project.properties"
    if not check_file_exists(file_path, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SonarCloud"):
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_keys = [
            "sonar.projectKey",
            "sonar.organization", 
            "sonar.projectName",
            "sonar.sources",
            "sonar.tests"
        ]
        
        missing_keys = []
        for key in required_keys:
            if key not in content:
                missing_keys.append(key)
        
        if missing_keys:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(missing_keys)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {file_path}: {e}")
        return False

def check_github_secrets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GitHub Secrets"""
    print("\nüîê –ü–†–û–í–ï–†–ö–ê GITHUB SECRETS:")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("‚úÖ SONAR_TOKEN - —Ç–æ–∫–µ–Ω SonarCloud")
    print("‚úÖ GITHUB_TOKEN - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ workflow —Ñ–∞–π–ª
    workflow_file = ".github/workflows/sonarcloud.yml"
    if os.path.exists(workflow_file):
        print(f"‚úÖ Workflow —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {workflow_file}")
        
        with open(workflow_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "SONAR_TOKEN" in content:
            print("‚úÖ SONAR_TOKEN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ workflow")
        else:
            print("‚ùå SONAR_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ workflow")
            
        if "GITHUB_TOKEN" in content:
            print("‚úÖ GITHUB_TOKEN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ workflow")
        else:
            print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ workflow")
    else:
        print(f"‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {workflow_file}")

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è SonarCloud"""
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê:")
    
    required_dirs = ["src", "include", "test"]
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {dir_name}")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dir_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cpp_files = list(Path("src").rglob("*.cpp")) + list(Path("include").rglob("*.h"))
    if cpp_files:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cpp_files)} C++ —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå C++ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
    test_files = list(Path("test").rglob("*.py")) + list(Path("test").rglob("*.cpp"))
    if test_files:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def check_coverage_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ü–û–ö–†–´–¢–ò–Ø:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    if os.path.exists("requirements.txt"):
        with open("requirements.txt", 'r', encoding='utf-8') as f:
            content = f.read()
        
        coverage_tools = ["pytest", "pytest-cov", "coverage"]
        for tool in coverage_tools:
            if tool in content:
                print(f"‚úÖ {tool} –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
            else:
                print(f"‚ö†Ô∏è {tool} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
    else:
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

def run_test_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
    print("\nüß™ –¢–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python —Ç–µ—Å—Ç—ã
        result = subprocess.run([
            "python", "-m", "pytest", "test/", "--collect-only", "-q"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Python —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Python —Ç–µ—Å—Ç–æ–≤: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è –¢–µ—Å—Ç Python —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python —Ç–µ—Å—Ç–æ–≤: {e}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PlatformIO
        result = subprocess.run([
            "pio", "--version"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ PlatformIO –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå PlatformIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ PlatformIO –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PlatformIO: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö SONARCLOUD –î–õ–Ø JXCT")
    print("=" * 50)
    
    checks_passed = 0
    total_checks = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    
    total_checks += 1
    if check_file_exists("sonar-project.properties", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SonarCloud"):
        checks_passed += 1
    
    total_checks += 1
    if check_sonar_project_properties():
        checks_passed += 1
    
    total_checks += 1
    if check_yaml_syntax(".github/workflows/sonarcloud.yml"):
        checks_passed += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    check_project_structure()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—Ä—ã—Ç–∏—è
    check_coverage_setup()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Secrets
    check_github_secrets()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    run_test_analysis()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò: {checks_passed}/{total_checks} –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if checks_passed == total_checks:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! SonarCloud –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ SONAR_TOKEN –≤ GitHub Secrets")
        print("2. –°–¥–µ–ª–∞–π—Ç–µ push –≤ main/refactoring/develop")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ sonarcloud.io")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê:")
        print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 