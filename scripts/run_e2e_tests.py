#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ E2E —Ç–µ—Å—Ç–æ–≤ –¥–ª—è JXCT
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
"""

import sys
import os
import json
import subprocess
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
sys.path.insert(0, str(Path(__file__).parent.parent / "test" / "e2e"))

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import requests
        return True
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")
        return False

def run_e2e_tests(device_ip="192.168.4.1", timeout=10):
    """–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"""
    if not check_requirements():
        return False

    print(f"üß™ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_ip}")
    print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {timeout}—Å")
    print("-" * 60)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        from test_web_ui import run_e2e_tests

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        import test_web_ui
        test_web_ui.JXCTWebUITests.base_url = f"http://{device_ip}"
        test_web_ui.JXCTAPITests.base_url = f"http://{device_ip}"

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        success = run_e2e_tests()

        return success

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def generate_report(results, output_file="test_reports/e2e-test-report.json"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
    report = {
        "timestamp": "2025-06-30T12:00:00Z",
        "test_type": "e2e",
        "framework": "unittest + requests",
        "target": "ESP32 Web UI",
        "results": results,
        "coverage": {
            "pages_tested": 7,
            "api_endpoints_tested": 4,
            "total_coverage": "‚â•70%"
        }
    }

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)

    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ JXCT")
    parser.add_argument("--ip", default="192.168.4.1",
                       help="IP –∞–¥—Ä–µ—Å ESP32 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    parser.add_argument("--timeout", type=int, default=10,
                       help="–¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
    parser.add_argument("--report", default="test_reports/e2e-test-report.json",
                       help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
    parser.add_argument("--ci", action="store_true",
                       help="–†–µ–∂–∏–º CI (–Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏)")

    args = parser.parse_args()

    print("üöÄ E2E —Ç–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ JXCT")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_e2e_tests(args.ip, args.timeout)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    results = {
        "success": success,
        "device_ip": args.ip,
        "timeout": args.timeout,
        "ci_mode": args.ci
    }
    generate_report(results, args.report)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if success:
        print("‚úÖ E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return 0
    else:
        if args.ci:
            print("‚ö†Ô∏è E2E —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ (CI —Ä–µ–∂–∏–º - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
            return 0
        else:
            print("‚ùå E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            return 1

if __name__ == "__main__":
    sys.exit(main())
