#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∞–π—Ç–æ–º
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏
"""

import json
import os
import shutil
import datetime
from pathlib import Path
from typing import Dict, Any, Optional

class ReportSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ —Å —Å–∞–π—Ç–æ–º"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.reports_dir = self.project_root / "test_reports"
        self.site_dir = self.project_root / "site"
        self.site_reports_dir = self.site_dir / "reports"
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.site_reports_dir.mkdir(exist_ok=True)
        
    def load_test_summary(self) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            summary_file = self.reports_dir / "simple-test-report.json"
            if summary_file.exists():
                with open(summary_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None
    
    def load_technical_debt(self) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—á—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞"""
        try:
            debt_file = self.reports_dir / "technical-debt.json"
            if debt_file.exists():
                with open(debt_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞: {e}")
        return None
    
    def generate_reports_index_html(self, test_summary: Dict[str, Any], tech_debt: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á—ë—Ç–æ–≤"""
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        success_rate = test_summary.get('summary', {}).get('success_rate', 0)
        status_icon = "‚úÖ" if success_rate >= 90 else "‚ö†Ô∏è" if success_rate >= 70 else "‚ùå"
        status_text = "–û—Ç–ª–∏—á–Ω–æ" if success_rate >= 90 else "–•–æ—Ä–æ—à–æ" if success_rate >= 70 else "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        status_color = "#28a745" if success_rate >= 90 else "#ffc107" if success_rate >= 70 else "#dc3545"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
        metrics = tech_debt.get('metrics', {})
        code_smells = metrics.get('code_smells', 0)
        duplicated_lines = metrics.get('duplicated_lines', 0)
        complexity_issues = metrics.get('complexity_issues', 0)
        security_hotspots = metrics.get('security_hotspots', 0)
        maintainability_rating = metrics.get('maintainability_rating', 'Unknown')
        debt_ratio = metrics.get('debt_ratio', 0.0)
        coverage = metrics.get('coverage', 0.0)
        
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß™ –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ - JXCT Soil Sensor</title>
    <meta name="description" content="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ JXCT">
    <link rel="icon" href="../assets/images/favicon.png">
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            min-height: 100vh;
        }}
        .header {{
            background: linear-gradient(135deg, #2e7d32 0%, #388e3c 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .nav {{
            background: #f8f9fa;
            padding: 1rem 2rem;
            border-bottom: 1px solid #e9ecef;
        }}
        .nav a {{
            color: #495057;
            text-decoration: none;
            margin-right: 20px;
            font-weight: 500;
        }}
        .nav a:hover {{
            color: #2e7d32;
        }}
        .status-banner {{
            background: {status_color};
            color: white;
            padding: 1rem 2rem;
            text-align: center;
            font-size: 1.2em;
            font-weight: bold;
        }}
        .content {{
            padding: 2rem;
        }}
        .metrics-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .metric-card {{
            background: #f8f9fa;
            border-left: 4px solid #2e7d32;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .metric-card h3 {{
            margin: 0 0 10px 0;
            color: #2e7d32;
            font-size: 1.1em;
        }}
        .metric-value {{
            font-size: 2.2em;
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }}
        .metric-label {{
            color: #6c757d;
            font-size: 0.9em;
        }}
        .progress-bar {{
            width: 100%;
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }}
        .progress-fill {{
            height: 100%;
            background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
            transition: width 0.3s ease;
        }}
        .tech-debt-section {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
            margin-top: 30px;
        }}
        .tech-debt-section h3 {{
            color: #856404;
            margin-top: 0;
        }}
        .update-info {{
            background: #e8f5e8;
            border-radius: 8px;
            padding: 20px;
            margin-top: 30px;
        }}
        .footer {{
            background: #f8f9fa;
            text-align: center;
            padding: 2rem;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
        }}
        .btn {{
            display: inline-block;
            padding: 10px 20px;
            margin: 5px;
            background: #2e7d32;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: 500;
            transition: background 0.3s;
        }}
        .btn:hover {{
            background: #1b5e20;
        }}
        .btn-secondary {{
            background: #6c757d;
        }}
        .btn-secondary:hover {{
            background: #495057;
        }}
        @media (max-width: 768px) {{
            .metrics-grid {{
                grid-template-columns: 1fr;
            }}
            .header h1 {{
                font-size: 2em;
            }}
            .content {{
                padding: 1rem;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞</h1>
            <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ JXCT Soil Sensor</p>
        </div>
        
        <div class="status-banner">
            {status_icon} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status_text} ({success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ)
        </div>
        
        <div class="nav">
            <a href="../index.html">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            <a href="../html/index.html">üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
            <a href="dashboard.html">üìà –î–∞—à–±–æ—Ä–¥</a>
            <a href="test-summary.json">üìÑ JSON –û—Ç—á—ë—Ç</a>
        </div>
        
        <div class="content">
            <h2>üìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <h3>üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</h3>
                    <div class="metric-value">{test_summary.get('summary', {}).get('total', 0)}</div>
                    <div class="metric-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</div>
                </div>
                <div class="metric-card">
                    <h3>‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö</h3>
                    <div class="metric-value">{test_summary.get('summary', {}).get('passed', 0)}</div>
                    <div class="metric-label">–¢–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ</div>
                </div>
                <div class="metric-card">
                    <h3>‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö</h3>
                    <div class="metric-value">{test_summary.get('summary', {}).get('failed', 0)}</div>
                    <div class="metric-label">–¢–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π</div>
                </div>
                <div class="metric-card">
                    <h3>üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å</h3>
                    <div class="metric-value">{success_rate:.1f}%</div>
                    <div class="metric-label">–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {success_rate}%;"></div>
                    </div>
                </div>
            </div>
            
            <div class="tech-debt-section">
                <h3>‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥</h3>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <h3>üîç Code Smells</h3>
                        <div class="metric-value">{code_smells}</div>
                        <div class="metric-label">–ü—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞</div>
                    </div>
                    <div class="metric-card">
                        <h3>üìã –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
                        <div class="metric-value">{duplicated_lines}</div>
                        <div class="metric-label">–°—Ç—Ä–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞</div>
                    </div>
                    <div class="metric-card">
                        <h3>üîÑ –°–ª–æ–∂–Ω–æ—Å—Ç—å</h3>
                        <div class="metric-value">{complexity_issues}</div>
                        <div class="metric-label">–§—É–Ω–∫—Ü–∏–π –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</div>
                    </div>
                    <div class="metric-card">
                        <h3>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
                        <div class="metric-value">{security_hotspots}</div>
                        <div class="metric-label">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π</div>
                    </div>
                </div>
                
                <div style="margin-top: 20px; padding: 15px; background: rgba(255,255,255,0.5); border-radius: 5px;">
                    <strong>üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏:</strong> <span style="color: #856404; font-weight: bold;">{maintainability_rating}</span><br>
                    <strong>üí∞ –î–æ–ª–≥–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</strong> <span style="color: #856404; font-weight: bold;">{debt_ratio:.2f}%</span><br>
                    <strong>üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏:</strong> <span style="color: #856404; font-weight: bold;">{coverage:.1f}%</span>
                </div>
            </div>
            
            <div class="update-info">
                <h3>üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</h3>
                <p><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç:</strong> {test_summary.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</p>
                <p><strong>–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞:</strong> {tech_debt.get('version', 'Unknown')}</p>
                <p><em>–û—Ç—á—ë—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ CI/CD pipeline</em></p>
                
                <div style="margin-top: 15px;">
                    <a href="test-summary.json" class="btn">üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Ç–µ—Å—Ç–æ–≤</a>
                    <a href="technical-debt.json" class="btn btn-secondary">‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥</a>
                    <a href="../html/index.html" class="btn btn-secondary">üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>¬© 2025 JXCT Development Team | –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ v3.6.0</p>
            <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {datetime.datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</p>
        </div>
    </div>
    
    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setTimeout(() => {{
            location.reload();
        }}, 600000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        document.addEventListener('DOMContentLoaded', function() {{
            const progressBars = document.querySelectorAll('.progress-fill');
            progressBars.forEach(bar => {{
                const width = bar.style.width;
                bar.style.width = '0%';
                setTimeout(() => {{
                    bar.style.width = width;
                }}, 500);
            }});
        }});
    </script>
</body>
</html>"""
        return html
    
    def generate_dashboard_html(self, test_summary: Dict[str, Any], tech_debt: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ –æ—Ç—á—ë—Ç–æ–≤"""
        
        success_rate = test_summary.get('summary', {}).get('success_rate', 0)
        status_icon = "‚úÖ" if success_rate >= 90 else "‚ö†Ô∏è" if success_rate >= 70 else "‚ùå"
        status_text = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ" if success_rate >= 90 else "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è" if success_rate >= 70 else "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        status_color = "#28a745" if success_rate >= 90 else "#ffc107" if success_rate >= 70 else "#dc3545"
        
        metrics = tech_debt.get('metrics', {})
        
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìà –î–∞—à–±–æ—Ä–¥ –∫–∞—á–µ—Å—Ç–≤–∞ - JXCT</title>
    <meta name="description" content="–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ JXCT">
    <link rel="icon" href="../assets/images/favicon.png">
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
        }}
        .dashboard {{
            max-width: 900px;
            margin: 0 auto;
        }}
        .summary-card {{
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
            margin-bottom: 20px;
        }}
        .status-icon {{
            font-size: 5em;
            margin-bottom: 20px;
        }}
        .status-text {{
            font-size: 1.8em;
            font-weight: bold;
            color: {status_color};
            margin-bottom: 15px;
        }}
        .quick-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }}
        .stat-item {{
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }}
        .stat-value {{
            font-size: 2.5em;
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }}
        .stat-label {{
            color: #6c757d;
            font-size: 0.95em;
            font-weight: 500;
        }}
        .actions {{
            text-align: center;
            margin-top: 30px;
        }}
        .btn {{
            display: inline-block;
            padding: 12px 25px;
            margin: 0 10px 10px 0;
            background: #2e7d32;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .btn:hover {{
            background: #1b5e20;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        }}
        .btn-secondary {{
            background: #6c757d;
        }}
        .btn-secondary:hover {{
            background: #495057;
        }}
        .timestamp {{
            color: #6c757d;
            font-size: 0.9em;
            margin-top: 15px;
        }}
        @media (max-width: 768px) {{
            .quick-stats {{
                grid-template-columns: repeat(2, 1fr);
            }}
            .status-text {{
                font-size: 1.4em;
            }}
            .summary-card {{
                padding: 20px;
            }}
        }}
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="summary-card">
            <div class="status-icon">{status_icon}</div>
            <div class="status-text">{status_text}</div>
            <div class="timestamp">
                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {test_summary.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            </div>
            
            <div class="quick-stats">
                <div class="stat-item">
                    <div class="stat-value">{success_rate:.0f}%</div>
                    <div class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{test_summary.get('summary', {}).get('total', 0)}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{metrics.get('code_smells', 0)}</div>
                    <div class="stat-label">Code Smells</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{metrics.get('coverage', 0):.0f}%</div>
                    <div class="stat-label">–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞</div>
                </div>
            </div>
            
            <div class="actions">
                <a href="index.html" class="btn">üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á—ë—Ç—ã</a>
                <a href="test-summary.json" class="btn btn-secondary">üìÑ JSON API</a>
                <a href="../index.html" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            </div>
        </div>
    </div>
    
    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setTimeout(() => {{
            location.reload();
        }}, 300000);
    </script>
</body>
</html>"""
        return html
    
    def sync_reports(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"""
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç—á—ë—Ç–æ–≤ —Å —Å–∞–π—Ç–æ–º...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á—ë—Ç—ã
            test_summary = self.load_test_summary()
            tech_debt = self.load_technical_debt()
            
            if not test_summary or not tech_debt:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç—ã")
                return False
            
            # –ö–æ–ø–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã
            if (self.reports_dir / "simple-test-report.json").exists():
                shutil.copy2(
                    self.reports_dir / "simple-test-report.json",
                    self.site_reports_dir / "test-summary.json"
                )
                print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if (self.reports_dir / "technical-debt.json").exists():
                shutil.copy2(
                    self.reports_dir / "technical-debt.json",
                    self.site_reports_dir / "technical-debt.json"
                )
                print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            reports_html = self.generate_reports_index_html(test_summary, tech_debt)
            with open(self.site_reports_dir / "index.html", 'w', encoding='utf-8') as f:
                f.write(reports_html)
            print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤")
            
            dashboard_html = self.generate_dashboard_html(test_summary, tech_debt)
            with open(self.site_reports_dir / "dashboard.html", 'w', encoding='utf-8') as f:
                f.write(dashboard_html)
            print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞—à–±–æ—Ä–¥ –æ—Ç—á—ë—Ç–æ–≤")
            
            print("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    if len(sys.argv) > 1:
        project_root = sys.argv[1]
    else:
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    print(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    synchronizer = ReportSynchronizer(project_root)
    success = synchronizer.sync_reports()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 