/**
 * @file logger.h
 * @brief –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

#ifndef LOGGER_H
#define LOGGER_H

#include <Arduino.h>

// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
enum LogLevel : std::uint8_t
{
    LOG_ERROR = 0,
    LOG_WARN = 1,
    LOG_INFO = 2,
    LOG_DEBUG = 3
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
enum class LogColor : std::uint8_t
{
    RED = 0,
    GREEN = 1,
    YELLOW = 2,
    BLUE = 3,
    MAGENTA = 4,
    CYAN = 5,
    WHITE = 6,
    CYAN_DEFAULT = 7  // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
};

// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
extern LogLevel currentLogLevel;

// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
#define LOG_SYMBOL_ERROR "‚ùå"
#define LOG_SYMBOL_WARN "‚ö†Ô∏è "
#define LOG_SYMBOL_INFO "‚ÑπÔ∏è "
#define LOG_SYMBOL_DEBUG "üîß"
#define LOG_SYMBOL_SUCCESS "‚úÖ"
#define LOG_SYMBOL_SENSOR "üì°"
#define LOG_SYMBOL_WIFI "üì∂"
#define LOG_SYMBOL_MQTT "üåê"
#define LOG_SYMBOL_HTTP "üåç"

// –¶–≤–µ—Ç–∞ ANSI –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
#define COLOR_RED "\033[31m"
#define COLOR_GREEN "\033[32m"
#define COLOR_YELLOW "\033[33m"
#define COLOR_BLUE "\033[34m"
#define COLOR_MAGENTA "\033[35m"
#define COLOR_CYAN "\033[36m"
#define COLOR_WHITE "\033[37m"
#define COLOR_RESET "\033[0m"

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
String formatLogMessage(const char* format, ...);
String formatLogMessage(const String& message);

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (String –≤–µ—Ä—Å–∏–∏)
void logError(const String& message);
void logWarn(const String& message);
void logInfo(const String& message);
void logDebug(const String& message);
void logSuccess(const String& message);
void logSensor(const String& message);
void logWiFi(const String& message);
void logMQTT(const String& message);
void logHTTP(const String& message);
void logSystem(const String& message);
void logData(const String& message);

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ variadic —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
void logError(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logWarn(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logInfo(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logDebug(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logSuccess(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logSensor(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logWiFi(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logMQTT(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logHTTP(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logSystem(const char* format, ...) __attribute__((format(printf, 1, 2)));
void logData(const char* format, ...) __attribute__((format(printf, 1, 2)));

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
void logSeparator();
void logNewline();
void logMemoryUsage();
void logSystemInfo();
void logUptime();
void logWiFiStatus();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏
void setLogColor(LogColor color);
void resetLogColor();
const char* getColorCode(LogColor color);

// –£—Ç–∏–ª–∏—Ç—ã
void printHeader(const String& title, LogColor color = LogColor::CYAN_DEFAULT);
void printSubHeader(const String& title, LogColor color = LogColor::BLUE);
void printTimeStamp();

// –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
#define logPrintHeader printHeader
#define logPrintSeparator(symbol, length) logSeparator()
#define logPrintBanner(text) printHeader(String(text), LogColor::CYAN)

#endif // LOGGER_H
