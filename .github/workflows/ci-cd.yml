name: JXCT CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit —Ç–µ—Å—Ç—ã
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install mkdocs mkdocs-material
        fi
        
    - name: Run unit tests
      run: |
        if [ -f "scripts/run_comprehensive_tests.py" ]; then
          python scripts/run_comprehensive_tests.py --unit --verbose
        else
          echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º fallback –æ—Ç—á—ë—Ç"
          mkdir -p test_reports
          echo '{"status": "skipped", "reason": "script_not_found"}' > test_reports/unit-test-results.json
        fi
      continue-on-error: true  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ jobs –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: test_reports/
        
  # E2E —Ç–µ—Å—Ç—ã
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install mkdocs mkdocs-material
        fi
        
    - name: Run E2E tests
      run: |
        if [ -f "scripts/run_e2e_tests.py" ]; then
          python scripts/run_e2e_tests.py --verbose
        else
          echo "‚ö†Ô∏è E2E —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º fallback –æ—Ç—á—ë—Ç"
          mkdir -p test_reports
          echo '{"status": "skipped", "reason": "script_not_found"}' > test_reports/e2e-test-results.json
        fi
      continue-on-error: true  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ jobs –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: test_reports/
        
  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install mkdocs mkdocs-material
        fi
        
    - name: Run static analysis
      run: |
        if [ -f "scripts/analyze_technical_debt.py" ]; then
          python scripts/analyze_technical_debt.py --verbose
        else
          echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º fallback –æ—Ç—á—ë—Ç"
          mkdir -p test_reports
          echo '{"status": "skipped", "reason": "script_not_found"}' > test_reports/static-analysis-results.json
        fi
      continue-on-error: true  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ jobs –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: test_reports/
        
  # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install mkdocs mkdocs-material
        fi
        
    - name: Run performance tests
      run: |
        if [ -f "scripts/run_performance_tests.py" ]; then
          python scripts/run_performance_tests.py --verbose
        else
          echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º fallback –æ—Ç—á—ë—Ç"
          mkdir -p test_reports
          echo '{"status": "skipped", "reason": "script_not_found"}' > test_reports/performance-test-results.json
        fi
      continue-on-error: true  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ jobs –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: test_reports/
        
  # –°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        if [ -f "mkdocs.yml" ]; then
          mkdocs build --clean
        else
          echo "‚ö†Ô∏è MkDocs –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
          mkdir -p site
          echo "<html><body><h1>Documentation</h1><p>MkDocs config not found</p></body></html>" > site/index.html
        fi
      continue-on-error: true
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation
        path: site/
        
  # –î–µ–ø–ª–æ–π –Ω–∞ GitHub Pages (—Ç–æ–ª—å–∫–æ –¥–ª—è main)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        if [ -f "mkdocs.yml" ]; then
          mkdocs build --clean
        else
          echo "‚ö†Ô∏è MkDocs –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
          mkdir -p site
          echo "<html><body><h1>Documentation</h1><p>MkDocs config not found</p></body></html>" > site/index.html
        fi
      continue-on-error: true
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        
  # –û—Ç—á—ë—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, static-analysis, performance-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Generate summary report
      run: |
        echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞..."
        mkdir -p test_reports
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
        cat > test_reports/summary-report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "github": {
            "sha": "$GITHUB_SHA",
            "ref": "$GITHUB_REF_NAME",
            "actor": "$GITHUB_ACTOR",
            "run_id": "$GITHUB_RUN_ID"
          },
          "jobs": {
            "unit-tests": "${{ needs.unit-tests.result }}",
            "e2e-tests": "${{ needs.e2e-tests.result }}",
            "static-analysis": "${{ needs.static-analysis.result }}",
            "performance-tests": "${{ needs.performance-tests.result }}"
          },
          "status": "completed"
        }
        EOF
        
        echo "‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω"
        ls -la test_reports/
        
    - name: Upload summary report
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test_reports/summary-report.json 