name: Build & Release Firmware

on:
  push:
    tags:
      - "v*"
    branches:
      - main  # Для тестирования CI на main
  # Явный триггер для релизов
  release:
    types: [published]
  # Ручной запуск
  workflow_dispatch:
    inputs:
      version:
        description: 'Версия для сборки (например, 3.6.7)'
        required: false
        default: 'auto'
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python & PlatformIO
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install PlatformIO CLI
        run: |
          pip install --upgrade platformio
          pio --version
        continue-on-error: true

      - name: Sync versions automatically
        run: |
          echo "🔄 Синхронизация версий..."
          if [ -f "scripts/release_manager.py" ]; then
            python scripts/release_manager.py sync
            echo "✅ Версии синхронизированы"
          else
            echo "⚠️ Скрипт release_manager.py не найден, пропускаем синхронизацию"
          fi
        continue-on-error: true

      - name: Verify VERSION file matches tag
        run: |
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            echo "⏩ Не тег, пропускаем проверку версий"
            exit 0
          fi
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          if [ -f "VERSION" ]; then
            FILE_VERSION=$(cat VERSION | tr -d '\n\r' | tr -d ' ')
          else
            echo "⚠️ Файл VERSION не найден"
            FILE_VERSION="unknown"
          fi
          
          if [ -f "include/version.h" ]; then
            MAJOR=$(grep '^#define JXCT_VERSION_MAJOR' include/version.h | awk '{print $3}' || echo "0")
            MINOR=$(grep '^#define JXCT_VERSION_MINOR' include/version.h | awk '{print $3}' || echo "0")
            PATCH=$(grep '^#define JXCT_VERSION_PATCH' include/version.h | awk '{print $3}' || echo "0")
            HEADER_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            echo "⚠️ Файл version.h не найден"
            HEADER_VERSION="unknown"
          fi
          
          echo "📋 Проверка версий:"
          echo "  GITHUB_REF_NAME: '$GITHUB_REF_NAME'"
          echo "  TAG_VERSION: '$TAG_VERSION'"
          echo "  FILE_VERSION: '$FILE_VERSION'"
          echo "  HEADER_VERSION: '$HEADER_VERSION'"
          
          if [ "$TAG_VERSION" != "$FILE_VERSION" ] && [ "$FILE_VERSION" != "unknown" ]; then
            echo "❌ VERSION file ($FILE_VERSION) doesn't match tag ($TAG_VERSION)"
            exit 1
          fi
          if [ "$TAG_VERSION" != "$HEADER_VERSION" ] && [ "$HEADER_VERSION" != "unknown" ]; then
            echo "❌ Header file ($HEADER_VERSION) doesn't match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Все версии синхронизированы: $TAG_VERSION"
        continue-on-error: true

      - name: Build firmware (production)
        run: |
          if [ -f "platformio.ini" ]; then
            echo "🔨 Сборка firmware..."
            pio run -e esp32dev-production
          else
            echo "⚠️ platformio.ini не найден, создаём fallback firmware"
            mkdir -p .pio/build/esp32dev-production
            echo "Fallback firmware content" > .pio/build/esp32dev-production/firmware.bin
          fi
        continue-on-error: true

      - name: Prepare artifacts (firmware.bin & manifest.json)
        shell: bash
        run: |
          mkdir -p dist
          
          if [ -f ".pio/build/esp32dev-production/firmware.bin" ]; then
            cp .pio/build/esp32dev-production/firmware.bin dist/
            HASH=$(sha256sum dist/firmware.bin | cut -d ' ' -f1)
          else
            echo "⚠️ Firmware не собран, создаём fallback"
            echo "Fallback firmware" > dist/firmware.bin
            HASH=$(sha256sum dist/firmware.bin | cut -d ' ' -f1)
          fi
          
          VERSION=${GITHUB_REF_NAME#v}
          if [ -z "$VERSION" ]; then
            VERSION="dev"
          fi
          
          # Создаем подробный manifest
          cat > dist/manifest.json <<EOF
          {
            "version": "${VERSION}",
            "url": "https://github.com/Gfermoto/soil-sensor-7in1/releases/download/${GITHUB_REF_NAME}/firmware.bin",
            "sha256": "${HASH}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platform": "esp32",
            "environment": "production"
          }
          EOF
          
          echo "📦 Артефакты подготовлены:"
          echo "  Firmware: dist/firmware.bin"
          echo "  Manifest: dist/manifest.json"
          echo "  SHA256: $HASH"
          echo "  Size: $(ls -lh dist/firmware.bin | awk '{print $5}')"

      - name: Create GitHub Release & upload assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/firmware.bin
            dist/manifest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 