name: üîÑ Update Site Reports

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  workflow_run:
    workflows: ["üß™ Comprehensive Testing"]
    types:
      - completed
  
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:
    inputs:
      force_update:
        description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤'
        required: false
        default: false
        type: boolean
  
  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 3:00 UTC
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-reports:
    name: üìä –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: üîç Check for test reports
        id: check_reports
        run: |
          if [ -f "test_reports/simple-test-report.json" ] && [ -f "test_reports/technical-debt.json" ]; then
            echo "reports_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Ç—á—ë—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
          else
            echo "reports_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è –û—Ç—á—ë—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          fi
      
      - name: üß™ Generate reports if missing
        if: steps.check_reports.outputs.reports_exist == 'false' || github.event.inputs.force_update == 'true'
        run: |
          echo "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã..."
          python scripts/run_comprehensive_tests.py --type basic --reports-only
      
      - name: üîÑ Synchronize reports to site
        run: |
          echo "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã —Å —Å–∞–π—Ç–æ–º..."
          python scripts/sync_reports_to_site.py
      
      - name: üìä Generate site metrics
        run: |
          echo "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∞–π—Ç–∞..."
          
          # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          python -c "
          import json
          import datetime
          
          # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á—ë—Ç—ã
          with open('test_reports/simple-test-report.json', 'r') as f:
              test_data = json.load(f)
          with open('test_reports/technical-debt.json', 'r') as f:
              debt_data = json.load(f)
          
          # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
          metrics = {
              'last_update': datetime.datetime.now().isoformat(),
              'test_success_rate': test_data.get('summary', {}).get('success_rate', 0),
              'total_tests': test_data.get('summary', {}).get('total', 0),
              'code_smells': debt_data.get('metrics', {}).get('code_smells', 0),
              'coverage': debt_data.get('metrics', {}).get('coverage', 0),
              'maintainability_rating': debt_data.get('metrics', {}).get('maintainability_rating', 'Unknown'),
              'debt_ratio': debt_data.get('metrics', {}).get('debt_ratio', 0)
          }
          
          with open('site/reports/metrics.json', 'w') as f:
              json.dump(metrics, f, indent=2)
          
          print('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ site/reports/metrics.json')
          "
      
      - name: üèóÔ∏è Build site
        run: |
          echo "üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º —Å–∞–π—Ç —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏..."
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MkDocs —Å –Ω–æ–≤—ã–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏
          if [ -f "mkdocs.yml" ]; then
            echo "üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MkDocs..."
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á—ë—Ç–æ–≤ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if ! grep -q "reports/" mkdocs.yml; then
              echo "  - 'üß™ –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞': reports/index.html" >> mkdocs.yml
            fi
          fi
          
          # –°–æ–∑–¥–∞—ë–º README –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
          cat > site/reports/README.md << 'EOF'
          # üìä –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
          
          –≠—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ—Ç—á—ë—Ç—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ JXCT.
          
          ## –§–∞–π–ª—ã
          
          - `index.html` - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤
          - `dashboard.html` - –ö—Ä–∞—Ç–∫–∏–π –¥–∞—à–±–æ—Ä–¥
          - `test-summary.json` - JSON –æ—Ç—á—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          - `technical-debt.json` - JSON –æ—Ç—á—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
          - `metrics.json` - –°–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
          
          ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          
          –û—Ç—á—ë—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ CI/CD pipeline.
          EOF
      
      - name: üìù Update main page with report links
        run: |
          echo "üìù –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞..."
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç—á—ë—Ç—ã –≤ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          if [ -f "site/index.html" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç—á—ë—Ç—ã
            if ! grep -q "reports/" site/index.html; then
              echo "‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç—á—ë—Ç—ã –≤ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É..."
              
              # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
              python -c "
              import re
              
              with open('site/index.html', 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á—ë—Ç—ã
              nav_pattern = r'(<div class=\"nav\"[^>]*>.*?)(</div>)'
              if re.search(nav_pattern, content, re.DOTALL):
                  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á—ë—Ç—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                  content = re.sub(
                      r'(<a href=\"[^\"]*\">.*?</a>)(\s*</div>)',
                      r'\1\n            <a href=\"reports/\">üß™ –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞</a>\2',
                      content,
                      flags=re.DOTALL
                  )
                  
                  with open('site/index.html', 'w', encoding='utf-8') as f:
                      f.write(content)
                  
                  print('‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
              else:
                  print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏')
              "
            fi
          fi
      
      - name: üîó Create report widgets
        run: |
          echo "üîó –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∂–µ—Ç—ã –æ—Ç—á—ë—Ç–æ–≤..."
          
          # –°–æ–∑–¥–∞—ë–º JavaScript –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
          cat > site/reports/widget.js << 'EOF'
          // –í–∏–¥–∂–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ JXCT
          (function() {
              const JXCT_REPORTS_API = '/reports/metrics.json';
              
              function loadReportsWidget(containerId) {
                  fetch(JXCT_REPORTS_API)
                      .then(response => response.json())
                      .then(data => {
                          const container = document.getElementById(containerId);
                          if (!container) return;
                          
                          const successRate = data.test_success_rate || 0;
                          const statusIcon = successRate >= 90 ? '‚úÖ' : successRate >= 70 ? '‚ö†Ô∏è' : '‚ùå';
                          const statusColor = successRate >= 90 ? '#28a745' : successRate >= 70 ? '#ffc107' : '#dc3545';
                          
                          container.innerHTML = `
                              <div style="
                                  background: white;
                                  border-radius: 8px;
                                  padding: 15px;
                                  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                                  font-family: 'Segoe UI', sans-serif;
                                  max-width: 300px;
                              ">
                                  <div style="text-align: center; margin-bottom: 10px;">
                                      <span style="font-size: 2em;">${statusIcon}</span>
                                      <div style="font-weight: bold; color: ${statusColor};">
                                          ${successRate.toFixed(1)}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ
                                      </div>
                                  </div>
                                  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
                                      <div style="text-align: center;">
                                          <div style="font-weight: bold; color: #495057;">${data.total_tests || 0}</div>
                                          <div style="color: #6c757d;">–¢–µ—Å—Ç–æ–≤</div>
                                      </div>
                                      <div style="text-align: center;">
                                          <div style="font-weight: bold; color: #495057;">${data.code_smells || 0}</div>
                                          <div style="color: #6c757d;">Code Smells</div>
                                      </div>
                                  </div>
                                  <div style="text-align: center; margin-top: 10px;">
                                      <a href="/reports/" style="
                                          display: inline-block;
                                          padding: 5px 15px;
                                          background: #2e7d32;
                                          color: white;
                                          text-decoration: none;
                                          border-radius: 4px;
                                          font-size: 0.85em;
                                      ">üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                                  </div>
                              </div>
                          `;
                      })
                      .catch(error => {
                          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ JXCT:', error);
                          const container = document.getElementById(containerId);
                          if (container) {
                              container.innerHTML = '<div style="color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤</div>';
                          }
                      });
              }
              
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
              if (document.readyState === 'loading') {
                  document.addEventListener('DOMContentLoaded', () => {
                      const widget = document.getElementById('jxct-reports-widget');
                      if (widget) loadReportsWidget('jxct-reports-widget');
                  });
              } else {
                  const widget = document.getElementById('jxct-reports-widget');
                  if (widget) loadReportsWidget('jxct-reports-widget');
              }
              
              // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              window.loadJXCTReportsWidget = loadReportsWidget;
          })();
          EOF
          
          echo "‚úÖ –í–∏–¥–∂–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω"
      
      - name: üíæ Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add site/reports/
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
          if git diff --staged --quiet; then
            echo "üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            git commit -m "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            
            - –û–±–Ω–æ–≤–ª–µ–Ω—ã JSON –æ—Ç—á—ë—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á—ë—Ç–æ–≤
            - –û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            - –°–æ–∑–¥–∞–Ω –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            
            –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            git push
            echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
          fi
      
      - name: üìä Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          commit_message: "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏"
      
      - name: üìà Summary
        run: |
          echo "## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "site/reports/metrics.json" ]; then
            echo "### üéØ –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏" >> $GITHUB_STEP_SUMMARY
            python -c "
            import json
            with open('site/reports/metrics.json', 'r') as f:
                metrics = json.load(f)
            
            success_rate = metrics.get('test_success_rate', 0)
            status_icon = '‚úÖ' if success_rate >= 90 else '‚ö†Ô∏è' if success_rate >= 70 else '‚ùå'
            
            print(f'- {status_icon} **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤:** {success_rate:.1f}%')
            print(f'- üìù **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {metrics.get(\"total_tests\", 0)}')
            print(f'- üîç **Code Smells:** {metrics.get(\"code_smells\", 0)}')
            print(f'- üìä **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:** {metrics.get(\"coverage\", 0):.1f}%')
            print(f'- üèÜ **–†–µ–π—Ç–∏–Ω–≥:** {metrics.get(\"maintainability_rating\", \"Unknown\")}')
            " >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó –°—Å—ã–ª–∫–∏" >> $GITHUB_STEP_SUMMARY
          echo "- [üìä –û—Ç—á—ë—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞](https://gfermoto.github.io/soil-sensor-7in1/reports/)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìà –î–∞—à–±–æ—Ä–¥](https://gfermoto.github.io/soil-sensor-7in1/reports/dashboard.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìÑ JSON API](https://gfermoto.github.io/soil-sensor-7in1/reports/metrics.json)" >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ –û—Ç—á—ë—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!" 