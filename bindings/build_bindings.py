#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Python-–æ–±—ë—Ä—Ç–æ–∫ —Å w64devkit
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def setup_compiler_path():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ w64devkit"""
    compiler_path = r"C:\Program Files\w64devkit\bin"
    
    if platform.system() == "Windows":
        current_path = os.environ.get("PATH", "")
        if compiler_path not in current_path:
            os.environ["PATH"] = current_path + ";" + compiler_path
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É: {compiler_path}")
        else:
            print(f"‚úÖ –ü—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {compiler_path}")
    else:
        print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Windows")

def check_compiler():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"""
    try:
        result = subprocess.run(["g++", "--version"],
                              capture_output=True, text=True, encoding="utf-8", timeout=10)
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –í–µ—Ä—Å–∏—è: {result.stdout.splitlines()[0]}")
            return True
        else:
            print("‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä g++ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞")
        return False

def build_bindings():
    """–°–æ–±–∏—Ä–∞–µ—Ç Python-–æ–±—ë—Ä—Ç–∫–∏ —Å w64devkit"""
    project_root = Path(__file__).parent.parent
    include_path = project_root / "include"
    src_path = project_root / "src"
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏
    cmd = [
        "g++", "-std=c++17", "-shared", "-fPIC",
        f"-I{include_path}",
        f"-I{src_path}",
        "-I/usr/include/python3.13",  # Python headers
        "-lpython3.13",  # Python library
        "jxct_core.cpp",
        "-o", "jxct_core.pyd"  # Windows shared library
    ]
    
    print(f"üî® –°–±–æ—Ä–∫–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, encoding="utf-8", timeout=120)
        if result.returncode == 0:
            print("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞: jxct_core.pyd")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–ë–û–†–ö–ê PYTHON-–û–ë–Å–†–¢–û–ö JXCT")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    setup_compiler_path()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    if not check_compiler():
        print("\n‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ w64devkit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return 1
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—ë—Ä—Ç–∫–∏
    if build_bindings():
        print("\nüéâ PYTHON-–û–ë–Å–†–¢–ö–ò –£–°–ü–ï–®–ù–û –°–û–ë–†–ê–ù–´!")
        return 0
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–ë–û–†–ö–ò PYTHON-–û–ë–Å–†–¢–û–ö")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 