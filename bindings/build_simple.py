#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö Python-–æ–±—ë—Ä—Ç–æ–∫ —Å Python C API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç w64devkit –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def setup_compiler_path():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ w64devkit"""
    compiler_path = r"C:\Program Files\w64devkit\bin"
    
    if platform.system() == "Windows":
        current_path = os.environ.get("PATH", "")
        if compiler_path not in current_path:
            os.environ["PATH"] = current_path + ";" + compiler_path
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É: {compiler_path}")
        else:
            print(f"‚úÖ –ü—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {compiler_path}")
    else:
        print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Windows")

def get_python_include():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Python include –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    import sysconfig
    return sysconfig.get_path('include')

def get_python_lib():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Python library"""
    import sysconfig
    return sysconfig.get_config_var('LIBDIR')

def build_simple_bindings():
    """–°–æ–±–∏—Ä–∞–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ Python-–æ–±—ë—Ä—Ç–∫–∏"""
    project_root = Path(__file__).parent.parent
    include_path = project_root / "include"
    src_path = project_root / "src"
    python_include = get_python_include()
    bindings_path = Path(__file__).parent
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è Windows
    cmd = [
        "g++", "-std=c++17", "-shared",
        f"-I{include_path}",
        f"-I{src_path}",
        f"-I{python_include}",
        f"-I{bindings_path}",
        "-DWIN32",
        "-D_WINDOWS",
        "-D_USRDLL",
        "-DDESKTOP_BUILD",
        "jxct_core_simple.cpp",
        "-o", "jxct_core.pyd"
    ]
    
    print(f"üî® –°–±–æ—Ä–∫–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, encoding="utf-8", timeout=120)
        if result.returncode == 0:
            print("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞: jxct_core.pyd")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ")
        return False

def test_bindings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏"""
    try:
        import jxct_core
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_data = {
            "temperature": 25.0,
            "humidity": 60.0,
            "ph": 6.5,
            "ec": 1500.0
        }
        
        result = jxct_core.validate_sensor_data(test_data)
        print(f"‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result['isValid']}")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        compensated = jxct_core.apply_compensation(test_data, 1)
        print(f"‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: pH={compensated['ph']:.2f}, EC={compensated['ec']:.1f}")
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = jxct_core.get_recommendations(test_data, "tomato", 1, 0)
        print(f"‚úÖ –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations['ph_action']}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–ë–û–†–ö–ê –£–ü–†–û–©–Å–ù–ù–´–• PYTHON-–û–ë–Å–†–¢–û–ö JXCT")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PATH –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    setup_compiler_path()
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—ë—Ä—Ç–∫–∏
    if build_simple_bindings():
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ë—Ä—Ç–æ–∫...")
        if test_bindings():
            print("\nüéâ PYTHON-–û–ë–Å–†–¢–ö–ò –£–°–ü–ï–®–ù–û –°–û–ë–†–ê–ù–´ –ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
            return 0
        else:
            print("\n‚ö†Ô∏è –û–±—ë—Ä—Ç–∫–∏ —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
            return 1
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–ë–û–†–ö–ò PYTHON-–û–ë–Å–†–¢–û–ö")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 